// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_CredState
#include <CredState.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_HighScore
#include <HighScore.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_ScoreState
#include <ScoreState.h>
#endif
#ifndef INCLUDED_SettingState
#include <SettingState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmoLoader
#include <flixel/addons/editors/ogmo/FlxOgmoLoader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f119275e66a7b90_23_new,"MenuState","new",0xe563b1c4,"MenuState.new","MenuState.hx",23,0xdfbcb22c)
static const ::String _hx_array_data_c0b6bfd2_1[] = {
	HX_("Play",14,5a,33,35),HX_("Credits",fa,35,af,e0),HX_("Hall of Shame",c2,6f,3b,9c),HX_("Settings",03,39,ef,64),HX_("Join Our Discord",c2,c4,41,73),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_67_create,"MenuState","create",0xe57b7c18,"MenuState.create","MenuState.hx",67,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_90_initTilemap,"MenuState","initTilemap",0x9d9f4462,"MenuState.initTilemap","MenuState.hx",90,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_133_initImages,"MenuState","initImages",0x1baa7f04,"MenuState.initImages","MenuState.hx",133,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_165_initText,"MenuState","initText",0xfe218ff9,"MenuState.initText","MenuState.hx",165,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_231_scaleUp,"MenuState","scaleUp",0x3a2db2e9,"MenuState.scaleUp","MenuState.hx",231,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_237_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",237,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_284_menuHandling,"MenuState","menuHandling",0x9ef231c0,"MenuState.menuHandling","MenuState.hx",284,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_340_resetBarFill,"MenuState","resetBarFill",0x0979aa03,"MenuState.resetBarFill","MenuState.hx",340,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_348_checkTilemapPos,"MenuState","checkTilemapPos",0x8f73c452,"MenuState.checkTilemapPos","MenuState.hx",348,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_353_checkWallPos,"MenuState","checkWallPos",0x930884de,"MenuState.checkWallPos","MenuState.hx",353,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_362_updatePos,"MenuState","updatePos",0xb8f33f6f,"MenuState.updatePos","MenuState.hx",362,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_374_generateTilemap,"MenuState","generateTilemap",0x4e57a0dd,"MenuState.generateTilemap","MenuState.hx",374,0xdfbcb22c)

void MenuState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_23_new)
HXLINE(  64)		this->discordLink = HX_("https://discord.gg/t22G6Fr",51,8e,a4,a2);
HXLINE(  62)		this->mapOffsetX = ((Float)-86);
HXLINE(  61)		this->mapZoom = ((Float)5);
HXLINE(  59)		this->selMax = (int)0;
HXLINE(  57)		this->selected = (int)0;
HXLINE(  54)		this->menuItems = ::Array_obj< ::String >::fromData( _hx_array_data_c0b6bfd2_1,5);
HXLINE(  49)		this->speed = ((Float)3);
HXLINE(  28)		this->currentVersion = HX_("v1.2.0",01,ea,4c,83);
HXLINE(  23)		super::__construct(MaxSize);
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x17fb3926) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x17fb3926;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void MenuState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_67_create)
HXLINE(  68)		::flixel::FlxG_obj::timeScale = (int)1;
HXLINE(  70)		::flixel::FlxG_obj::save->bind(HX_("File",9c,fa,94,2e));
HXLINE(  71)		::HighScore_obj::load();
HXLINE(  76)		::flixel::FlxG_obj::camera->fade((int)-16777216,((Float)0.8),true,null(),null());
HXLINE(  78)		this->initTilemap();
HXLINE(  79)		this->initImages();
HXLINE(  80)		this->initText();
HXLINE(  82)		::flixel::tweens::FlxTween_obj::tween(this->mScore, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(this->mScore->y + (int)24))),((Float)0.86), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),(int)4)));
HXLINE(  84)		Float _hx_tmp = (this->sprMonster->scale->y * ((Float)1.07));
HXDLIN(  84)		::flixel::tweens::FlxTween_obj::tween(this->sprMonster->scale, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(this->sprMonster->scale->x * ((Float)1.075)))
            			->setFixed(1,HX_("y",79,00,00,00),_hx_tmp)),((Float)0.89999999999999991), ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),(int)4)));
HXLINE(  86)		this->super::create();
            	}


void MenuState_obj::initTilemap(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_90_initTilemap)
HXLINE(  91)		this->_grpTilemaps =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  92)		this->add(this->_grpTilemaps);
HXLINE(  94)		this->_grpWalls =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  95)		this->add(this->_grpWalls);
HXLINE(  97)		Float scaleFixin = ((int)12 * this->mapZoom);
HXLINE( 101)		this->_map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,HX_("assets/data/start.oel",71,38,f0,d5));
HXLINE( 103)		this->_mFloors = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Floor",ac,41,c4,95));
HXLINE( 104)		this->_grpTilemaps->add(this->_mFloors).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 106)		this->_mWalls = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Walls",09,7c,4c,58));
HXLINE( 107)		this->_grpWalls->add(this->_mWalls).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 110)		this->_map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,HX_("assets/data/chunk7.oel",8b,7b,59,b0));
HXLINE( 112)		this->_mFloors2 = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Floor",ac,41,c4,95));
HXLINE( 113)		{
HXLINE( 113)			 ::flixel::tile::FlxTilemap _g = this->_mFloors2;
HXDLIN( 113)			Float _g1 = _g->y;
HXDLIN( 113)			_g->set_y((_g1 - ((int)16 * scaleFixin)));
            		}
HXLINE( 114)		this->_grpTilemaps->add(this->_mFloors2).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 116)		this->_mWalls2 = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Walls",09,7c,4c,58));
HXLINE( 117)		{
HXLINE( 117)			 ::flixel::tile::FlxTilemap _g2 = this->_mWalls2;
HXDLIN( 117)			Float _g3 = _g2->y;
HXDLIN( 117)			_g2->set_y((_g3 - ((int)16 * scaleFixin)));
            		}
HXLINE( 118)		this->_grpWalls->add(this->_mWalls2).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 120)		this->_mFloors3 = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Floor",ac,41,c4,95));
HXLINE( 121)		{
HXLINE( 121)			 ::flixel::tile::FlxTilemap _g4 = this->_mFloors3;
HXDLIN( 121)			Float _g5 = _g4->y;
HXDLIN( 121)			_g4->set_y((_g5 - (((int)16 * scaleFixin) * (int)2)));
            		}
HXLINE( 122)		this->_grpTilemaps->add(this->_mFloors3).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 124)		this->_mWalls3 = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Walls",09,7c,4c,58));
HXLINE( 125)		{
HXLINE( 125)			 ::flixel::tile::FlxTilemap _g6 = this->_mWalls3;
HXDLIN( 125)			Float _g7 = _g6->y;
HXDLIN( 125)			_g6->set_y((_g7 - (((int)16 * scaleFixin) * (int)2)));
            		}
HXLINE( 126)		this->_grpWalls->add(this->_mWalls3).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 128)		this->_grpTilemaps->forEach(this->scaleUp_dyn(),null());
HXLINE( 129)		this->_grpWalls->forEach(this->scaleUp_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,initTilemap,(void))

void MenuState_obj::initImages(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_133_initImages)
HXLINE( 134)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,(int)-16777216,null(),null());
HXLINE( 135)		this->bg->set_alpha(((Float)0.4));
HXLINE( 136)		this->add(this->bg);
HXLINE( 138)		this->sprMonster =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)30,null())->loadGraphic(HX_("assets/images/mmLogo.png",11,85,1c,1a),false,(int)492,(int)166,null(),null());
HXLINE( 139)		this->sprMonster->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 145)		if (::SettingState_obj::aprilFools) {
HXLINE( 147)			this->sprMonster->loadGraphic(HX_("assets/images/aprilfools.png",ad,c7,6e,c9),false,(int)492,(int)166,null(),null());
HXLINE( 148)			this->sprMashing->loadGraphic(HX_("assets/images/edition.png",6e,fc,cc,f9),false,(int)319,(int)62,null(),null());
HXLINE( 149)			this->add(this->sprMashing);
            		}
HXLINE( 160)		this->add(this->sprMonster);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,initImages,(void))

void MenuState_obj::initText(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_165_initText)
HXLINE( 166)		this->_grpMenuBar =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 167)		this->add(this->_grpMenuBar);
HXLINE( 169)		this->selector =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)315,null());
HXLINE( 170)		this->selector->makeGraphic(::flixel::FlxG_obj::width,(int)36,(int)-65281,null(),null());
HXLINE( 174)		this->_grpMenu =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 175)		this->add(this->_grpMenu);
HXLINE( 177)		this->selMax = (this->menuItems->length - (int)1);
HXLINE( 179)		{
HXLINE( 179)			int _g1 = (int)0;
HXDLIN( 179)			int _g = this->menuItems->length;
HXDLIN( 179)			while((_g1 < _g)){
HXLINE( 179)				_g1 = (_g1 + (int)1);
HXDLIN( 179)				int i = (_g1 - (int)1);
HXLINE( 187)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,((i * (int)54) + (int)320),(int)0,this->menuItems->__get(i),(int)32,null());
HXLINE( 188)				text->set_color((int)-16777216);
HXLINE( 189)				text->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 190)				this->_grpMenu->add(text).StaticCast<  ::flixel::text::FlxText >();
            			}
            		}
HXLINE( 195)		this->mScore =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(((Float)::flixel::FlxG_obj::height / (Float)(int)2) + (int)210),(int)0,HX_("",00,00,00,00),(int)40,null());
HXLINE( 202)		 ::flixel::text::FlxText _hx_tmp = this->mScore;
HXDLIN( 202)		_hx_tmp->set_text((((HX_("High Score: ",ba,bf,53,d5) + ::HighScore_obj::score) + HX_("\nTotal Score: ",92,53,01,ab)) + ::HighScore_obj::totalScore));
HXLINE( 203)		this->mScore->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 204)		this->mScore->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 205)		this->add(this->mScore);
HXLINE( 207)		if ((::HighScore_obj::recentScore > (int)0)) {
HXLINE( 209)			 ::flixel::text::FlxText _g2 = this->mScore;
HXDLIN( 209)			::String _g3 = _g2->text;
HXDLIN( 209)			_g2->set_text((_g3 + (HX_("\nRecent Score: ",7d,4b,af,98) + ::HighScore_obj::recentScore)));
            		}
HXLINE( 213)		this->debugInfo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)8,(::flixel::FlxG_obj::height - (int)20),(int)0,this->currentVersion,(int)16,null());
HXLINE( 214)		this->add(this->debugInfo);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,initText,(void))

void MenuState_obj::scaleUp( ::flixel::tile::FlxTilemap t){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_231_scaleUp)
HXLINE( 232)		t->scale->set(this->mapZoom,this->mapZoom);
HXLINE( 233)		t->set_x(this->mapOffsetX);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuState_obj,scaleUp,(void))

void MenuState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_237_update)
HXLINE( 243)		this->menuHandling();
HXLINE( 277)		this->_grpTilemaps->forEach(this->checkTilemapPos_dyn(),null());
HXLINE( 278)		this->_grpWalls->forEach(this->checkWallPos_dyn(),null());
HXLINE( 280)		this->super::update(elapsed);
            	}


void MenuState_obj::menuHandling(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_284_menuHandling)
HXLINE( 285)		{
HXLINE( 285)			int _g1 = (int)0;
HXDLIN( 285)			int _g = this->_grpMenu->members->get_length();
HXDLIN( 285)			while((_g1 < _g)){
HXLINE( 285)				_g1 = (_g1 + (int)1);
HXDLIN( 285)				int i = (_g1 - (int)1);
HXLINE( 287)				Dynamic( this->_grpMenu->members->__get(i)).StaticCast<  ::flixel::text::FlxText >()->set_color((int)-1);
            			}
            		}
HXLINE( 290)		Dynamic( this->_grpMenu->members->__get(this->selected)).StaticCast<  ::flixel::text::FlxText >()->set_color((int)-256);
HXLINE( 303)		{
HXLINE( 303)			 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this = ::flixel::FlxG_obj::watch;
HXDLIN( 303)			 ::Dynamic value = this->selected;
            		}
HXLINE( 306)		int _hx_tmp = this->selected;
HXDLIN( 306)		if ((_hx_tmp > (this->_grpMenu->members->get_length() - (int)1))) {
HXLINE( 307)			this->selected = (int)0;
            		}
HXLINE( 308)		if ((this->selected < (int)0)) {
HXLINE( 309)			this->selected = (this->_grpMenu->members->get_length() - (int)1);
            		}
HXLINE( 311)		{
HXLINE( 311)			 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this1 = ::flixel::FlxG_obj::watch;
HXDLIN( 311)			 ::Dynamic value1 = this->selected;
            		}
HXLINE( 320)		 ::flixel::input::keyboard::FlxKeyboard _this2 = ::flixel::FlxG_obj::keys;
HXDLIN( 320)		int KeyArray;
HXDLIN( 320)		::String s = HX_("ENTER",f8,a4,74,ee);
HXDLIN( 320)		s = s.toUpperCase();
HXDLIN( 320)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 320)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 320)			KeyArray = (int)-1;
            		}
HXDLIN( 320)		int KeyArray1;
HXDLIN( 320)		::String s1 = HX_("Z",5a,00,00,00);
HXDLIN( 320)		s1 = s1.toUpperCase();
HXDLIN( 320)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 320)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE( 320)			KeyArray1 = (int)-1;
            		}
HXDLIN( 320)		::String s2 = HX_("SPACE",a6,c4,54,ff);
HXDLIN( 320)		s2 = s2.toUpperCase();
HXDLIN( 320)		int KeyArray2;
HXDLIN( 320)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 320)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE( 320)			KeyArray2 = (int)-1;
            		}
HXDLIN( 320)		if (_this2->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray)->init(1,KeyArray1)->init(2,KeyArray2),(int)2)) {
HXLINE( 322)			int _g2 = this->selected;
HXDLIN( 322)			switch((int)(_g2)){
            				case (int)0: {
HXLINE( 325)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN( 325)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 325)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 327)					 ::flixel::FlxState nextState1 =  ::CredState_obj::__alloc( HX_CTX ,null());
HXDLIN( 327)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE( 327)						::flixel::FlxG_obj::game->_requestedState = nextState1;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 329)					this->openSubState( ::ScoreState_obj::__alloc( HX_CTX ,(int)-872415232));
            				}
            				break;
            				case (int)3: {
HXLINE( 331)					 ::flixel::FlxState nextState2 =  ::SettingState_obj::__alloc( HX_CTX ,null());
HXDLIN( 331)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState2)) {
HXLINE( 331)						::flixel::FlxG_obj::game->_requestedState = nextState2;
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 333)					::String URL = this->discordLink;
HXDLIN( 333)					::String prefix = HX_("",00,00,00,00);
HXDLIN( 333)					if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(URL))) {
HXLINE( 333)						prefix = HX_("http://",52,75,cd,5a);
            					}
HXDLIN( 333)					::openfl::_legacy::Lib_obj::getURL( ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,(prefix + URL)),HX_("_blank",95,26,d9,b0));
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,menuHandling,(void))

void MenuState_obj::resetBarFill(){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_340_resetBarFill)
HXLINE( 341)		 ::flixel::FlxSprite _hx_tmp = this->selector;
HXDLIN( 341)		_hx_tmp->set_y(((this->selected * (int)54) + (int)315));
HXLINE( 342)		 ::flixel::FlxSprite _hx_tmp1 = this->selector;
HXDLIN( 342)		_hx_tmp1->set_x(-(this->selector->get_width()));
HXLINE( 343)		::flixel::tweens::FlxTween_obj::tween(this->selector, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)),((Float)0.35), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,resetBarFill,(void))

void MenuState_obj::checkTilemapPos( ::flixel::tile::FlxTilemap t){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_348_checkTilemapPos)
HXDLIN( 348)		this->updatePos(t,HX_("Floor",ac,41,c4,95));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuState_obj,checkTilemapPos,(void))

void MenuState_obj::checkWallPos( ::flixel::tile::FlxTilemap w){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_353_checkWallPos)
HXDLIN( 353)		this->updatePos(w,HX_("Walls",09,7c,4c,58));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuState_obj,checkWallPos,(void))

void MenuState_obj::updatePos( ::flixel::tile::FlxTilemap t,::String type){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_362_updatePos)
HXLINE( 363)		{
HXLINE( 363)			 ::flixel::tile::FlxTilemap _g = t;
HXDLIN( 363)			_g->set_y((_g->y + this->speed));
            		}
HXLINE( 367)		if ((t->y >= ::flixel::FlxG_obj::height)) {
HXLINE( 369)			this->generateTilemap(t,type);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MenuState_obj,updatePos,(void))

void MenuState_obj::generateTilemap( ::flixel::tile::FlxTilemap t,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_374_generateTilemap)
HXLINE( 378)		if ((type == HX_("Walls",09,7c,4c,58))) {
HXLINE( 380)			this->_grpWalls->remove(t,true).StaticCast<  ::flixel::tile::FlxTilemap >();
            		}
HXLINE( 382)		if ((type == HX_("Floor",ac,41,c4,95))) {
HXLINE( 384)			this->_grpTilemaps->remove(t,true).StaticCast<  ::flixel::tile::FlxTilemap >();
            		}
HXLINE( 387)		this->_map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,((HX_("assets/data/chunk",d4,8e,12,69) + ::flixel::FlxG_obj::random->_hx_int((int)2,(int)9,null())) + HX_(".oel",28,63,bc,1e)));
HXLINE( 388)		t = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,type);
HXLINE( 390)		this->scaleUp(t);
HXLINE( 394)		Float tilesOffset = (int)2;
HXLINE( 395)		if ((type == HX_("Walls",09,7c,4c,58))) {
HXLINE( 397)			Float _hx_tmp = Dynamic( this->_grpWalls->members->__get((int)0)).StaticCast<  ::flixel::tile::FlxTilemap >()->y;
HXDLIN( 397)			t->set_y((_hx_tmp - (t->get_height() * tilesOffset)));
HXLINE( 398)			this->_grpWalls->add(t).StaticCast<  ::flixel::tile::FlxTilemap >();
            		}
HXLINE( 400)		if ((type == HX_("Floor",ac,41,c4,95))) {
HXLINE( 402)			Float _hx_tmp1 = Dynamic( this->_grpTilemaps->members->__get((int)0)).StaticCast<  ::flixel::tile::FlxTilemap >()->y;
HXDLIN( 402)			t->set_y((_hx_tmp1 - (t->get_height() * tilesOffset)));
HXLINE( 403)			this->_grpTilemaps->add(t).StaticCast<  ::flixel::tile::FlxTilemap >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MenuState_obj,generateTilemap,(void))


hx::ObjectPtr< MenuState_obj > MenuState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MenuState_obj *__this = (MenuState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

void MenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuState);
	HX_MARK_MEMBER_NAME(mScore,"mScore");
	HX_MARK_MEMBER_NAME(debugInfo,"debugInfo");
	HX_MARK_MEMBER_NAME(currentVersion,"currentVersion");
	HX_MARK_MEMBER_NAME(sprMonster,"sprMonster");
	HX_MARK_MEMBER_NAME(sprMashing,"sprMashing");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(_map,"_map");
	HX_MARK_MEMBER_NAME(_mWalls,"_mWalls");
	HX_MARK_MEMBER_NAME(_mFloors,"_mFloors");
	HX_MARK_MEMBER_NAME(_mWalls2,"_mWalls2");
	HX_MARK_MEMBER_NAME(_mFloors2,"_mFloors2");
	HX_MARK_MEMBER_NAME(_mWalls3,"_mWalls3");
	HX_MARK_MEMBER_NAME(_mFloors3,"_mFloors3");
	HX_MARK_MEMBER_NAME(_grpTilemaps,"_grpTilemaps");
	HX_MARK_MEMBER_NAME(_grpWalls,"_grpWalls");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(_grpMenu,"_grpMenu");
	HX_MARK_MEMBER_NAME(_grpMenuBar,"_grpMenuBar");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(leadItems,"leadItems");
	HX_MARK_MEMBER_NAME(selected,"selected");
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(selMax,"selMax");
	HX_MARK_MEMBER_NAME(mapZoom,"mapZoom");
	HX_MARK_MEMBER_NAME(mapOffsetX,"mapOffsetX");
	HX_MARK_MEMBER_NAME(discordLink,"discordLink");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mScore,"mScore");
	HX_VISIT_MEMBER_NAME(debugInfo,"debugInfo");
	HX_VISIT_MEMBER_NAME(currentVersion,"currentVersion");
	HX_VISIT_MEMBER_NAME(sprMonster,"sprMonster");
	HX_VISIT_MEMBER_NAME(sprMashing,"sprMashing");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(_map,"_map");
	HX_VISIT_MEMBER_NAME(_mWalls,"_mWalls");
	HX_VISIT_MEMBER_NAME(_mFloors,"_mFloors");
	HX_VISIT_MEMBER_NAME(_mWalls2,"_mWalls2");
	HX_VISIT_MEMBER_NAME(_mFloors2,"_mFloors2");
	HX_VISIT_MEMBER_NAME(_mWalls3,"_mWalls3");
	HX_VISIT_MEMBER_NAME(_mFloors3,"_mFloors3");
	HX_VISIT_MEMBER_NAME(_grpTilemaps,"_grpTilemaps");
	HX_VISIT_MEMBER_NAME(_grpWalls,"_grpWalls");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(_grpMenu,"_grpMenu");
	HX_VISIT_MEMBER_NAME(_grpMenuBar,"_grpMenuBar");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(leadItems,"leadItems");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(selMax,"selMax");
	HX_VISIT_MEMBER_NAME(mapZoom,"mapZoom");
	HX_VISIT_MEMBER_NAME(mapOffsetX,"mapOffsetX");
	HX_VISIT_MEMBER_NAME(discordLink,"discordLink");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MenuState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { return hx::Val( _map ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mScore") ) { return hx::Val( mScore ); }
		if (HX_FIELD_EQ(inName,"selMax") ) { return hx::Val( selMax ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_mWalls") ) { return hx::Val( _mWalls ); }
		if (HX_FIELD_EQ(inName,"mapZoom") ) { return hx::Val( mapZoom ); }
		if (HX_FIELD_EQ(inName,"scaleUp") ) { return hx::Val( scaleUp_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_mFloors") ) { return hx::Val( _mFloors ); }
		if (HX_FIELD_EQ(inName,"_mWalls2") ) { return hx::Val( _mWalls2 ); }
		if (HX_FIELD_EQ(inName,"_mWalls3") ) { return hx::Val( _mWalls3 ); }
		if (HX_FIELD_EQ(inName,"_grpMenu") ) { return hx::Val( _grpMenu ); }
		if (HX_FIELD_EQ(inName,"selected") ) { return hx::Val( selected ); }
		if (HX_FIELD_EQ(inName,"selector") ) { return hx::Val( selector ); }
		if (HX_FIELD_EQ(inName,"initText") ) { return hx::Val( initText_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"debugInfo") ) { return hx::Val( debugInfo ); }
		if (HX_FIELD_EQ(inName,"_mFloors2") ) { return hx::Val( _mFloors2 ); }
		if (HX_FIELD_EQ(inName,"_mFloors3") ) { return hx::Val( _mFloors3 ); }
		if (HX_FIELD_EQ(inName,"_grpWalls") ) { return hx::Val( _grpWalls ); }
		if (HX_FIELD_EQ(inName,"menuItems") ) { return hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"leadItems") ) { return hx::Val( leadItems ); }
		if (HX_FIELD_EQ(inName,"updatePos") ) { return hx::Val( updatePos_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sprMonster") ) { return hx::Val( sprMonster ); }
		if (HX_FIELD_EQ(inName,"sprMashing") ) { return hx::Val( sprMashing ); }
		if (HX_FIELD_EQ(inName,"mapOffsetX") ) { return hx::Val( mapOffsetX ); }
		if (HX_FIELD_EQ(inName,"initImages") ) { return hx::Val( initImages_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpMenuBar") ) { return hx::Val( _grpMenuBar ); }
		if (HX_FIELD_EQ(inName,"discordLink") ) { return hx::Val( discordLink ); }
		if (HX_FIELD_EQ(inName,"initTilemap") ) { return hx::Val( initTilemap_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_grpTilemaps") ) { return hx::Val( _grpTilemaps ); }
		if (HX_FIELD_EQ(inName,"menuHandling") ) { return hx::Val( menuHandling_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetBarFill") ) { return hx::Val( resetBarFill_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkWallPos") ) { return hx::Val( checkWallPos_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentVersion") ) { return hx::Val( currentVersion ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"checkTilemapPos") ) { return hx::Val( checkTilemapPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateTilemap") ) { return hx::Val( generateTilemap_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MenuState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { _map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmoLoader >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mScore") ) { mScore=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selMax") ) { selMax=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_mWalls") ) { _mWalls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mapZoom") ) { mapZoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_mFloors") ) { _mFloors=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mWalls2") ) { _mWalls2=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mWalls3") ) { _mWalls3=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_grpMenu") ) { _grpMenu=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"debugInfo") ) { debugInfo=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mFloors2") ) { _mFloors2=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mFloors3") ) { _mFloors3=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_grpWalls") ) { _grpWalls=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leadItems") ) { leadItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sprMonster") ) { sprMonster=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprMashing") ) { sprMashing=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mapOffsetX") ) { mapOffsetX=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpMenuBar") ) { _grpMenuBar=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordLink") ) { discordLink=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_grpTilemaps") ) { _grpTilemaps=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"currentVersion") ) { currentVersion=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("mScore","\xa5","\x37","\xed","\xa0"));
	outFields->push(HX_HCSTRING("debugInfo","\x61","\xdc","\x06","\x29"));
	outFields->push(HX_HCSTRING("currentVersion","\xdf","\x5b","\x86","\x8a"));
	outFields->push(HX_HCSTRING("sprMonster","\x65","\x17","\x8a","\xa9"));
	outFields->push(HX_HCSTRING("sprMashing","\xe4","\x46","\x3e","\xea"));
	outFields->push(HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"));
	outFields->push(HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b"));
	outFields->push(HX_HCSTRING("_mFloors","\xf5","\x1e","\x51","\x64"));
	outFields->push(HX_HCSTRING("_mWalls2","\xb7","\xf5","\xfb","\xd8"));
	outFields->push(HX_HCSTRING("_mFloors2","\x9d","\xf7","\xa9","\x62"));
	outFields->push(HX_HCSTRING("_mWalls3","\xb8","\xf5","\xfb","\xd8"));
	outFields->push(HX_HCSTRING("_mFloors3","\x9e","\xf7","\xa9","\x62"));
	outFields->push(HX_HCSTRING("_grpTilemaps","\x8b","\x1b","\x83","\x9b"));
	outFields->push(HX_HCSTRING("_grpWalls","\x63","\xa9","\xb5","\xef"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("_grpMenu","\xa5","\xad","\x9d","\x39"));
	outFields->push(HX_HCSTRING("_grpMenuBar","\x2e","\x11","\xaf","\xad"));
	outFields->push(HX_HCSTRING("menuItems","\xe1","\x15","\xe5","\x5c"));
	outFields->push(HX_HCSTRING("leadItems","\xc4","\x82","\x4b","\xa1"));
	outFields->push(HX_HCSTRING("selected","\x5b","\x2a","\x6d","\xb1"));
	outFields->push(HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1"));
	outFields->push(HX_HCSTRING("selMax","\x2a","\xe3","\x20","\x6a"));
	outFields->push(HX_HCSTRING("mapZoom","\xcf","\x57","\xf4","\x35"));
	outFields->push(HX_HCSTRING("mapOffsetX","\x29","\xf2","\xf5","\x77"));
	outFields->push(HX_HCSTRING("discordLink","\xc6","\x43","\x7d","\x79"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MenuState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(MenuState_obj,mScore),HX_HCSTRING("mScore","\xa5","\x37","\xed","\xa0")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(MenuState_obj,debugInfo),HX_HCSTRING("debugInfo","\x61","\xdc","\x06","\x29")},
	{hx::fsString,(int)offsetof(MenuState_obj,currentVersion),HX_HCSTRING("currentVersion","\xdf","\x5b","\x86","\x8a")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(MenuState_obj,sprMonster),HX_HCSTRING("sprMonster","\x65","\x17","\x8a","\xa9")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(MenuState_obj,sprMashing),HX_HCSTRING("sprMashing","\xe4","\x46","\x3e","\xea")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(MenuState_obj,bg),HX_HCSTRING("bg","\xc5","\x55","\x00","\x00")},
	{hx::fsObject /*::flixel::addons::editors::ogmo::FlxOgmoLoader*/ ,(int)offsetof(MenuState_obj,_map),HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(MenuState_obj,_mWalls),HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(MenuState_obj,_mFloors),HX_HCSTRING("_mFloors","\xf5","\x1e","\x51","\x64")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(MenuState_obj,_mWalls2),HX_HCSTRING("_mWalls2","\xb7","\xf5","\xfb","\xd8")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(MenuState_obj,_mFloors2),HX_HCSTRING("_mFloors2","\x9d","\xf7","\xa9","\x62")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(MenuState_obj,_mWalls3),HX_HCSTRING("_mWalls3","\xb8","\xf5","\xfb","\xd8")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(MenuState_obj,_mFloors3),HX_HCSTRING("_mFloors3","\x9e","\xf7","\xa9","\x62")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(MenuState_obj,_grpTilemaps),HX_HCSTRING("_grpTilemaps","\x8b","\x1b","\x83","\x9b")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(MenuState_obj,_grpWalls),HX_HCSTRING("_grpWalls","\x63","\xa9","\xb5","\xef")},
	{hx::fsFloat,(int)offsetof(MenuState_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(MenuState_obj,_grpMenu),HX_HCSTRING("_grpMenu","\xa5","\xad","\x9d","\x39")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(MenuState_obj,_grpMenuBar),HX_HCSTRING("_grpMenuBar","\x2e","\x11","\xaf","\xad")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(MenuState_obj,menuItems),HX_HCSTRING("menuItems","\xe1","\x15","\xe5","\x5c")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(MenuState_obj,leadItems),HX_HCSTRING("leadItems","\xc4","\x82","\x4b","\xa1")},
	{hx::fsInt,(int)offsetof(MenuState_obj,selected),HX_HCSTRING("selected","\x5b","\x2a","\x6d","\xb1")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(MenuState_obj,selector),HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1")},
	{hx::fsInt,(int)offsetof(MenuState_obj,selMax),HX_HCSTRING("selMax","\x2a","\xe3","\x20","\x6a")},
	{hx::fsFloat,(int)offsetof(MenuState_obj,mapZoom),HX_HCSTRING("mapZoom","\xcf","\x57","\xf4","\x35")},
	{hx::fsFloat,(int)offsetof(MenuState_obj,mapOffsetX),HX_HCSTRING("mapOffsetX","\x29","\xf2","\xf5","\x77")},
	{hx::fsString,(int)offsetof(MenuState_obj,discordLink),HX_HCSTRING("discordLink","\xc6","\x43","\x7d","\x79")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_HCSTRING("mScore","\xa5","\x37","\xed","\xa0"),
	HX_HCSTRING("debugInfo","\x61","\xdc","\x06","\x29"),
	HX_HCSTRING("currentVersion","\xdf","\x5b","\x86","\x8a"),
	HX_HCSTRING("sprMonster","\x65","\x17","\x8a","\xa9"),
	HX_HCSTRING("sprMashing","\xe4","\x46","\x3e","\xea"),
	HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"),
	HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"),
	HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b"),
	HX_HCSTRING("_mFloors","\xf5","\x1e","\x51","\x64"),
	HX_HCSTRING("_mWalls2","\xb7","\xf5","\xfb","\xd8"),
	HX_HCSTRING("_mFloors2","\x9d","\xf7","\xa9","\x62"),
	HX_HCSTRING("_mWalls3","\xb8","\xf5","\xfb","\xd8"),
	HX_HCSTRING("_mFloors3","\x9e","\xf7","\xa9","\x62"),
	HX_HCSTRING("_grpTilemaps","\x8b","\x1b","\x83","\x9b"),
	HX_HCSTRING("_grpWalls","\x63","\xa9","\xb5","\xef"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("_grpMenu","\xa5","\xad","\x9d","\x39"),
	HX_HCSTRING("_grpMenuBar","\x2e","\x11","\xaf","\xad"),
	HX_HCSTRING("menuItems","\xe1","\x15","\xe5","\x5c"),
	HX_HCSTRING("leadItems","\xc4","\x82","\x4b","\xa1"),
	HX_HCSTRING("selected","\x5b","\x2a","\x6d","\xb1"),
	HX_HCSTRING("selector","\x1f","\x33","\x6d","\xb1"),
	HX_HCSTRING("selMax","\x2a","\xe3","\x20","\x6a"),
	HX_HCSTRING("mapZoom","\xcf","\x57","\xf4","\x35"),
	HX_HCSTRING("mapOffsetX","\x29","\xf2","\xf5","\x77"),
	HX_HCSTRING("discordLink","\xc6","\x43","\x7d","\x79"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("initTilemap","\xfe","\x5e","\xf9","\xfd"),
	HX_HCSTRING("initImages","\xe8","\xab","\xd7","\x02"),
	HX_HCSTRING("initText","\xdd","\xfb","\xb0","\x51"),
	HX_HCSTRING("scaleUp","\x85","\x4f","\x07","\x65"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("menuHandling","\xa4","\x5f","\x6f","\x8d"),
	HX_HCSTRING("resetBarFill","\xe7","\xd7","\xf6","\xf7"),
	HX_HCSTRING("checkTilemapPos","\xee","\x5c","\x65","\x62"),
	HX_HCSTRING("checkWallPos","\xc2","\xb2","\x85","\x81"),
	HX_HCSTRING("updatePos","\x0b","\x3b","\xe2","\x82"),
	HX_HCSTRING("generateTilemap","\x79","\x39","\x49","\x21"),
	::String(null()) };

static void MenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuState_obj::__mClass,"__mClass");
};

#endif

hx::Class MenuState_obj::__mClass;

void MenuState_obj::__register()
{
	hx::Object *dummy = new MenuState_obj;
	MenuState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("MenuState","\xd2","\xbf","\xb6","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MenuState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

