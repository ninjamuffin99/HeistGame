// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Error
#include <io/newgrounds/objects/Error.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_ScoreBoard
#include <io/newgrounds/objects/ScoreBoard.h>
#endif
#ifndef INCLUDED_io_newgrounds_utils_Dispatcher
#include <io/newgrounds/utils/Dispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f137c4d6a266f48_19_new,"NGio","new",0xf9819cd1,"NGio.new","NGio.hx",19,0xcd75a7bf)
HX_LOCAL_STACK_FRAME(_hx_pos_1f137c4d6a266f48_46_onNGLogin,"NGio","onNGLogin",0x33e3de62,"NGio.onNGLogin","NGio.hx",46,0xcd75a7bf)
HX_LOCAL_STACK_FRAME(_hx_pos_1f137c4d6a266f48_58_onNGMedalFetch,"NGio","onNGMedalFetch",0x8d5adb2a,"NGio.onNGMedalFetch","NGio.hx",58,0xcd75a7bf)
HX_LOCAL_STACK_FRAME(_hx_pos_1f137c4d6a266f48_76_onNGBoardsFetch,"NGio","onNGBoardsFetch",0x3d1e8fa6,"NGio.onNGBoardsFetch","NGio.hx",76,0xcd75a7bf)
HX_LOCAL_STACK_FRAME(_hx_pos_1f137c4d6a266f48_100_onNGScoresFetch,"NGio","onNGScoresFetch",0x7b2f4552,"NGio.onNGScoresFetch","NGio.hx",100,0xcd75a7bf)
HX_LOCAL_STACK_FRAME(_hx_pos_1f137c4d6a266f48_17_boot,"NGio","boot",0x50009aa1,"NGio.boot","NGio.hx",17,0xcd75a7bf)

void NGio_obj::__construct(::String api,::String encKey){
            	HX_STACKFRAME(&_hx_pos_1f137c4d6a266f48_19_new)
HXLINE(  21)		::haxe::Log_obj::trace(HX_("connecting to newgrounds",49,1b,2e,55),hx::SourceInfo(HX_("NGio.hx",bf,a7,75,cd),21,HX_("NGio",5f,e0,c4,33),HX_("new",60,d0,53,00)));
HXLINE(  23)		::io::newgrounds::NG_obj::createAndCheckSession(::openfl::_legacy::Lib_obj::get_current()->get_stage(),api);
HXLINE(  24)		::io::newgrounds::NG_obj::core->verbose = true;
HXLINE(  26)		::io::newgrounds::NG_obj::core->initEncryption(encKey,null(),null());
HXLINE(  28)		if (::io::newgrounds::NG_obj::core->attemptingLogin) {
HXLINE(  34)			::io::newgrounds::NG_obj::core->onLogin->add(this->onNGLogin_dyn(),null());
            		}
            		else {
HXLINE(  41)			::io::newgrounds::NG_obj::core->requestLogin(this->onNGLogin_dyn(),null(),null());
            		}
            	}

Dynamic NGio_obj::__CreateEmpty() { return new NGio_obj; }

void *NGio_obj::_hx_vtable = 0;

Dynamic NGio_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NGio_obj > _hx_result = new NGio_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NGio_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x33c4e05f;
}

void NGio_obj::onNGLogin(){
            	HX_STACKFRAME(&_hx_pos_1f137c4d6a266f48_46_onNGLogin)
HXLINE(  47)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  47)		::String _hx_tmp1 = (HX_("logged in! user:",ed,2d,e5,40) + ( (::String)(::io::newgrounds::NG_obj::core->get_user()->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
HXDLIN(  47)		_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("NGio.hx",bf,a7,75,cd),47,HX_("NGio",5f,e0,c4,33),HX_("onNGLogin",31,a7,5b,25)));
HXLINE(  48)		::NGio_obj::isLoggedIn = true;
HXLINE(  50)		::io::newgrounds::NG_obj::core->requestMedals(this->onNGMedalFetch_dyn(),null());
HXLINE(  53)		::io::newgrounds::NG_obj::core->requestScoreBoards(this->onNGBoardsFetch_dyn(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(NGio_obj,onNGLogin,(void))

void NGio_obj::onNGMedalFetch(){
            	HX_STACKFRAME(&_hx_pos_1f137c4d6a266f48_58_onNGMedalFetch)
            	}


HX_DEFINE_DYNAMIC_FUNC0(NGio_obj,onNGMedalFetch,(void))

void NGio_obj::onNGBoardsFetch(){
            	HX_STACKFRAME(&_hx_pos_1f137c4d6a266f48_76_onNGBoardsFetch)
HXLINE(  85)		 ::io::newgrounds::objects::ScoreBoard board = ::io::newgrounds::NG_obj::core->scoreBoards->get((int)8004).StaticCast<  ::io::newgrounds::objects::ScoreBoard >();
HXLINE(  93)		board->onUpdate->add(this->onNGScoresFetch_dyn(),null());
HXLINE(  94)		board->requestScores((int)20,null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(NGio_obj,onNGBoardsFetch,(void))

void NGio_obj::onNGScoresFetch(){
            	HX_STACKFRAME(&_hx_pos_1f137c4d6a266f48_100_onNGScoresFetch)
HXDLIN( 100)		int _g = (int)0;
HXDLIN( 100)		::Array< ::Dynamic> _g1 = ::io::newgrounds::NG_obj::core->scoreBoards->get((int)8004).StaticCast<  ::io::newgrounds::objects::ScoreBoard >()->scores;
HXDLIN( 100)		while((_g < _g1->length)){
HXDLIN( 100)			 ::Dynamic score = _g1->__get(_g);
HXDLIN( 100)			_g = (_g + (int)1);
HXLINE( 102)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 102)			_hx_tmp((((HX_("score loaded user:",c2,a6,2d,48) + ( (::String)( ::Dynamic(score->__Field(HX_("user",4b,92,ad,4d),hx::paccDynamic))->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) )) + HX_(", score:",1c,ea,c5,4c)) + ( (::String)(score->__Field(HX_("formatted_value",ae,16,f4,5b),hx::paccDynamic)) )),hx::SourceInfo(HX_("NGio.hx",bf,a7,75,cd),102,HX_("NGio",5f,e0,c4,33),HX_("onNGScoresFetch",61,13,88,c4)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NGio_obj,onNGScoresFetch,(void))

bool NGio_obj::isLoggedIn;


hx::ObjectPtr< NGio_obj > NGio_obj::__new(::String api,::String encKey) {
	hx::ObjectPtr< NGio_obj > __this = new NGio_obj();
	__this->__construct(api,encKey);
	return __this;
}

hx::ObjectPtr< NGio_obj > NGio_obj::__alloc(hx::Ctx *_hx_ctx,::String api,::String encKey) {
	NGio_obj *__this = (NGio_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NGio_obj), false, "NGio"));
	*(void **)__this = NGio_obj::_hx_vtable;
	__this->__construct(api,encKey);
	return __this;
}

NGio_obj::NGio_obj()
{
}

hx::Val NGio_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"onNGLogin") ) { return hx::Val( onNGLogin_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onNGMedalFetch") ) { return hx::Val( onNGMedalFetch_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onNGBoardsFetch") ) { return hx::Val( onNGBoardsFetch_dyn() ); }
		if (HX_FIELD_EQ(inName,"onNGScoresFetch") ) { return hx::Val( onNGScoresFetch_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NGio_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"isLoggedIn") ) { outValue = ( isLoggedIn ); return true; }
	}
	return false;
}

bool NGio_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"isLoggedIn") ) { isLoggedIn=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *NGio_obj_sMemberStorageInfo = 0;
static hx::StaticInfo NGio_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &NGio_obj::isLoggedIn,HX_HCSTRING("isLoggedIn","\x11","\x4d","\xdc","\x63")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NGio_obj_sMemberFields[] = {
	HX_HCSTRING("onNGLogin","\x31","\xa7","\x5b","\x25"),
	HX_HCSTRING("onNGMedalFetch","\xfb","\xc3","\x8d","\x10"),
	HX_HCSTRING("onNGBoardsFetch","\xb5","\x5d","\x77","\x86"),
	HX_HCSTRING("onNGScoresFetch","\x61","\x13","\x88","\xc4"),
	::String(null()) };

static void NGio_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NGio_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NGio_obj::isLoggedIn,"isLoggedIn");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NGio_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NGio_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NGio_obj::isLoggedIn,"isLoggedIn");
};

#endif

hx::Class NGio_obj::__mClass;

static ::String NGio_obj_sStaticFields[] = {
	HX_HCSTRING("isLoggedIn","\x11","\x4d","\xdc","\x63"),
	::String(null())
};

void NGio_obj::__register()
{
	hx::Object *dummy = new NGio_obj;
	NGio_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("NGio","\x5f","\xe0","\xc4","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NGio_obj::__GetStatic;
	__mClass->mSetStaticField = &NGio_obj::__SetStatic;
	__mClass->mMarkFunc = NGio_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NGio_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NGio_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NGio_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NGio_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NGio_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NGio_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NGio_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1f137c4d6a266f48_17_boot)
HXDLIN(  17)		isLoggedIn = false;
            	}
}

