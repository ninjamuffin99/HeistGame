// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_JNIMethod
#include <openfl/_legacy/utils/JNIMethod.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_210e948f216213ed_290_new,"openfl._legacy.utils.JNIMethod","new",0x581cb357,"openfl._legacy.utils.JNIMethod.new","openfl/_legacy/utils/JNI.hx",290,0x5c37961d)
HX_LOCAL_STACK_FRAME(_hx_pos_210e948f216213ed_294_callMember,"openfl._legacy.utils.JNIMethod","callMember",0x99893381,"openfl._legacy.utils.JNIMethod.callMember","openfl/_legacy/utils/JNI.hx",294,0x5c37961d)
HX_LOCAL_STACK_FRAME(_hx_pos_210e948f216213ed_304_callStatic,"openfl._legacy.utils.JNIMethod","callStatic",0x9acf2dd5,"openfl._legacy.utils.JNIMethod.callStatic","openfl/_legacy/utils/JNI.hx",304,0x5c37961d)
HX_LOCAL_STACK_FRAME(_hx_pos_210e948f216213ed_311_getMemberMethod,"openfl._legacy.utils.JNIMethod","getMemberMethod",0x0bfddc08,"openfl._legacy.utils.JNIMethod.getMemberMethod","openfl/_legacy/utils/JNI.hx",311,0x5c37961d)
HX_LOCAL_STACK_FRAME(_hx_pos_210e948f216213ed_326_getStaticMethod,"openfl._legacy.utils.JNIMethod","getStaticMethod",0x6a064d5c,"openfl._legacy.utils.JNIMethod.getStaticMethod","openfl/_legacy/utils/JNI.hx",326,0x5c37961d)
HX_LOCAL_STACK_FRAME(_hx_pos_210e948f216213ed_346_boot,"openfl._legacy.utils.JNIMethod","boot",0xb919395b,"openfl._legacy.utils.JNIMethod.boot","openfl/_legacy/utils/JNI.hx",346,0x5c37961d)
HX_LOCAL_STACK_FRAME(_hx_pos_210e948f216213ed_347_boot,"openfl._legacy.utils.JNIMethod","boot",0xb919395b,"openfl._legacy.utils.JNIMethod.boot","openfl/_legacy/utils/JNI.hx",347,0x5c37961d)
namespace openfl{
namespace _legacy{
namespace utils{

void JNIMethod_obj::__construct( ::Dynamic method){
            	HX_STACKFRAME(&_hx_pos_210e948f216213ed_290_new)
HXDLIN( 290)		this->method = method;
            	}

Dynamic JNIMethod_obj::__CreateEmpty() { return new JNIMethod_obj; }

void *JNIMethod_obj::_hx_vtable = 0;

Dynamic JNIMethod_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< JNIMethod_obj > _hx_result = new JNIMethod_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool JNIMethod_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x15a909e9;
}

 ::Dynamic JNIMethod_obj::callMember(::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_210e948f216213ed_294_callMember)
HXLINE( 296)		 ::Dynamic jobject = args->shift();
HXLINE( 297)		return ::openfl::_legacy::utils::JNIMethod_obj::lime_jni_call_member(this->method,jobject,args);
            	}


HX_DEFINE_DYNAMIC_FUNC1(JNIMethod_obj,callMember,return )

 ::Dynamic JNIMethod_obj::callStatic(::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_210e948f216213ed_304_callStatic)
HXDLIN( 304)		return ::openfl::_legacy::utils::JNIMethod_obj::lime_jni_call_static(this->method,args);
            	}


HX_DEFINE_DYNAMIC_FUNC1(JNIMethod_obj,callStatic,return )

 ::Dynamic JNIMethod_obj::getMemberMethod(bool useArray){
            	HX_STACKFRAME(&_hx_pos_210e948f216213ed_311_getMemberMethod)
HXDLIN( 311)		if (useArray) {
HXLINE( 313)			return this->callMember_dyn();
            		}
            		else {
HXLINE( 317)			return ::Reflect_obj::makeVarArgs(this->callMember_dyn());
            		}
HXLINE( 311)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(JNIMethod_obj,getMemberMethod,return )

 ::Dynamic JNIMethod_obj::getStaticMethod(bool useArray){
            	HX_STACKFRAME(&_hx_pos_210e948f216213ed_326_getStaticMethod)
HXDLIN( 326)		if (useArray) {
HXLINE( 328)			return this->callStatic_dyn();
            		}
            		else {
HXLINE( 332)			return ::Reflect_obj::makeVarArgs(this->callStatic_dyn());
            		}
HXLINE( 326)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(JNIMethod_obj,getStaticMethod,return )

 ::Dynamic JNIMethod_obj::lime_jni_call_member;

 ::Dynamic JNIMethod_obj::lime_jni_call_static;


hx::ObjectPtr< JNIMethod_obj > JNIMethod_obj::__new( ::Dynamic method) {
	hx::ObjectPtr< JNIMethod_obj > __this = new JNIMethod_obj();
	__this->__construct(method);
	return __this;
}

hx::ObjectPtr< JNIMethod_obj > JNIMethod_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic method) {
	JNIMethod_obj *__this = (JNIMethod_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(JNIMethod_obj), true, "openfl._legacy.utils.JNIMethod"));
	*(void **)__this = JNIMethod_obj::_hx_vtable;
	__this->__construct(method);
	return __this;
}

JNIMethod_obj::JNIMethod_obj()
{
}

void JNIMethod_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(JNIMethod);
	HX_MARK_MEMBER_NAME(method,"method");
	HX_MARK_END_CLASS();
}

void JNIMethod_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(method,"method");
}

hx::Val JNIMethod_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { return hx::Val( method ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"callMember") ) { return hx::Val( callMember_dyn() ); }
		if (HX_FIELD_EQ(inName,"callStatic") ) { return hx::Val( callStatic_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getMemberMethod") ) { return hx::Val( getMemberMethod_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStaticMethod") ) { return hx::Val( getStaticMethod_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool JNIMethod_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"lime_jni_call_member") ) { outValue = ( lime_jni_call_member ); return true; }
		if (HX_FIELD_EQ(inName,"lime_jni_call_static") ) { outValue = ( lime_jni_call_static ); return true; }
	}
	return false;
}

hx::Val JNIMethod_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { method=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool JNIMethod_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"lime_jni_call_member") ) { lime_jni_call_member=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"lime_jni_call_static") ) { lime_jni_call_static=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void JNIMethod_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo JNIMethod_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(JNIMethod_obj,method),HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo JNIMethod_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &JNIMethod_obj::lime_jni_call_member,HX_HCSTRING("lime_jni_call_member","\x57","\xff","\x9f","\x4b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &JNIMethod_obj::lime_jni_call_static,HX_HCSTRING("lime_jni_call_static","\xab","\xf9","\xe5","\x4c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String JNIMethod_obj_sMemberFields[] = {
	HX_HCSTRING("method","\xe1","\xf6","\x5a","\x09"),
	HX_HCSTRING("callMember","\x98","\xb9","\xe5","\x2f"),
	HX_HCSTRING("callStatic","\xec","\xb3","\x2b","\x31"),
	HX_HCSTRING("getMemberMethod","\x91","\xe2","\xb0","\xec"),
	HX_HCSTRING("getStaticMethod","\xe5","\x53","\xb9","\x4a"),
	::String(null()) };

static void JNIMethod_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(JNIMethod_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(JNIMethod_obj::lime_jni_call_member,"lime_jni_call_member");
	HX_MARK_MEMBER_NAME(JNIMethod_obj::lime_jni_call_static,"lime_jni_call_static");
};

#ifdef HXCPP_VISIT_ALLOCS
static void JNIMethod_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(JNIMethod_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(JNIMethod_obj::lime_jni_call_member,"lime_jni_call_member");
	HX_VISIT_MEMBER_NAME(JNIMethod_obj::lime_jni_call_static,"lime_jni_call_static");
};

#endif

hx::Class JNIMethod_obj::__mClass;

static ::String JNIMethod_obj_sStaticFields[] = {
	HX_HCSTRING("lime_jni_call_member","\x57","\xff","\x9f","\x4b"),
	HX_HCSTRING("lime_jni_call_static","\xab","\xf9","\xe5","\x4c"),
	::String(null())
};

void JNIMethod_obj::__register()
{
	hx::Object *dummy = new JNIMethod_obj;
	JNIMethod_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.utils.JNIMethod","\xe5","\xbb","\x24","\x8e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &JNIMethod_obj::__GetStatic;
	__mClass->mSetStaticField = &JNIMethod_obj::__SetStatic;
	__mClass->mMarkFunc = JNIMethod_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(JNIMethod_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(JNIMethod_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< JNIMethod_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = JNIMethod_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JNIMethod_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JNIMethod_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void JNIMethod_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_210e948f216213ed_346_boot)
HXDLIN( 346)		lime_jni_call_member = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_jni_call_member",b5,b5,b2,8a),(int)3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_210e948f216213ed_347_boot)
HXDLIN( 347)		lime_jni_call_static = ::openfl::_legacy::Lib_obj::load(HX_("lime-legacy",c1,7f,b9,87),HX_("lime_legacy_jni_call_static",09,b0,f8,8b),(int)2);
            	}
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace utils
