// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_Timer
#include <openfl/_legacy/utils/Timer.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f9700858efa8d51d_21_new,"openfl._legacy.utils.Timer","new",0x936f5b36,"openfl._legacy.utils.Timer.new","openfl/_legacy/utils/Timer.hx",21,0x3ee24e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_f9700858efa8d51d_39_reset,"openfl._legacy.utils.Timer","reset",0x1ffcb625,"openfl._legacy.utils.Timer.reset","openfl/_legacy/utils/Timer.hx",39,0x3ee24e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_f9700858efa8d51d_54_start,"openfl._legacy.utils.Timer","start",0xbd3fe0b8,"openfl._legacy.utils.Timer.start","openfl/_legacy/utils/Timer.hx",54,0x3ee24e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_f9700858efa8d51d_65_stop,"openfl._legacy.utils.Timer","stop",0x7159e06c,"openfl._legacy.utils.Timer.stop","openfl/_legacy/utils/Timer.hx",65,0x3ee24e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_f9700858efa8d51d_88_get_delay,"openfl._legacy.utils.Timer","get_delay",0xc9208330,"openfl._legacy.utils.Timer.get_delay","openfl/_legacy/utils/Timer.hx",88,0x3ee24e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_f9700858efa8d51d_93_set_delay,"openfl._legacy.utils.Timer","set_delay",0xac716f3c,"openfl._legacy.utils.Timer.set_delay","openfl/_legacy/utils/Timer.hx",93,0x3ee24e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_f9700858efa8d51d_116_timer_onTimer,"openfl._legacy.utils.Timer","timer_onTimer",0x6117f6c2,"openfl._legacy.utils.Timer.timer_onTimer","openfl/_legacy/utils/Timer.hx",116,0x3ee24e7d)
namespace openfl{
namespace _legacy{
namespace utils{

void Timer_obj::__construct(Float delay,hx::Null< int >  __o_repeatCount){
int repeatCount = __o_repeatCount.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f9700858efa8d51d_21_new)
HXLINE(  23)		bool _hx_tmp;
HXDLIN(  23)		if (!(::Math_obj::isNaN(delay))) {
HXLINE(  23)			_hx_tmp = (delay < (int)0);
            		}
            		else {
HXLINE(  23)			_hx_tmp = true;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  25)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("The delay specified is negative or not a finite number",42,5b,8b,e3),null()));
            		}
HXLINE(  29)		super::__construct(null());
HXLINE(  31)		this->_hx___delay = delay;
HXLINE(  32)		this->repeatCount = repeatCount;
HXLINE(  33)		this->currentCount = (int)0;
HXLINE(  34)		this->running = false;
            	}

Dynamic Timer_obj::__CreateEmpty() { return new Timer_obj; }

void *Timer_obj::_hx_vtable = 0;

Dynamic Timer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Timer_obj > _hx_result = new Timer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Timer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x023dcd64) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x023dcd64;
	} else {
		return inClassId==(int)0x25b00754;
	}
}

void Timer_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_f9700858efa8d51d_39_reset)
HXLINE(  41)		if (this->running) {
HXLINE(  43)			this->stop();
            		}
HXLINE(  47)		this->currentCount = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,reset,(void))

void Timer_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_f9700858efa8d51d_54_start)
HXDLIN(  54)		if (!(this->running)) {
HXLINE(  56)			this->running = true;
HXLINE(  57)			this->_hx___timer =  ::haxe::Timer_obj::__alloc( HX_CTX ,this->_hx___delay);
HXLINE(  58)			this->_hx___timer->run = this->timer_onTimer_dyn();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,start,(void))

void Timer_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_f9700858efa8d51d_65_stop)
HXLINE(  67)		this->running = false;
HXLINE(  69)		if (hx::IsNotNull( this->_hx___timer )) {
HXLINE(  71)			this->_hx___timer->stop();
HXLINE(  72)			this->_hx___timer = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,stop,(void))

Float Timer_obj::get_delay(){
            	HX_STACKFRAME(&_hx_pos_f9700858efa8d51d_88_get_delay)
HXDLIN(  88)		return this->_hx___delay;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,get_delay,return )

Float Timer_obj::set_delay(Float value){
            	HX_STACKFRAME(&_hx_pos_f9700858efa8d51d_93_set_delay)
HXLINE(  95)		this->_hx___delay = value;
HXLINE(  97)		if (this->running) {
HXLINE(  99)			this->stop();
HXLINE( 100)			this->start();
            		}
HXLINE( 104)		return this->_hx___delay;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Timer_obj,set_delay,return )

void Timer_obj::timer_onTimer(){
            	HX_GC_STACKFRAME(&_hx_pos_f9700858efa8d51d_116_timer_onTimer)
HXLINE( 118)		this->currentCount++;
HXLINE( 120)		bool _hx_tmp;
HXDLIN( 120)		if ((this->repeatCount > (int)0)) {
HXLINE( 120)			_hx_tmp = (this->currentCount >= this->repeatCount);
            		}
            		else {
HXLINE( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 122)			this->stop();
HXLINE( 123)			this->dispatchEvent( ::openfl::events::TimerEvent_obj::__alloc( HX_CTX ,HX_("timer",c5,bf,35,10),null(),null()));
HXLINE( 124)			this->dispatchEvent( ::openfl::events::TimerEvent_obj::__alloc( HX_CTX ,HX_("timerComplete",9e,49,cc,97),null(),null()));
            		}
            		else {
HXLINE( 128)			this->dispatchEvent( ::openfl::events::TimerEvent_obj::__alloc( HX_CTX ,HX_("timer",c5,bf,35,10),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,timer_onTimer,(void))


hx::ObjectPtr< Timer_obj > Timer_obj::__new(Float delay,hx::Null< int >  __o_repeatCount) {
	hx::ObjectPtr< Timer_obj > __this = new Timer_obj();
	__this->__construct(delay,__o_repeatCount);
	return __this;
}

hx::ObjectPtr< Timer_obj > Timer_obj::__alloc(hx::Ctx *_hx_ctx,Float delay,hx::Null< int >  __o_repeatCount) {
	Timer_obj *__this = (Timer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Timer_obj), true, "openfl._legacy.utils.Timer"));
	*(void **)__this = Timer_obj::_hx_vtable;
	__this->__construct(delay,__o_repeatCount);
	return __this;
}

Timer_obj::Timer_obj()
{
}

void Timer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Timer);
	HX_MARK_MEMBER_NAME(currentCount,"currentCount");
	HX_MARK_MEMBER_NAME(repeatCount,"repeatCount");
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_MEMBER_NAME(_hx___delay,"__delay");
	HX_MARK_MEMBER_NAME(_hx___timer,"__timer");
	 ::openfl::_legacy::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Timer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentCount,"currentCount");
	HX_VISIT_MEMBER_NAME(repeatCount,"repeatCount");
	HX_VISIT_MEMBER_NAME(running,"running");
	HX_VISIT_MEMBER_NAME(_hx___delay,"__delay");
	HX_VISIT_MEMBER_NAME(_hx___timer,"__timer");
	 ::openfl::_legacy::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Timer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_delay() ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { return hx::Val( running ); }
		if (HX_FIELD_EQ(inName,"__delay") ) { return hx::Val( _hx___delay ); }
		if (HX_FIELD_EQ(inName,"__timer") ) { return hx::Val( _hx___timer ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_delay") ) { return hx::Val( get_delay_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_delay") ) { return hx::Val( set_delay_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"repeatCount") ) { return hx::Val( repeatCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentCount") ) { return hx::Val( currentCount ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"timer_onTimer") ) { return hx::Val( timer_onTimer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Timer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_delay(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__delay") ) { _hx___delay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__timer") ) { _hx___timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"repeatCount") ) { repeatCount=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentCount") ) { currentCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Timer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentCount","\xd6","\x29","\x6f","\x91"));
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("repeatCount","\x74","\x93","\x8a","\x1b"));
	outFields->push(HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"));
	outFields->push(HX_HCSTRING("__delay","\x63","\x30","\x85","\x41"));
	outFields->push(HX_HCSTRING("__timer","\xa5","\x18","\x94","\x7a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Timer_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Timer_obj,currentCount),HX_HCSTRING("currentCount","\xd6","\x29","\x6f","\x91")},
	{hx::fsInt,(int)offsetof(Timer_obj,repeatCount),HX_HCSTRING("repeatCount","\x74","\x93","\x8a","\x1b")},
	{hx::fsBool,(int)offsetof(Timer_obj,running),HX_HCSTRING("running","\xff","\x6d","\x69","\xeb")},
	{hx::fsFloat,(int)offsetof(Timer_obj,_hx___delay),HX_HCSTRING("__delay","\x63","\x30","\x85","\x41")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(Timer_obj,_hx___timer),HX_HCSTRING("__timer","\xa5","\x18","\x94","\x7a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Timer_obj_sStaticStorageInfo = 0;
#endif

static ::String Timer_obj_sMemberFields[] = {
	HX_HCSTRING("currentCount","\xd6","\x29","\x6f","\x91"),
	HX_HCSTRING("repeatCount","\x74","\x93","\x8a","\x1b"),
	HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"),
	HX_HCSTRING("__delay","\x63","\x30","\x85","\x41"),
	HX_HCSTRING("__timer","\xa5","\x18","\x94","\x7a"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("get_delay","\xda","\x33","\xd0","\x1a"),
	HX_HCSTRING("set_delay","\xe6","\x1f","\x21","\xfe"),
	HX_HCSTRING("timer_onTimer","\x6c","\x44","\x7e","\x1e"),
	::String(null()) };

static void Timer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Timer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Timer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Timer_obj::__mClass,"__mClass");
};

#endif

hx::Class Timer_obj::__mClass;

void Timer_obj::__register()
{
	hx::Object *dummy = new Timer_obj;
	Timer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._legacy.utils.Timer","\x44","\x48","\xb0","\xdb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Timer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Timer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Timer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Timer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Timer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Timer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _legacy
} // end namespace utils
