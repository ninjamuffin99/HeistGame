// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_CredState
#include <CredState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouch
#include <flixel/input/touch/FlxTouch.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouchManager
#include <flixel/input/touch/FlxTouchManager.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3ae4f6cada1a0354_13_new,"CredState","new",0x35d3a0b5,"CredState.new","CredState.hx",13,0x14e7ac5b)
static const ::String _hx_array_data_28862243_1[] = {
	HX_("Programming:",21,d7,b0,05),HX_("ninja_muffin99 (@ninja_muffin99)",31,ee,4a,2a),HX_("BrandyBuizel (@BrandyBuizel)",51,51,80,a1),HX_("",00,00,00,00),HX_("Art:",97,c4,4d,2b),HX_("Digimin (@deegeemin)",87,28,52,9c),HX_("BrandyBuizel (same guy)",13,81,cd,40),HX_("",00,00,00,00),HX_("Music: Silverline by tripledigit on Newgrounds",e7,a8,bc,54),HX_("",00,00,00,00),HX_("Moans from the Mimi Soundpack 1 by Gia F. Simone: https://giafsimone.itch.io/mimimoansoundpack1",7b,5a,08,9d),HX_("",00,00,00,00),HX_("Misc. sounds found/made/idk by PhantomArcade",53,99,71,26),HX_("",00,00,00,00),HX_("Preloader hunk: Phantom \"lil D thick bitch\" Arcade",9b,40,8a,26),HX_("",00,00,00,00),HX_("Made with HaxeFlixel, in like a idk a week or two shit man",40,c9,8e,9b),HX_("",00,00,00,00),HX_("Github Source: https://github.com/ninjamuffin99/MonsterMashing",83,0d,44,7d),HX_("",00,00,00,00),HX_("For Strawberry Jam 2 on Itch.io: https://itch.io/jam/strawberry-jam-2",4b,c5,bb,a5),HX_("",00,00,00,00),HX_("If you are reading this Tom Fulp i lov u",30,5c,55,ee),HX_("In loving memory of EiGiBeast",b9,09,c2,4d),HX_("",00,00,00,00),HX_("Newgrounds.hx library made by Geokureli and is available on Github:",34,53,30,5b),HX_("https://github.com/Geokureli/Newgrounds.hx",64,21,fb,98),HX_("",00,00,00,00),HX_("Community Creds:",4c,cf,a1,1d),HX_("Hall of Shame suggested by BurstAppendix",9b,32,b2,c9),HX_("Total Score tracker suggested by Cyberdevil",b9,d9,0f,b7),HX_("New Logo created by RGPAnims",43,e8,46,41),HX_("",00,00,00,00),HX_("",00,00,00,00),HX_("Press Z to go back",5d,98,39,81),
};
HX_LOCAL_STACK_FRAME(_hx_pos_3ae4f6cada1a0354_18_create,"CredState","create",0x3480b9c7,"CredState.create","CredState.hx",18,0x14e7ac5b)
HX_LOCAL_STACK_FRAME(_hx_pos_3ae4f6cada1a0354_98_update,"CredState","update",0x3f76d8d4,"CredState.update","CredState.hx",98,0x14e7ac5b)
HX_LOCAL_STACK_FRAME(_hx_pos_3ae4f6cada1a0354_103_mobileShit,"CredState","mobileShit",0xda08958d,"CredState.mobileShit","CredState.hx",103,0x14e7ac5b)

void CredState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_3ae4f6cada1a0354_13_new)
HXLINE(  48)		this->credsArray = ::Array_obj< ::String >::fromData( _hx_array_data_28862243_1,35);
HXLINE(  13)		super::__construct(MaxSize);
            	}

Dynamic CredState_obj::__CreateEmpty() { return new CredState_obj; }

void *CredState_obj::_hx_vtable = 0;

Dynamic CredState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CredState_obj > _hx_result = new CredState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CredState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x28862243 || inClassId==(int)0x3634c52c;
	}
}

void CredState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_3ae4f6cada1a0354_18_create)
HXLINE(  22)		this->creds =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)24,(int)24,(::flixel::FlxG_obj::width - (int)24),HX_("",00,00,00,00),(int)16,null());
HXLINE(  23)		this->add(this->creds);
HXLINE(  25)		{
HXLINE(  25)			int _g1 = (int)0;
HXDLIN(  25)			int _g = this->credsArray->length;
HXDLIN(  25)			while((_g1 < _g)){
HXLINE(  25)				_g1 = (_g1 + (int)1);
HXDLIN(  25)				int i = (_g1 - (int)1);
HXLINE(  27)				{
HXLINE(  27)					 ::flixel::text::FlxText _g2 = this->creds;
HXDLIN(  27)					::String _g21 = _g2->text;
HXDLIN(  27)					_g2->set_text((_g21 + (this->credsArray->__get(i) + HX_("\n",0a,00,00,00))));
            				}
            			}
            		}
HXLINE(  44)		this->super::create();
            	}


void CredState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3ae4f6cada1a0354_98_update)
HXDLIN(  98)		this->super::update(elapsed);
            	}


void CredState_obj::mobileShit(){
            	HX_GC_STACKFRAME(&_hx_pos_3ae4f6cada1a0354_103_mobileShit)
HXDLIN( 103)		int _g = (int)0;
HXDLIN( 103)		::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::touches->list;
HXDLIN( 103)		while((_g < _g1->length)){
HXDLIN( 103)			 ::flixel::input::touch::FlxTouch touch = _g1->__get(_g).StaticCast<  ::flixel::input::touch::FlxTouch >();
HXDLIN( 103)			_g = (_g + (int)1);
HXLINE( 105)			if ((touch->input->current == (int)2)) {
HXLINE( 107)				 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 107)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 107)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CredState_obj,mobileShit,(void))


hx::ObjectPtr< CredState_obj > CredState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< CredState_obj > __this = new CredState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< CredState_obj > CredState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	CredState_obj *__this = (CredState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CredState_obj), true, "CredState"));
	*(void **)__this = CredState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

CredState_obj::CredState_obj()
{
}

void CredState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CredState);
	HX_MARK_MEMBER_NAME(creds,"creds");
	HX_MARK_MEMBER_NAME(credsArray,"credsArray");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CredState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(creds,"creds");
	HX_VISIT_MEMBER_NAME(credsArray,"credsArray");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CredState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"creds") ) { return hx::Val( creds ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"credsArray") ) { return hx::Val( credsArray ); }
		if (HX_FIELD_EQ(inName,"mobileShit") ) { return hx::Val( mobileShit_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CredState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"creds") ) { creds=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"credsArray") ) { credsArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CredState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("creds","\xe5","\xbb","\x52","\x4c"));
	outFields->push(HX_HCSTRING("credsArray","\x74","\xe3","\x5d","\xcf"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CredState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(CredState_obj,creds),HX_HCSTRING("creds","\xe5","\xbb","\x52","\x4c")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(CredState_obj,credsArray),HX_HCSTRING("credsArray","\x74","\xe3","\x5d","\xcf")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CredState_obj_sStaticStorageInfo = 0;
#endif

static ::String CredState_obj_sMemberFields[] = {
	HX_HCSTRING("creds","\xe5","\xbb","\x52","\x4c"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("credsArray","\x74","\xe3","\x5d","\xcf"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("mobileShit","\x42","\x81","\x2e","\xd7"),
	::String(null()) };

static void CredState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CredState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CredState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CredState_obj::__mClass,"__mClass");
};

#endif

hx::Class CredState_obj::__mClass;

void CredState_obj::__register()
{
	hx::Object *dummy = new CredState_obj;
	CredState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("CredState","\x43","\x22","\x86","\x28");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CredState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CredState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CredState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CredState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CredState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CredState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

