// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTextField
#include <flixel/addons/text/FlxTextField.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextFormat
#include <openfl/_legacy/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09f4102717a20269_28_new,"flixel.addons.text.FlxTextField","new",0x53a23905,"flixel.addons.text.FlxTextField.new","flixel/addons/text/FlxTextField.hx",28,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_44_destroy,"flixel.addons.text.FlxTextField","destroy",0xe4464c1f,"flixel.addons.text.FlxTextField.destroy","flixel/addons/text/FlxTextField.hx",44,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_50_stamp,"flixel.addons.text.FlxTextField","stamp",0x16410be8,"flixel.addons.text.FlxTextField.stamp","flixel/addons/text/FlxTextField.hx",50,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_57_pixelsOverlapPoint,"flixel.addons.text.FlxTextField","pixelsOverlapPoint",0x67759b11,"flixel.addons.text.FlxTextField.pixelsOverlapPoint","flixel/addons/text/FlxTextField.hx",57,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_63_isSimpleRender,"flixel.addons.text.FlxTextField","isSimpleRender",0x5f8733ad,"flixel.addons.text.FlxTextField.isSimpleRender","flixel/addons/text/FlxTextField.hx",63,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_67_get_pixels,"flixel.addons.text.FlxTextField","get_pixels",0xab8384f1,"flixel.addons.text.FlxTextField.get_pixels","flixel/addons/text/FlxTextField.hx",67,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_75_set_pixels,"flixel.addons.text.FlxTextField","set_pixels",0xaf012365,"flixel.addons.text.FlxTextField.set_pixels","flixel/addons/text/FlxTextField.hx",75,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_79_set_alpha,"flixel.addons.text.FlxTextField","set_alpha",0x8ff2e226,"flixel.addons.text.FlxTextField.set_alpha","flixel/addons/text/FlxTextField.hx",79,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_86_set_height,"flixel.addons.text.FlxTextField","set_height",0x24a33c1f,"flixel.addons.text.FlxTextField.set_height","flixel/addons/text/FlxTextField.hx",86,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_94_set_visible,"flixel.addons.text.FlxTextField","set_visible",0x8d1af53a,"flixel.addons.text.FlxTextField.set_visible","flixel/addons/text/FlxTextField.hx",94,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_100_kill,"flixel.addons.text.FlxTextField","kill",0xd8570759,"flixel.addons.text.FlxTextField.kill","flixel/addons/text/FlxTextField.hx",100,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_106_revive,"flixel.addons.text.FlxTextField","revive",0x6729c6d0,"flixel.addons.text.FlxTextField.revive","flixel/addons/text/FlxTextField.hx",106,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_116_draw,"flixel.addons.text.FlxTextField","draw",0xd3bd53bf,"flixel.addons.text.FlxTextField.draw","flixel/addons/text/FlxTextField.hx",116,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_137_get_camera,"flixel.addons.text.FlxTextField","get_camera",0xd665dc69,"flixel.addons.text.FlxTextField.get_camera","flixel/addons/text/FlxTextField.hx",137,0xf592f94a)
HX_LOCAL_STACK_FRAME(_hx_pos_09f4102717a20269_142_set_camera,"flixel.addons.text.FlxTextField","set_camera",0xd9e37add,"flixel.addons.text.FlxTextField.set_camera","flixel/addons/text/FlxTextField.hx",142,0xf592f94a)
namespace flixel{
namespace addons{
namespace text{

void FlxTextField_obj::__construct(Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont){
int Size = __o_Size.Default(8);
bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_28_new)
HXLINE(  29)		super::__construct(X,Y,Width,Text,Size,EmbeddedFont);
HXLINE(  31)		Float _hx_tmp;
HXDLIN(  31)		bool _hx_tmp1;
HXDLIN(  31)		if (hx::IsNotNull( Text )) {
HXLINE(  31)			_hx_tmp1 = (Text.length <= (int)0);
            		}
            		else {
HXLINE(  31)			_hx_tmp1 = true;
            		}
HXDLIN(  31)		if (_hx_tmp1) {
HXLINE(  31)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(  31)			_hx_tmp = (this->textField->get_textHeight() + (int)4);
            		}
HXDLIN(  31)		this->set_height(_hx_tmp);
HXLINE(  33)		this->textField->set_multiline(false);
HXLINE(  34)		this->textField->set_wordWrap(false);
HXLINE(  35)		{
HXLINE(  35)			this->textField->set_defaultTextFormat(this->_defaultFormat);
HXDLIN(  35)			this->textField->setTextFormat(this->_defaultFormat,null(),null());
HXDLIN(  35)			this->_regen = true;
            		}
HXLINE(  37)		this->dirty = false;
            	}

Dynamic FlxTextField_obj::__CreateEmpty() { return new FlxTextField_obj; }

void *FlxTextField_obj::_hx_vtable = 0;

Dynamic FlxTextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTextField_obj > _hx_result = new FlxTextField_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxTextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0c660bfb) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x0c660bfb;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x4d1b55ae;
	}
}

void FlxTextField_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_44_destroy)
HXLINE(  45)		{
HXLINE(  45)			 ::openfl::_legacy::text::TextField Child = this->textField;
HXDLIN(  45)			if (::flixel::FlxG_obj::game->contains(Child)) {
HXLINE(  45)				::flixel::FlxG_obj::game->removeChild(Child);
            			}
            		}
HXLINE(  46)		this->super::destroy();
            	}


void FlxTextField_obj::stamp( ::flixel::FlxSprite Brush,hx::Null< int >  __o_X,hx::Null< int >  __o_Y){
int X = __o_X.Default(0);
int Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_50_stamp)
            	}


bool FlxTextField_obj::pixelsOverlapPoint( ::flixel::math::FlxPoint point,hx::Null< int >  __o_Mask, ::flixel::FlxCamera Camera){
int Mask = __o_Mask.Default(255);
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_57_pixelsOverlapPoint)
HXDLIN(  57)		return false;
            	}


bool FlxTextField_obj::isSimpleRender( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_63_isSimpleRender)
HXDLIN(  63)		return true;
            	}


 ::openfl::_legacy::display::BitmapData FlxTextField_obj::get_pixels(){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_67_get_pixels)
HXLINE(  68)		this->calcFrame(true);
HXLINE(  69)		return this->graphic->bitmap;
            	}


 ::openfl::_legacy::display::BitmapData FlxTextField_obj::set_pixels( ::openfl::_legacy::display::BitmapData Pixels){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_75_set_pixels)
HXDLIN(  75)		return Pixels;
            	}


Float FlxTextField_obj::set_alpha(Float Alpha){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_79_set_alpha)
HXLINE(  80)		Float lowerBound;
HXDLIN(  80)		if ((Alpha < (int)0)) {
HXLINE(  80)			lowerBound = (int)0;
            		}
            		else {
HXLINE(  80)			lowerBound = Alpha;
            		}
HXDLIN(  80)		 ::Dynamic _hx_tmp;
HXDLIN(  80)		if ((lowerBound > (int)1)) {
HXLINE(  80)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(  80)			_hx_tmp = lowerBound;
            		}
HXDLIN(  80)		this->alpha = _hx_tmp;
HXLINE(  81)		this->textField->set_alpha(this->alpha);
HXLINE(  82)		return Alpha;
            	}


Float FlxTextField_obj::set_height(Float Height){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_86_set_height)
HXLINE(  87)		Height = this->super::set_height(Height);
HXLINE(  88)		if (hx::IsNotNull( this->textField )) {
HXLINE(  89)			this->textField->set_height(Height);
            		}
HXLINE(  90)		return Height;
            	}


bool FlxTextField_obj::set_visible(bool Value){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_94_set_visible)
HXLINE(  95)		this->textField->set_visible(Value);
HXLINE(  96)		return this->super::set_visible(Value);
            	}


void FlxTextField_obj::kill(){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_100_kill)
HXLINE( 101)		this->set_visible(false);
HXLINE( 102)		this->super::kill();
            	}


void FlxTextField_obj::revive(){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_106_revive)
HXLINE( 107)		this->set_visible(true);
HXLINE( 108)		this->super::revive();
            	}


void FlxTextField_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_116_draw)
HXLINE( 117)		 ::openfl::_legacy::text::TextField _hx_tmp = this->textField;
HXDLIN( 117)		bool _hx_tmp1;
HXDLIN( 117)		bool _hx_tmp2;
HXDLIN( 117)		if (::flixel::FlxG_obj::camera->visible) {
HXLINE( 117)			_hx_tmp2 = ::flixel::FlxG_obj::camera->exists;
            		}
            		else {
HXLINE( 117)			_hx_tmp2 = false;
            		}
HXDLIN( 117)		if (_hx_tmp2) {
HXLINE( 117)			_hx_tmp1 = this->isOnScreen(::flixel::FlxG_obj::camera);
            		}
            		else {
HXLINE( 117)			_hx_tmp1 = false;
            		}
HXDLIN( 117)		_hx_tmp->set_visible(_hx_tmp1);
HXLINE( 119)		if (!(this->textField->get_visible())) {
HXLINE( 120)			return;
            		}
HXLINE( 122)		 ::openfl::_legacy::text::TextField _hx_tmp3 = this->textField;
HXDLIN( 122)		_hx_tmp3->set_x((this->x - this->offset->x));
HXLINE( 123)		 ::openfl::_legacy::text::TextField _hx_tmp4 = this->textField;
HXDLIN( 123)		_hx_tmp4->set_y((this->y - this->offset->y));
HXLINE( 125)		this->textField->set_scaleX(this->scale->x);
HXLINE( 126)		this->textField->set_scaleY(this->scale->y);
HXLINE( 128)		::flixel::FlxG_obj::camera->transformObject(this->textField);
            	}


 ::flixel::FlxCamera FlxTextField_obj::get_camera(){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_137_get_camera)
HXDLIN( 137)		return ::flixel::FlxG_obj::camera;
            	}


 ::flixel::FlxCamera FlxTextField_obj::set_camera( ::flixel::FlxCamera Value){
            	HX_STACKFRAME(&_hx_pos_09f4102717a20269_142_set_camera)
HXDLIN( 142)		return ::flixel::FlxG_obj::camera;
            	}



hx::ObjectPtr< FlxTextField_obj > FlxTextField_obj::__new(Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont) {
	hx::ObjectPtr< FlxTextField_obj > __this = new FlxTextField_obj();
	__this->__construct(X,Y,Width,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

hx::ObjectPtr< FlxTextField_obj > FlxTextField_obj::__alloc(hx::Ctx *_hx_ctx,Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont) {
	FlxTextField_obj *__this = (FlxTextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTextField_obj), true, "flixel.addons.text.FlxTextField"));
	*(void **)__this = FlxTextField_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

FlxTextField_obj::FlxTextField_obj()
{
}

hx::Val FlxTextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn() ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stamp") ) { return hx::Val( stamp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"revive") ) { return hx::Val( revive_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_pixels") ) { return hx::Val( get_pixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pixels") ) { return hx::Val( set_pixels_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_camera") ) { return hx::Val( get_camera_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_camera") ) { return hx::Val( set_camera_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isSimpleRender") ) { return hx::Val( isSimpleRender_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pixelsOverlapPoint") ) { return hx::Val( pixelsOverlapPoint_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxTextField_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FlxTextField_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTextField_obj_sMemberFields[] = {
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84"),
	HX_HCSTRING("pixelsOverlapPoint","\x16","\x82","\x44","\xe0"),
	HX_HCSTRING("isSimpleRender","\x32","\xf4","\x2a","\x47"),
	HX_HCSTRING("get_pixels","\xf6","\x5e","\x31","\x7d"),
	HX_HCSTRING("set_pixels","\x6a","\xfd","\xae","\x80"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("revive","\x55","\xfa","\x76","\x0a"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("get_camera","\x6e","\xb6","\x13","\xa8"),
	HX_HCSTRING("set_camera","\xe2","\x54","\x91","\xab"),
	::String(null()) };

static void FlxTextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTextField_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTextField_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTextField_obj::__mClass;

void FlxTextField_obj::__register()
{
	hx::Object *dummy = new FlxTextField_obj;
	FlxTextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.text.FlxTextField","\x93","\x52","\x6e","\xe6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace text
