// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c595a05c1c7a687d_12_new,"Enemy","new",0x35d4571a,"Enemy.new","Enemy.hx",12,0xbda88996)
static const int _hx_array_data_03a88228_1[] = {
	(int)0,(int)1,(int)2,
};
static const int _hx_array_data_03a88228_2[] = {
	(int)3,(int)4,(int)5,
};
static const int _hx_array_data_03a88228_3[] = {
	(int)6,(int)7,(int)8,
};
static const int _hx_array_data_03a88228_4[] = {
	(int)9,(int)10,(int)11,
};
static const int _hx_array_data_03a88228_5[] = {
	(int)12,(int)13,(int)14,
};
static const int _hx_array_data_03a88228_6[] = {
	(int)15,(int)16,(int)17,
};
static const int _hx_array_data_03a88228_7[] = {
	(int)18,(int)19,(int)20,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_65_update,"Enemy","update",0xcf0e6f8f,"Enemy.update","Enemy.hx",65,0xbda88996)

void Enemy_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y,int EType){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_12_new)
HXLINE(  18)		this->seesPlayer = false;
HXLINE(  14)		this->speed = ((Float)80);
HXLINE(  23)		super::__construct(X,Y,null());
HXLINE(  24)		this->loadGraphic(HX_("assets/images/trimmedAndFixedSprites.png",0d,9e,0f,de),true,(int)16,(int)16,null(),null());
HXLINE(  26)		switch((int)(EType)){
            			case (int)0: {
HXLINE(  29)				this->animation->add(HX_("walk",09,5d,f2,4e),::Array_obj< int >::fromData( _hx_array_data_03a88228_1,3),(int)6,null(),null(),null());
            			}
            			break;
            			case (int)1: {
HXLINE(  31)				this->animation->add(HX_("walk",09,5d,f2,4e),::Array_obj< int >::fromData( _hx_array_data_03a88228_2,3),(int)6,null(),null(),null());
            			}
            			break;
            			case (int)2: {
HXLINE(  33)				this->animation->add(HX_("walk",09,5d,f2,4e),::Array_obj< int >::fromData( _hx_array_data_03a88228_3,3),(int)6,null(),null(),null());
            			}
            			break;
            			case (int)3: {
HXLINE(  35)				this->animation->add(HX_("walk",09,5d,f2,4e),::Array_obj< int >::fromData( _hx_array_data_03a88228_4,3),(int)6,null(),null(),null());
            			}
            			break;
            			case (int)4: {
HXLINE(  37)				this->animation->add(HX_("walk",09,5d,f2,4e),::Array_obj< int >::fromData( _hx_array_data_03a88228_5,3),(int)6,null(),null(),null());
            			}
            			break;
            			case (int)5: {
HXLINE(  39)				this->animation->add(HX_("walk",09,5d,f2,4e),::Array_obj< int >::fromData( _hx_array_data_03a88228_6,3),(int)6,null(),null(),null());
            			}
            			break;
            			case (int)6: {
HXLINE(  41)				this->animation->add(HX_("walk",09,5d,f2,4e),::Array_obj< int >::fromData( _hx_array_data_03a88228_7,3),(int)6,null(),null(),null());
            			}
            			break;
            			default:{
            			}
            		}
HXLINE(  46)		this->etype = EType;
HXLINE(  48)		this->animation->play(HX_("walk",09,5d,f2,4e),null(),null(),null());
HXLINE(  53)		{
HXLINE(  53)			 ::Enemy _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  53)			_g->set_width((_g->get_width() - (int)2));
            		}
HXLINE(  54)		{
HXLINE(  54)			 ::Enemy _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  54)			_g1->set_height((_g1->get_height() - (int)2));
            		}
HXLINE(  58)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN(  58)		_hx_tmp->set_x(this->drag->set_y((int)10));
HXLINE(  59)		this->_idleTmr = (int)0;
HXLINE(  60)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  60)		point->_inPool = false;
HXDLIN(  60)		this->playerPos = point;
            	}

Dynamic Enemy_obj::__CreateEmpty() { return new Enemy_obj; }

void *Enemy_obj::_hx_vtable = 0;

Dynamic Enemy_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Enemy_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x03a88228) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x03a88228;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Enemy_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_65_update)
HXDLIN(  65)		this->super::update(elapsed);
            	}



hx::ObjectPtr< Enemy_obj > Enemy_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y,int EType) {
	hx::ObjectPtr< Enemy_obj > __this = new Enemy_obj();
	__this->__construct(__o_X,__o_Y,EType);
	return __this;
}

hx::ObjectPtr< Enemy_obj > Enemy_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y,int EType) {
	Enemy_obj *__this = (Enemy_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Enemy_obj), true, "Enemy"));
	*(void **)__this = Enemy_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,EType);
	return __this;
}

Enemy_obj::Enemy_obj()
{
}

void Enemy_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Enemy);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(etype,"etype");
	HX_MARK_MEMBER_NAME(_idleTmr,"_idleTmr");
	HX_MARK_MEMBER_NAME(_moveDir,"_moveDir");
	HX_MARK_MEMBER_NAME(seesPlayer,"seesPlayer");
	HX_MARK_MEMBER_NAME(playerPos,"playerPos");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Enemy_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(etype,"etype");
	HX_VISIT_MEMBER_NAME(_idleTmr,"_idleTmr");
	HX_VISIT_MEMBER_NAME(_moveDir,"_moveDir");
	HX_VISIT_MEMBER_NAME(seesPlayer,"seesPlayer");
	HX_VISIT_MEMBER_NAME(playerPos,"playerPos");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Enemy_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"etype") ) { return hx::Val( etype ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_idleTmr") ) { return hx::Val( _idleTmr ); }
		if (HX_FIELD_EQ(inName,"_moveDir") ) { return hx::Val( _moveDir ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playerPos") ) { return hx::Val( playerPos ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"seesPlayer") ) { return hx::Val( seesPlayer ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Enemy_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"etype") ) { etype=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_idleTmr") ) { _idleTmr=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_moveDir") ) { _moveDir=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playerPos") ) { playerPos=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"seesPlayer") ) { seesPlayer=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Enemy_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("etype","\x9f","\x89","\x81","\x74"));
	outFields->push(HX_HCSTRING("_idleTmr","\xa6","\x73","\xff","\xb5"));
	outFields->push(HX_HCSTRING("_moveDir","\x3d","\xec","\x37","\x84"));
	outFields->push(HX_HCSTRING("seesPlayer","\x01","\x05","\x0b","\x46"));
	outFields->push(HX_HCSTRING("playerPos","\xb3","\xbc","\xc6","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Enemy_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Enemy_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsInt,(int)offsetof(Enemy_obj,etype),HX_HCSTRING("etype","\x9f","\x89","\x81","\x74")},
	{hx::fsFloat,(int)offsetof(Enemy_obj,_idleTmr),HX_HCSTRING("_idleTmr","\xa6","\x73","\xff","\xb5")},
	{hx::fsFloat,(int)offsetof(Enemy_obj,_moveDir),HX_HCSTRING("_moveDir","\x3d","\xec","\x37","\x84")},
	{hx::fsBool,(int)offsetof(Enemy_obj,seesPlayer),HX_HCSTRING("seesPlayer","\x01","\x05","\x0b","\x46")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(Enemy_obj,playerPos),HX_HCSTRING("playerPos","\xb3","\xbc","\xc6","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Enemy_obj_sStaticStorageInfo = 0;
#endif

static ::String Enemy_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("etype","\x9f","\x89","\x81","\x74"),
	HX_HCSTRING("_idleTmr","\xa6","\x73","\xff","\xb5"),
	HX_HCSTRING("_moveDir","\x3d","\xec","\x37","\x84"),
	HX_HCSTRING("seesPlayer","\x01","\x05","\x0b","\x46"),
	HX_HCSTRING("playerPos","\xb3","\xbc","\xc6","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Enemy_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Enemy_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Enemy_obj::__mClass,"__mClass");
};

#endif

hx::Class Enemy_obj::__mClass;

void Enemy_obj::__register()
{
	hx::Object *dummy = new Enemy_obj;
	Enemy_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Enemy","\x28","\x82","\xa8","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Enemy_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Enemy_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Enemy_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Enemy_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enemy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enemy_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

