// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_APIStuff
#include <APIStuff.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_SettingState
#include <SettingState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouch
#include <flixel/input/touch/FlxTouch.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouchManager
#include <flixel/input/touch/FlxTouchManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_45a32d62ddd6df15_14_new,"SettingState","new",0x9b0f1bf3,"SettingState.new","SettingState.hx",14,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_53_create,"SettingState","create",0xfc5f5949,"SettingState.create","SettingState.hx",53,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_51_create,"SettingState","create",0xfc5f5949,"SettingState.create","SettingState.hx",51,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_100_update,"SettingState","update",0x07557856,"SettingState.update","SettingState.hx",100,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_129_controls,"SettingState","controls",0x61a76603,"SettingState.controls","SettingState.hx",129,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_199_changeValue,"SettingState","changeValue",0x7f9bbe74,"SettingState.changeValue","SettingState.hx",199,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_236_changePos,"SettingState","changePos",0xa19bc5d7,"SettingState.changePos","SettingState.hx",236,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_16_boot,"SettingState","boot",0x0a42593f,"SettingState.boot","SettingState.hx",16,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_17_boot,"SettingState","boot",0x0a42593f,"SettingState.boot","SettingState.hx",17,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_18_boot,"SettingState","boot",0x0a42593f,"SettingState.boot","SettingState.hx",18,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_19_boot,"SettingState","boot",0x0a42593f,"SettingState.boot","SettingState.hx",19,0x155be2dd)
HX_LOCAL_STACK_FRAME(_hx_pos_45a32d62ddd6df15_22_boot,"SettingState","boot",0x0a42593f,"SettingState.boot","SettingState.hx",22,0x155be2dd)

void SettingState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_45a32d62ddd6df15_14_new)
HXLINE(  40)		this->_selection = (int)0;
HXLINE(  34)		this->settingsArray = ::cpp::VirtualArray_obj::__new(3)->init(0,::cpp::VirtualArray_obj::__new(5)->init(0,HX_("Master Volume",98,7d,62,62))->init(1,HX_("Music Volume",35,80,cb,77))->init(2,HX_("SFX Volume",55,44,15,76))->init(3,HX_("Moan Volume",0b,85,ec,6a))->init(4,HX_("April Fools",73,c6,78,2c)))->init(1,::cpp::VirtualArray_obj::__new(5)->init(0,::SettingState_obj::masterVol)->init(1,::SettingState_obj::musicVol)->init(2,::SettingState_obj::soundVol)->init(3,::SettingState_obj::moanVol)->init(4,::SettingState_obj::aprilFools))->init(2,::cpp::VirtualArray_obj::__new(6)->init(0,(int)0)->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,false)->init(5,(int)0));
HXLINE(  14)		super::__construct(MaxSize);
            	}

Dynamic SettingState_obj::__CreateEmpty() { return new SettingState_obj; }

void *SettingState_obj::_hx_vtable = 0;

Dynamic SettingState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SettingState_obj > _hx_result = new SettingState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SettingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x79d7a681;
	}
}

void SettingState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_45a32d62ddd6df15_53_create)
HXLINE(  53)			 ::NGio newgrounds =  ::NGio_obj::__alloc( HX_CTX ,::APIStuff_obj::APIID,::APIStuff_obj::EncKey);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_45a32d62ddd6df15_51_create)
HXLINE(  53)		 ::flixel::ui::FlxButton btnNG =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,(int)32,(int)350,HX_("Log into NG",fd,3f,43,c5), ::Dynamic(new _hx_Closure_0()));
HXLINE(  54)		this->add(btnNG);
HXLINE(  57)		this->_selector =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  58)		this->add(this->_selector);
HXLINE(  60)		this->_grpValues =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  61)		this->add(this->_grpValues);
HXLINE(  63)		this->_grpText =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  64)		this->add(this->_grpText);
HXLINE(  66)		this->_selLeft =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,HX_("<",3c,00,00,00),(int)32,null());
HXLINE(  67)		this->_selector->add(this->_selLeft).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  69)		this->_selRight =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)100,(int)0,(int)0,HX_(">",3e,00,00,00),(int)32,null());
HXLINE(  70)		this->_selector->add(this->_selRight).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  72)		{
HXLINE(  72)			int _g1 = (int)0;
HXDLIN(  72)			int _g = ( (int)(this->settingsArray->__get((int)0)->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN(  72)			while((_g1 < _g)){
HXLINE(  72)				_g1 = (_g1 + (int)1);
HXDLIN(  72)				int i = (_g1 - (int)1);
HXLINE(  74)				Float yPos = (((int)34 * i) + (int)100);
HXLINE(  76)				 ::flixel::text::FlxText settingText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)32,yPos,(int)0,this->settingsArray->__get((int)0)->__GetItem(i),(int)32,null());
HXLINE(  77)				this->_grpText->add(settingText).StaticCast<  ::flixel::text::FlxText >();
HXLINE(  79)				int settingValue = (::flixel::FlxG_obj::width - (int)96);
HXDLIN(  79)				 ::flixel::text::FlxText settingValue1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,settingValue,yPos,(int)0,::Std_obj::string(::Std_obj::_hx_int(( (Float)(this->settingsArray->__get((int)1)->__GetItem(i)) ))),(int)32,null());
HXLINE(  80)				this->_grpValues->add(settingValue1).StaticCast<  ::flixel::text::FlxText >();
            			}
            		}
HXLINE(  85)		this->exitTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)16,(::flixel::FlxG_obj::height - (int)64),(int)0,HX_("Z to return to Menu",d3,e6,fb,91),(int)32,null());
HXLINE(  86)		this->add(this->exitTxt);
HXLINE(  90)		this->exitTxt->set_text(HX_("Tap here to exit",b0,7f,8b,2a));
HXLINE(  93)		 ::flixel::group::FlxTypedSpriteGroup _hx_tmp = this->_selector;
HXDLIN(  93)		_hx_tmp->set_x((::flixel::FlxG_obj::width - (int)130));
HXLINE(  94)		this->changePos();
HXLINE(  96)		this->super::create();
            	}


void SettingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_45a32d62ddd6df15_100_update)
HXLINE( 101)		this->super::update(elapsed);
HXLINE( 105)		this->controls();
HXLINE( 107)		int _hx_tmp = this->_selection;
HXDLIN( 107)		if ((_hx_tmp > ( ::Dynamic(this->settingsArray->__get((int)0)->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) - (int)1))) {
HXLINE( 108)			this->_selection = (int)0;
            		}
HXLINE( 109)		if ((this->_selection < (int)0)) {
HXLINE( 110)			this->_selection = ::Std_obj::_hx_int(( ::Dynamic(this->settingsArray->__get((int)0)->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) - (int)1));
            		}
HXLINE( 112)		if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE( 113)			this->changePos();
            		}
HXLINE( 116)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 116)		int KeyArray;
HXDLIN( 116)		::String s = HX_("Z",5a,00,00,00);
HXDLIN( 116)		s = s.toUpperCase();
HXDLIN( 116)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 116)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 116)			KeyArray = (int)-1;
            		}
HXDLIN( 116)		int KeyArray1;
HXDLIN( 116)		::String s1 = HX_("ENTER",f8,a4,74,ee);
HXDLIN( 116)		s1 = s1.toUpperCase();
HXDLIN( 116)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 116)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE( 116)			KeyArray1 = (int)-1;
            		}
HXDLIN( 116)		::String s2 = HX_("SPACE",a6,c4,54,ff);
HXDLIN( 116)		s2 = s2.toUpperCase();
HXDLIN( 116)		int KeyArray2;
HXDLIN( 116)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 116)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE( 116)			KeyArray2 = (int)-1;
            		}
HXDLIN( 116)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray)->init(1,KeyArray1)->init(2,KeyArray2),(int)2)) {
HXLINE( 118)			 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 118)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 118)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 121)		{
HXLINE( 121)			int _g1 = (int)0;
HXDLIN( 121)			int _g = this->_grpValues->members->get_length();
HXDLIN( 121)			while((_g1 < _g)){
HXLINE( 121)				_g1 = (_g1 + (int)1);
HXDLIN( 121)				int t = (_g1 - (int)1);
HXLINE( 123)				 ::flixel::text::FlxText _hx_tmp1 = Dynamic( this->_grpValues->members->__get(t)).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 123)				_hx_tmp1->set_text(::Std_obj::string(this->settingsArray->__get((int)1)->__GetItem(t)));
            			}
            		}
            	}


void SettingState_obj::controls(){
            	HX_GC_STACKFRAME(&_hx_pos_45a32d62ddd6df15_129_controls)
HXLINE( 131)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 131)		int KeyArray;
HXDLIN( 131)		::String s = HX_("W",57,00,00,00);
HXDLIN( 131)		s = s.toUpperCase();
HXDLIN( 131)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 131)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 131)			KeyArray = (int)-1;
            		}
HXDLIN( 131)		int KeyArray1;
HXDLIN( 131)		::String s1 = HX_("UP",5b,4a,00,00);
HXDLIN( 131)		s1 = s1.toUpperCase();
HXDLIN( 131)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 131)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE( 131)			KeyArray1 = (int)-1;
            		}
HXDLIN( 131)		::String s2 = HX_("I",49,00,00,00);
HXDLIN( 131)		s2 = s2.toUpperCase();
HXDLIN( 131)		int KeyArray2;
HXDLIN( 131)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 131)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE( 131)			KeyArray2 = (int)-1;
            		}
HXDLIN( 131)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray)->init(1,KeyArray1)->init(2,KeyArray2),(int)2)) {
HXLINE( 133)			 ::SettingState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 133)			_hx_tmp->_selection = (_hx_tmp->_selection - (int)1);
HXLINE( 134)			this->changePos();
            		}
            		else {
HXLINE( 136)			 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN( 136)			int KeyArray3;
HXDLIN( 136)			::String s3 = HX_("S",53,00,00,00);
HXDLIN( 136)			s3 = s3.toUpperCase();
HXDLIN( 136)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) {
HXLINE( 136)				KeyArray3 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) );
            			}
            			else {
HXLINE( 136)				KeyArray3 = (int)-1;
            			}
HXDLIN( 136)			int KeyArray4;
HXDLIN( 136)			::String s4 = HX_("DOWN",62,c0,2e,2d);
HXDLIN( 136)			s4 = s4.toUpperCase();
HXDLIN( 136)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s4)) {
HXLINE( 136)				KeyArray4 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s4)) );
            			}
            			else {
HXLINE( 136)				KeyArray4 = (int)-1;
            			}
HXDLIN( 136)			::String s5 = HX_("K",4b,00,00,00);
HXDLIN( 136)			s5 = s5.toUpperCase();
HXDLIN( 136)			int KeyArray5;
HXDLIN( 136)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s5)) {
HXLINE( 136)				KeyArray5 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s5)) );
            			}
            			else {
HXLINE( 136)				KeyArray5 = (int)-1;
            			}
HXDLIN( 136)			if (_this1->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray3)->init(1,KeyArray4)->init(2,KeyArray5),(int)2)) {
HXLINE( 138)				 ::SettingState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 138)				_hx_tmp1->_selection = (_hx_tmp1->_selection + (int)1);
HXLINE( 139)				this->changePos();
            			}
            		}
HXLINE( 142)		 ::flixel::input::keyboard::FlxKeyboard _this2 = ::flixel::FlxG_obj::keys;
HXDLIN( 142)		int KeyArray6;
HXDLIN( 142)		::String s6 = HX_("A",41,00,00,00);
HXDLIN( 142)		s6 = s6.toUpperCase();
HXDLIN( 142)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s6)) {
HXLINE( 142)			KeyArray6 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s6)) );
            		}
            		else {
HXLINE( 142)			KeyArray6 = (int)-1;
            		}
HXDLIN( 142)		int KeyArray7;
HXDLIN( 142)		::String s7 = HX_("LEFT",07,d0,70,32);
HXDLIN( 142)		s7 = s7.toUpperCase();
HXDLIN( 142)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s7)) {
HXLINE( 142)			KeyArray7 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s7)) );
            		}
            		else {
HXLINE( 142)			KeyArray7 = (int)-1;
            		}
HXDLIN( 142)		::String s8 = HX_("J",4a,00,00,00);
HXDLIN( 142)		s8 = s8.toUpperCase();
HXDLIN( 142)		int KeyArray8;
HXDLIN( 142)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s8)) {
HXLINE( 142)			KeyArray8 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s8)) );
            		}
            		else {
HXLINE( 142)			KeyArray8 = (int)-1;
            		}
HXDLIN( 142)		if (_this2->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray6)->init(1,KeyArray7)->init(2,KeyArray8),(int)2)) {
HXLINE( 144)			this->changeValue(((Float)-0.1));
            		}
HXLINE( 146)		 ::flixel::input::keyboard::FlxKeyboard _this3 = ::flixel::FlxG_obj::keys;
HXDLIN( 146)		int KeyArray9;
HXDLIN( 146)		::String s9 = HX_("D",44,00,00,00);
HXDLIN( 146)		s9 = s9.toUpperCase();
HXDLIN( 146)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s9)) {
HXLINE( 146)			KeyArray9 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s9)) );
            		}
            		else {
HXLINE( 146)			KeyArray9 = (int)-1;
            		}
HXDLIN( 146)		int KeyArray10;
HXDLIN( 146)		::String s10 = HX_("RIGHT",bc,43,52,67);
HXDLIN( 146)		s10 = s10.toUpperCase();
HXDLIN( 146)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s10)) {
HXLINE( 146)			KeyArray10 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s10)) );
            		}
            		else {
HXLINE( 146)			KeyArray10 = (int)-1;
            		}
HXDLIN( 146)		::String s11 = HX_("L",4c,00,00,00);
HXDLIN( 146)		s11 = s11.toUpperCase();
HXDLIN( 146)		int KeyArray11;
HXDLIN( 146)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s11)) {
HXLINE( 146)			KeyArray11 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s11)) );
            		}
            		else {
HXLINE( 146)			KeyArray11 = (int)-1;
            		}
HXDLIN( 146)		if (_this3->checkKeyArrayState(::Array_obj< int >::__new(3)->init(0,KeyArray9)->init(1,KeyArray10)->init(2,KeyArray11),(int)2)) {
HXLINE( 148)			this->changeValue(((Float)0.1));
            		}
HXLINE( 154)		{
HXLINE( 154)			int _g = (int)0;
HXDLIN( 154)			::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::touches->list;
HXDLIN( 154)			while((_g < _g1->length)){
HXLINE( 154)				 ::flixel::input::touch::FlxTouch touch = _g1->__get(_g).StaticCast<  ::flixel::input::touch::FlxTouch >();
HXDLIN( 154)				_g = (_g + (int)1);
HXLINE( 156)				bool _hx_tmp2;
HXDLIN( 156)				if (!(touch->overlaps(Dynamic( this->_grpText->members->__get((int)0)).StaticCast<  ::flixel::text::FlxText >(),null()))) {
HXLINE( 156)					_hx_tmp2 = touch->overlaps(Dynamic( this->_grpValues->members->__get((int)0)).StaticCast<  ::flixel::text::FlxText >(),null());
            				}
            				else {
HXLINE( 156)					_hx_tmp2 = true;
            				}
HXDLIN( 156)				if (_hx_tmp2) {
HXLINE( 158)					this->_selection = (int)0;
            				}
HXLINE( 161)				bool _hx_tmp3;
HXDLIN( 161)				if (!(touch->overlaps(Dynamic( this->_grpText->members->__get((int)1)).StaticCast<  ::flixel::text::FlxText >(),null()))) {
HXLINE( 161)					_hx_tmp3 = touch->overlaps(Dynamic( this->_grpValues->members->__get((int)1)).StaticCast<  ::flixel::text::FlxText >(),null());
            				}
            				else {
HXLINE( 161)					_hx_tmp3 = true;
            				}
HXDLIN( 161)				if (_hx_tmp3) {
HXLINE( 163)					this->_selection = (int)1;
            				}
HXLINE( 166)				bool _hx_tmp4;
HXDLIN( 166)				if (!(touch->overlaps(Dynamic( this->_grpText->members->__get((int)2)).StaticCast<  ::flixel::text::FlxText >(),null()))) {
HXLINE( 166)					_hx_tmp4 = touch->overlaps(Dynamic( this->_grpValues->members->__get((int)2)).StaticCast<  ::flixel::text::FlxText >(),null());
            				}
            				else {
HXLINE( 166)					_hx_tmp4 = true;
            				}
HXDLIN( 166)				if (_hx_tmp4) {
HXLINE( 168)					this->_selection = (int)2;
            				}
HXLINE( 171)				bool _hx_tmp5;
HXDLIN( 171)				if (!(touch->overlaps(Dynamic( this->_grpText->members->__get((int)3)).StaticCast<  ::flixel::text::FlxText >(),null()))) {
HXLINE( 171)					_hx_tmp5 = touch->overlaps(Dynamic( this->_grpValues->members->__get((int)3)).StaticCast<  ::flixel::text::FlxText >(),null());
            				}
            				else {
HXLINE( 171)					_hx_tmp5 = true;
            				}
HXDLIN( 171)				if (_hx_tmp5) {
HXLINE( 173)					this->_selection = (int)3;
            				}
HXLINE( 176)				if ((touch->input->current == (int)2)) {
HXLINE( 178)					if (touch->overlaps(this->_selLeft,null())) {
HXLINE( 180)						this->changeValue(((Float)-0.1));
            					}
            					else {
HXLINE( 182)						if (touch->overlaps(this->_selRight,null())) {
HXLINE( 184)							this->changeValue(((Float)0.1));
            						}
            					}
HXLINE( 187)					if (touch->overlaps(this->exitTxt,null())) {
HXLINE( 189)						 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 189)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 189)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
HXLINE( 192)					this->changePos();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingState_obj,controls,(void))

void SettingState_obj::changeValue(Float diff){
            	HX_STACKFRAME(&_hx_pos_45a32d62ddd6df15_199_changeValue)
HXLINE( 200)		bool _hx_tmp;
HXDLIN( 200)		if (!(( (bool)(this->settingsArray->__get((int)1)->__GetItem(this->_selection)) ))) {
HXLINE( 200)			_hx_tmp = !(( (bool)(this->settingsArray->__get((int)1)->__GetItem(this->_selection)) ));
            		}
            		else {
HXLINE( 200)			_hx_tmp = true;
            		}
HXDLIN( 200)		if (_hx_tmp) {
HXLINE( 202)			this->settingsArray->__get((int)1)->__SetItem(this->_selection,!(( (bool)(this->settingsArray->__get((int)1)->__GetItem(this->_selection)) )));
            		}
            		else {
HXLINE( 206)			 ::Dynamic _hx_tmp1 = this->settingsArray->__get((int)1);
HXDLIN( 206)			int _hx_tmp2 = this->_selection;
HXDLIN( 206)			_hx_tmp1->__SetItem(_hx_tmp2,(( (Float)(_hx_tmp1->__GetItem(_hx_tmp2)) ) + diff));
            		}
HXLINE( 210)		if ((this->_selection < (int)4)) {
HXLINE( 215)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN( 215)			_hx_tmp3->play(HX_("assets/sounds/smack1.ogg",22,9d,1d,9d),(( (Float)(this->settingsArray->__get((int)1)->__GetItem(this->_selection)) ) * ::SettingState_obj::masterVol),null(),null(),null(),null());
            		}
HXLINE( 220)		Float _hx_tmp4 = ( (Float)(this->settingsArray->__get((int)1)->__GetItem(this->_selection)) );
HXDLIN( 220)		if ((_hx_tmp4 < ( (Float)(this->settingsArray->__get((int)2)->__GetItem(this->_selection)) ))) {
HXLINE( 221)			 ::Dynamic _hx_tmp5 = this->settingsArray->__get((int)1);
HXDLIN( 221)			int _hx_tmp6 = this->_selection;
HXDLIN( 221)			_hx_tmp5->__SetItem(_hx_tmp6,this->settingsArray->__get((int)2)->__GetItem(this->_selection));
            		}
HXLINE( 223)		 ::Dynamic _hx_tmp7 = this->settingsArray->__get((int)1);
HXDLIN( 223)		int _hx_tmp8 = this->_selection;
HXDLIN( 223)		_hx_tmp7->__SetItem(_hx_tmp8,::flixel::math::FlxMath_obj::roundDecimal(( (Float)(this->settingsArray->__get((int)1)->__GetItem(this->_selection)) ),(int)1));
HXLINE( 225)		::SettingState_obj::masterVol = ( (Float)(this->settingsArray->__get((int)1)->__GetItem((int)0)) );
HXLINE( 226)		::SettingState_obj::musicVol = ( (Float)(this->settingsArray->__get((int)1)->__GetItem((int)1)) );
HXLINE( 227)		::SettingState_obj::soundVol = ( (Float)(this->settingsArray->__get((int)1)->__GetItem((int)2)) );
HXLINE( 228)		::SettingState_obj::moanVol = ( (Float)(this->settingsArray->__get((int)1)->__GetItem((int)3)) );
HXLINE( 230)		::SettingState_obj::aprilFools = ( (bool)(this->settingsArray->__get((int)1)->__GetItem((int)4)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(SettingState_obj,changeValue,(void))

void SettingState_obj::changePos(){
            	HX_STACKFRAME(&_hx_pos_45a32d62ddd6df15_236_changePos)
HXDLIN( 236)		 ::flixel::group::FlxTypedSpriteGroup _hx_tmp = this->_selector;
HXDLIN( 236)		_hx_tmp->set_y(((this->_selection * (int)34) + (int)102));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SettingState_obj,changePos,(void))

Float SettingState_obj::masterVol;

Float SettingState_obj::musicVol;

Float SettingState_obj::soundVol;

Float SettingState_obj::moanVol;

bool SettingState_obj::aprilFools;


hx::ObjectPtr< SettingState_obj > SettingState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< SettingState_obj > __this = new SettingState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< SettingState_obj > SettingState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	SettingState_obj *__this = (SettingState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SettingState_obj), true, "SettingState"));
	*(void **)__this = SettingState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

SettingState_obj::SettingState_obj()
{
}

void SettingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SettingState);
	HX_MARK_MEMBER_NAME(musicTxt,"musicTxt");
	HX_MARK_MEMBER_NAME(speedTxt,"speedTxt");
	HX_MARK_MEMBER_NAME(settingsArray,"settingsArray");
	HX_MARK_MEMBER_NAME(_selection,"_selection");
	HX_MARK_MEMBER_NAME(_selector,"_selector");
	HX_MARK_MEMBER_NAME(_selLeft,"_selLeft");
	HX_MARK_MEMBER_NAME(_selRight,"_selRight");
	HX_MARK_MEMBER_NAME(_grpValues,"_grpValues");
	HX_MARK_MEMBER_NAME(_grpText,"_grpText");
	HX_MARK_MEMBER_NAME(exitTxt,"exitTxt");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SettingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(musicTxt,"musicTxt");
	HX_VISIT_MEMBER_NAME(speedTxt,"speedTxt");
	HX_VISIT_MEMBER_NAME(settingsArray,"settingsArray");
	HX_VISIT_MEMBER_NAME(_selection,"_selection");
	HX_VISIT_MEMBER_NAME(_selector,"_selector");
	HX_VISIT_MEMBER_NAME(_selLeft,"_selLeft");
	HX_VISIT_MEMBER_NAME(_selRight,"_selRight");
	HX_VISIT_MEMBER_NAME(_grpValues,"_grpValues");
	HX_VISIT_MEMBER_NAME(_grpText,"_grpText");
	HX_VISIT_MEMBER_NAME(exitTxt,"exitTxt");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SettingState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"exitTxt") ) { return hx::Val( exitTxt ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"musicTxt") ) { return hx::Val( musicTxt ); }
		if (HX_FIELD_EQ(inName,"speedTxt") ) { return hx::Val( speedTxt ); }
		if (HX_FIELD_EQ(inName,"_selLeft") ) { return hx::Val( _selLeft ); }
		if (HX_FIELD_EQ(inName,"_grpText") ) { return hx::Val( _grpText ); }
		if (HX_FIELD_EQ(inName,"controls") ) { return hx::Val( controls_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_selector") ) { return hx::Val( _selector ); }
		if (HX_FIELD_EQ(inName,"_selRight") ) { return hx::Val( _selRight ); }
		if (HX_FIELD_EQ(inName,"changePos") ) { return hx::Val( changePos_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_selection") ) { return hx::Val( _selection ); }
		if (HX_FIELD_EQ(inName,"_grpValues") ) { return hx::Val( _grpValues ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"changeValue") ) { return hx::Val( changeValue_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"settingsArray") ) { return hx::Val( settingsArray ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SettingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"moanVol") ) { outValue = ( moanVol ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"musicVol") ) { outValue = ( musicVol ); return true; }
		if (HX_FIELD_EQ(inName,"soundVol") ) { outValue = ( soundVol ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"masterVol") ) { outValue = ( masterVol ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"aprilFools") ) { outValue = ( aprilFools ); return true; }
	}
	return false;
}

hx::Val SettingState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"exitTxt") ) { exitTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"musicTxt") ) { musicTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speedTxt") ) { speedTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selLeft") ) { _selLeft=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_grpText") ) { _grpText=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_selector") ) { _selector=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_selRight") ) { _selRight=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_selection") ) { _selection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_grpValues") ) { _grpValues=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"settingsArray") ) { settingsArray=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SettingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"moanVol") ) { moanVol=ioValue.Cast< Float >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"musicVol") ) { musicVol=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"soundVol") ) { soundVol=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"masterVol") ) { masterVol=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"aprilFools") ) { aprilFools=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void SettingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("musicTxt","\xcb","\x8a","\x97","\x0d"));
	outFields->push(HX_HCSTRING("speedTxt","\x29","\xbd","\xea","\xae"));
	outFields->push(HX_HCSTRING("settingsArray","\xb6","\xc9","\x20","\x54"));
	outFields->push(HX_HCSTRING("_selection","\x0d","\x74","\xbd","\xe9"));
	outFields->push(HX_HCSTRING("_selector","\x7e","\x2a","\x03","\xf9"));
	outFields->push(HX_HCSTRING("_selLeft","\x42","\xfe","\xb7","\xab"));
	outFields->push(HX_HCSTRING("_selRight","\x41","\x89","\x53","\x0c"));
	outFields->push(HX_HCSTRING("_grpValues","\x68","\xf9","\xe9","\x68"));
	outFields->push(HX_HCSTRING("_grpText","\xb3","\x34","\x3e","\x3e"));
	outFields->push(HX_HCSTRING("exitTxt","\xf2","\xf5","\xca","\x24"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SettingState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(SettingState_obj,musicTxt),HX_HCSTRING("musicTxt","\xcb","\x8a","\x97","\x0d")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(SettingState_obj,speedTxt),HX_HCSTRING("speedTxt","\x29","\xbd","\xea","\xae")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(SettingState_obj,settingsArray),HX_HCSTRING("settingsArray","\xb6","\xc9","\x20","\x54")},
	{hx::fsInt,(int)offsetof(SettingState_obj,_selection),HX_HCSTRING("_selection","\x0d","\x74","\xbd","\xe9")},
	{hx::fsObject /*::flixel::group::FlxTypedSpriteGroup*/ ,(int)offsetof(SettingState_obj,_selector),HX_HCSTRING("_selector","\x7e","\x2a","\x03","\xf9")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(SettingState_obj,_selLeft),HX_HCSTRING("_selLeft","\x42","\xfe","\xb7","\xab")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(SettingState_obj,_selRight),HX_HCSTRING("_selRight","\x41","\x89","\x53","\x0c")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(SettingState_obj,_grpValues),HX_HCSTRING("_grpValues","\x68","\xf9","\xe9","\x68")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(SettingState_obj,_grpText),HX_HCSTRING("_grpText","\xb3","\x34","\x3e","\x3e")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(SettingState_obj,exitTxt),HX_HCSTRING("exitTxt","\xf2","\xf5","\xca","\x24")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SettingState_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &SettingState_obj::masterVol,HX_HCSTRING("masterVol","\x91","\xb3","\x85","\xff")},
	{hx::fsFloat,(void *) &SettingState_obj::musicVol,HX_HCSTRING("musicVol","\x6e","\x07","\x99","\x0d")},
	{hx::fsFloat,(void *) &SettingState_obj::soundVol,HX_HCSTRING("soundVol","\x84","\xc1","\xa7","\x19")},
	{hx::fsFloat,(void *) &SettingState_obj::moanVol,HX_HCSTRING("moanVol","\x84","\xfd","\x15","\x39")},
	{hx::fsBool,(void *) &SettingState_obj::aprilFools,HX_HCSTRING("aprilFools","\xe7","\xbd","\xe4","\x72")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SettingState_obj_sMemberFields[] = {
	HX_HCSTRING("musicTxt","\xcb","\x8a","\x97","\x0d"),
	HX_HCSTRING("speedTxt","\x29","\xbd","\xea","\xae"),
	HX_HCSTRING("settingsArray","\xb6","\xc9","\x20","\x54"),
	HX_HCSTRING("_selection","\x0d","\x74","\xbd","\xe9"),
	HX_HCSTRING("_selector","\x7e","\x2a","\x03","\xf9"),
	HX_HCSTRING("_selLeft","\x42","\xfe","\xb7","\xab"),
	HX_HCSTRING("_selRight","\x41","\x89","\x53","\x0c"),
	HX_HCSTRING("_grpValues","\x68","\xf9","\xe9","\x68"),
	HX_HCSTRING("_grpText","\xb3","\x34","\x3e","\x3e"),
	HX_HCSTRING("exitTxt","\xf2","\xf5","\xca","\x24"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("controls","\x76","\x86","\xbc","\x37"),
	HX_HCSTRING("changeValue","\xe1","\x27","\x7e","\x57"),
	HX_HCSTRING("changePos","\x04","\x0a","\x03","\x1e"),
	::String(null()) };

static void SettingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SettingState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SettingState_obj::masterVol,"masterVol");
	HX_MARK_MEMBER_NAME(SettingState_obj::musicVol,"musicVol");
	HX_MARK_MEMBER_NAME(SettingState_obj::soundVol,"soundVol");
	HX_MARK_MEMBER_NAME(SettingState_obj::moanVol,"moanVol");
	HX_MARK_MEMBER_NAME(SettingState_obj::aprilFools,"aprilFools");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SettingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SettingState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SettingState_obj::masterVol,"masterVol");
	HX_VISIT_MEMBER_NAME(SettingState_obj::musicVol,"musicVol");
	HX_VISIT_MEMBER_NAME(SettingState_obj::soundVol,"soundVol");
	HX_VISIT_MEMBER_NAME(SettingState_obj::moanVol,"moanVol");
	HX_VISIT_MEMBER_NAME(SettingState_obj::aprilFools,"aprilFools");
};

#endif

hx::Class SettingState_obj::__mClass;

static ::String SettingState_obj_sStaticFields[] = {
	HX_HCSTRING("masterVol","\x91","\xb3","\x85","\xff"),
	HX_HCSTRING("musicVol","\x6e","\x07","\x99","\x0d"),
	HX_HCSTRING("soundVol","\x84","\xc1","\xa7","\x19"),
	HX_HCSTRING("moanVol","\x84","\xfd","\x15","\x39"),
	HX_HCSTRING("aprilFools","\xe7","\xbd","\xe4","\x72"),
	::String(null())
};

void SettingState_obj::__register()
{
	hx::Object *dummy = new SettingState_obj;
	SettingState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("SettingState","\x81","\xa6","\xd7","\x79");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SettingState_obj::__GetStatic;
	__mClass->mSetStaticField = &SettingState_obj::__SetStatic;
	__mClass->mMarkFunc = SettingState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SettingState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SettingState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SettingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SettingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SettingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SettingState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SettingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_45a32d62ddd6df15_16_boot)
HXDLIN(  16)		masterVol = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_45a32d62ddd6df15_17_boot)
HXDLIN(  17)		musicVol = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_45a32d62ddd6df15_18_boot)
HXDLIN(  18)		soundVol = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_45a32d62ddd6df15_19_boot)
HXDLIN(  19)		moanVol = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_45a32d62ddd6df15_22_boot)
HXDLIN(  22)		aprilFools = false;
            	}
}

