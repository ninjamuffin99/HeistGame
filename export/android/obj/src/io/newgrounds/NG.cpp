// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_io_newgrounds_Call
#include <io/newgrounds/Call.h>
#endif
#ifndef INCLUDED_io_newgrounds_ICallable
#include <io/newgrounds/ICallable.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_AppComponent
#include <io/newgrounds/components/AppComponent.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_Component
#include <io/newgrounds/components/Component.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_ComponentList
#include <io/newgrounds/components/ComponentList.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_MedalComponent
#include <io/newgrounds/components/MedalComponent.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_ScoreBoardComponent
#include <io/newgrounds/components/ScoreBoardComponent.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Error
#include <io/newgrounds/objects/Error.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Medal
#include <io/newgrounds/objects/Medal.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_ScoreBoard
#include <io/newgrounds/objects/ScoreBoard.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Session
#include <io/newgrounds/objects/Session.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_events_Response
#include <io/newgrounds/objects/events/Response.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_events_Result
#include <io/newgrounds/objects/events/Result.h>
#endif
#ifndef INCLUDED_io_newgrounds_utils_Dispatcher
#include <io/newgrounds/utils/Dispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_LoaderInfo
#include <openfl/_legacy/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLLoader
#include <openfl/_legacy/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_Timer
#include <openfl/_legacy/utils/Timer.h>
#endif
#ifndef INCLUDED_openfl_events_TimerEvent
#include <openfl/events/TimerEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_45e56eda36fb0427_70_new,"io.newgrounds.NG","new",0xc59603a5,"io.newgrounds.NG.new","io/newgrounds/NG.hx",70,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_39_get_user,"io.newgrounds.NG","get_user",0x82ed206f,"io.newgrounds.NG.get_user","io/newgrounds/NG.hx",39,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_112_checkInitialSession,"io.newgrounds.NG","checkInitialSession",0x5219cf5f,"io.newgrounds.NG.checkInitialSession","io/newgrounds/NG.hx",112,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_137_requestLogin,"io.newgrounds.NG","requestLogin",0x413747b5,"io.newgrounds.NG.requestLogin","io/newgrounds/NG.hx",137,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_119_requestLogin,"io.newgrounds.NG","requestLogin",0x413747b5,"io.newgrounds.NG.requestLogin","io/newgrounds/NG.hx",119,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_150_onSessionReceive,"io.newgrounds.NG","onSessionReceive",0xec6c1c47,"io.newgrounds.NG.onSessionReceive","io/newgrounds/NG.hx",150,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_175_checkSession,"io.newgrounds.NG","checkSession",0xad908b89,"io.newgrounds.NG.checkSession","io/newgrounds/NG.hx",175,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_199_checkSession,"io.newgrounds.NG","checkSession",0xad908b89,"io.newgrounds.NG.checkSession","io/newgrounds/NG.hx",199,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_206_checkSession,"io.newgrounds.NG","checkSession",0xad908b89,"io.newgrounds.NG.checkSession","io/newgrounds/NG.hx",206,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_223_cancelLoginRequest,"io.newgrounds.NG","cancelLoginRequest",0xd58be7db,"io.newgrounds.NG.cancelLoginRequest","io/newgrounds/NG.hx",223,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_227_endLoginAndCall,"io.newgrounds.NG","endLoginAndCall",0x99dbe7ec,"io.newgrounds.NG.endLoginAndCall","io/newgrounds/NG.hx",227,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_236_logOut,"io.newgrounds.NG","logOut",0xafd21445,"io.newgrounds.NG.logOut","io/newgrounds/NG.hx",236,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_248_onLogOutSuccessful,"io.newgrounds.NG","onLogOutSuccessful",0xdb4ceafe,"io.newgrounds.NG.onLogOutSuccessful","io/newgrounds/NG.hx",248,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_258_requestMedals,"io.newgrounds.NG","requestMedals",0x717f4ed0,"io.newgrounds.NG.requestMedals","io/newgrounds/NG.hx",258,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_272_onMedalsReceived,"io.newgrounds.NG","onMedalsReceived",0x307eaaf7,"io.newgrounds.NG.onMedalsReceived","io/newgrounds/NG.hx",272,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_307_requestScoreBoards,"io.newgrounds.NG","requestScoreBoards",0x9337ab4b,"io.newgrounds.NG.requestScoreBoards","io/newgrounds/NG.hx",307,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_331_onBoardsReceived,"io.newgrounds.NG","onBoardsReceived",0x53c41468,"io.newgrounds.NG.onBoardsReceived","io/newgrounds/NG.hx",331,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_363_timer,"io.newgrounds.NG","timer",0x50df0e4a,"io.newgrounds.NG.timer","io/newgrounds/NG.hx",363,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_359_timer,"io.newgrounds.NG","timer",0x50df0e4a,"io.newgrounds.NG.timer","io/newgrounds/NG.hx",359,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_85_create,"io.newgrounds.NG","create",0xcf8accd7,"io.newgrounds.NG.create","io/newgrounds/NG.hx",85,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_96_createAndCheckSession,"io.newgrounds.NG","createAndCheckSession",0xe8acc1ce,"io.newgrounds.NG.createAndCheckSession","io/newgrounds/NG.hx",96,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_373_getLoaderVar,"io.newgrounds.NG","getLoaderVar",0x36e6b539,"io.newgrounds.NG.getLoaderVar","io/newgrounds/NG.hx",373,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_394_getSessionId,"io.newgrounds.NG","getSessionId",0xf715b176,"io.newgrounds.NG.getSessionId","io/newgrounds/NG.hx",394,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_400_getHost,"io.newgrounds.NG","getHost",0xd01338e3,"io.newgrounds.NG.getHost","io/newgrounds/NG.hx",400,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_33_boot,"io.newgrounds.NG","boot",0x15c62d4d,"io.newgrounds.NG.boot","io/newgrounds/NG.hx",33,0x99d625cb)
HX_LOCAL_STACK_FRAME(_hx_pos_45e56eda36fb0427_398_boot,"io.newgrounds.NG","boot",0x15c62d4d,"io.newgrounds.NG.boot","io/newgrounds/NG.hx",398,0x99d625cb)
namespace io{
namespace newgrounds{

void NG_obj::__construct(::String __o_appId,::String sessionId){
::String appId = __o_appId.Default(HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"));
            	HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_70_new)
HXLINE(  72)		this->_session =  ::io::newgrounds::objects::Session_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),null());
HXLINE(  73)		this->onLogin =  ::io::newgrounds::utils::Dispatcher_obj::__alloc( HX_CTX );
HXLINE(  74)		this->onLogOut =  ::io::newgrounds::utils::Dispatcher_obj::__alloc( HX_CTX );
HXLINE(  75)		this->onMedalsLoaded =  ::io::newgrounds::utils::Dispatcher_obj::__alloc( HX_CTX );
HXLINE(  76)		this->onScoreBoardsLoaded =  ::io::newgrounds::utils::Dispatcher_obj::__alloc( HX_CTX );
HXLINE(  78)		super::__construct(appId,sessionId);
            	}

Dynamic NG_obj::__CreateEmpty() { return new NG_obj; }

void *NG_obj::_hx_vtable = 0;

Dynamic NG_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NG_obj > _hx_result = new NG_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NG_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x06ffa8e1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x06ffa8e1;
	} else {
		return inClassId==(int)0x3ce9874b;
	}
}

 ::Dynamic NG_obj::get_user(){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_39_get_user)
HXLINE(  41)		if (hx::IsNull( this->_session )) {
HXLINE(  42)			return null();
            		}
HXLINE(  44)		return this->_session->user;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NG_obj,get_user,return )

void NG_obj::checkInitialSession( ::io::newgrounds::objects::events::Response response){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_112_checkInitialSession)
HXDLIN( 112)		this->onSessionReceive(response,null(),null(),null());
            	}


void NG_obj::requestLogin( ::Dynamic onSuccess, ::Dynamic onFail, ::Dynamic onCancel){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::Dynamic,a2, ::Dynamic,f, ::Dynamic,a4, ::Dynamic,a3) HXARGC(1)
            		void _hx_run( ::io::newgrounds::objects::events::Response a1){
            			HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_137_requestLogin)
HXLINE( 137)			f(a1,a2,a3,a4);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_119_requestLogin)
HXLINE( 121)		if (this->attemptingLogin) {
HXLINE( 123)			this->logError(HX_("cannot request another login until the previous attempt is complete",86,49,52,0c),hx::SourceInfo(HX_("NG.hx",25,a8,52,18),123,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("requestLogin",9a,8b,c5,14)));
HXLINE( 124)			return;
            		}
HXLINE( 127)		if (this->loggedIn) {
HXLINE( 129)			this->logError(HX_("cannot log in, already logged in",89,90,59,9b),hx::SourceInfo(HX_("NG.hx",25,a8,52,18),129,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("requestLogin",9a,8b,c5,14)));
HXLINE( 130)			return;
            		}
HXLINE( 133)		this->attemptingLogin = true;
HXLINE( 134)		this->_loginCancelled = false;
HXLINE( 137)		 ::Dynamic f = this->onSessionReceive_dyn();
HXDLIN( 137)		 ::Dynamic a2 = onSuccess;
HXDLIN( 137)		 ::Dynamic a3 = onFail;
HXDLIN( 137)		 ::Dynamic a4 = onCancel;
HXDLIN( 137)		 ::Dynamic call =  ::Dynamic(new _hx_Closure_0(a2,f,a4,a3));
HXLINE( 136)		 ::io::newgrounds::Call call1 = this->calls->app->startSession(true)->addDataHandler(call);
HXLINE( 139)		if (hx::IsNotNull( onFail )) {
HXLINE( 140)			call1->addErrorHandler(onFail);
            		}
HXLINE( 142)		call1->send();
            	}


HX_DEFINE_DYNAMIC_FUNC3(NG_obj,requestLogin,(void))

void NG_obj::onSessionReceive( ::io::newgrounds::objects::events::Response response, ::Dynamic onSuccess, ::Dynamic onFail, ::Dynamic onCancel){
            	HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_150_onSessionReceive)
HXLINE( 152)		bool _hx_tmp;
HXDLIN( 152)		if (!(!(response->success))) {
HXLINE( 152)			_hx_tmp = !(response->result->success);
            		}
            		else {
HXLINE( 152)			_hx_tmp = true;
            		}
HXDLIN( 152)		if (_hx_tmp) {
HXLINE( 154)			if (hx::IsNotNull( onFail )) {
HXLINE( 155)				 ::io::newgrounds::objects::Error _hx_tmp1;
HXDLIN( 155)				if (!(response->success)) {
HXLINE( 155)					_hx_tmp1 = response->error;
            				}
            				else {
HXLINE( 155)					_hx_tmp1 = response->result->error;
            				}
HXDLIN( 155)				onFail(_hx_tmp1);
            			}
HXLINE( 157)			this->endLoginAndCall(null());
HXLINE( 158)			return;
            		}
HXLINE( 161)		this->_session->parse( ::Dynamic(response->result->data->__Field(HX_("session",56,17,98,93),hx::paccDynamic)));
HXLINE( 162)		this->set_sessionId(this->_session->id);
HXLINE( 164)		{
HXLINE( 164)			 ::Dynamic any = (HX_("session started - status: ",b4,cf,cd,a3) + this->_session->get_status());
HXDLIN( 164)			if (this->verbose) {
HXLINE( 164)				this->log(any,hx::SourceInfo(HX_("NG.hx",25,a8,52,18),164,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("onSessionReceive",ac,b6,9a,52)));
            			}
            		}
HXLINE( 166)		if ((this->_session->get_status() == HX_("request-login",ab,da,18,fe))) {
HXLINE( 168)			if (this->verbose) {
HXLINE( 168)				this->log((HX_("loading passport: ",1c,a3,0a,02) + this->_session->passportUrl),hx::SourceInfo(HX_("NG.hx",25,a8,52,18),168,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("onSessionReceive",ac,b6,9a,52)));
            			}
HXLINE( 169)			::openfl::_legacy::Lib_obj::getURL( ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,this->_session->passportUrl),HX_("_blank",95,26,d9,b0));
            		}
HXLINE( 172)		this->checkSession(null(),onSuccess,onCancel);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NG_obj,onSessionReceive,(void))

void NG_obj::checkSession( ::io::newgrounds::objects::events::Response response, ::Dynamic onSucceess, ::Dynamic onCancel){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_175_checkSession)
HXDLIN( 175)		 ::io::newgrounds::NG _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 177)		if (hx::IsNotNull( response )) {
HXLINE( 179)			bool _hx_tmp;
HXDLIN( 179)			if (!(!(response->success))) {
HXLINE( 179)				_hx_tmp = !(response->result->success);
            			}
            			else {
HXLINE( 179)				_hx_tmp = true;
            			}
HXDLIN( 179)			if (_hx_tmp) {
HXLINE( 181)				this->log(HX_("login cancelled via passport",2a,a4,ee,75),hx::SourceInfo(HX_("NG.hx",25,a8,52,18),181,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("checkSession",6e,cf,1e,81)));
HXLINE( 183)				this->endLoginAndCall(onCancel);
HXLINE( 184)				return;
            			}
HXLINE( 187)			this->_session->parse( ::Dynamic(response->result->data->__Field(HX_("session",56,17,98,93),hx::paccDynamic)));
            		}
HXLINE( 190)		if ((this->_session->get_status() == HX_("user-loaded",07,45,85,a0))) {
HXLINE( 192)			this->loggedIn = true;
HXLINE( 193)			this->endLoginAndCall(onSucceess);
HXLINE( 194)			this->onLogin->dispatch();
            		}
            		else {
HXLINE( 196)			if ((this->_session->get_status() == HX_("request-login",ab,da,18,fe))) {
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::Dynamic,a2, ::Dynamic,f, ::Dynamic,a3) HXARGC(1)
            				void _hx_run( ::io::newgrounds::objects::events::Response a1){
            					HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_199_checkSession)
HXLINE( 199)					f(a1,a2,a3);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1, ::Dynamic,onCancel, ::io::newgrounds::NG,_gthis, ::io::newgrounds::Call,call1) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_206_checkSession)
HXLINE( 206)					if (!(_gthis->_loginCancelled)) {
HXLINE( 207)						call1->send();
            					}
            					else {
HXLINE( 210)						_gthis->log(HX_("login cancelled via cancelLoginRequest",d8,42,ea,fc),hx::SourceInfo(HX_("NG.hx",25,a8,52,18),210,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("checkSession",6e,cf,1e,81)));
HXLINE( 211)						_gthis->endLoginAndCall(onCancel);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 199)				 ::Dynamic f = this->checkSession_dyn();
HXDLIN( 199)				 ::Dynamic a2 = onSucceess;
HXDLIN( 199)				 ::Dynamic a3 = onCancel;
HXDLIN( 199)				 ::Dynamic call =  ::Dynamic(new _hx_Closure_0(a2,f,a3));
HXLINE( 198)				 ::io::newgrounds::Call call1 = this->calls->app->checkSession()->addDataHandler(call);
HXLINE( 202)				this->timer(((Float)3.0), ::Dynamic(new _hx_Closure_1(onCancel,_gthis,call1)));
            			}
            			else {
HXLINE( 218)				this->endLoginAndCall(onCancel);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(NG_obj,checkSession,(void))

void NG_obj::cancelLoginRequest(){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_223_cancelLoginRequest)
HXDLIN( 223)		if (this->attemptingLogin) {
HXLINE( 224)			this->_loginCancelled = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NG_obj,cancelLoginRequest,(void))

void NG_obj::endLoginAndCall( ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_227_endLoginAndCall)
HXLINE( 229)		this->attemptingLogin = false;
HXLINE( 230)		this->_loginCancelled = false;
HXLINE( 232)		if (hx::IsNotNull( callback )) {
HXLINE( 233)			callback();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NG_obj,endLoginAndCall,(void))

void NG_obj::logOut( ::Dynamic onComplete){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_236_logOut)
HXLINE( 238)		 ::io::newgrounds::Call call = this->calls->app->endSession()->addSuccessHandler(this->onLogOutSuccessful_dyn());
HXLINE( 241)		if (hx::IsNotNull( onComplete )) {
HXLINE( 242)			call->addSuccessHandler(onComplete);
            		}
HXLINE( 244)		call->addSuccessHandler(this->onLogOut->dispatch_dyn())->send();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NG_obj,logOut,(void))

void NG_obj::onLogOutSuccessful(){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_248_onLogOutSuccessful)
HXLINE( 250)		this->_session->expire();
HXLINE( 251)		this->set_sessionId(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(NG_obj,onLogOutSuccessful,(void))

void NG_obj::requestMedals( ::Dynamic onSuccess, ::Dynamic onFail){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_258_requestMedals)
HXLINE( 260)		 ::io::newgrounds::Call call = this->calls->medal->getList()->addDataHandler(this->onMedalsReceived_dyn());
HXLINE( 263)		if (hx::IsNotNull( onSuccess )) {
HXLINE( 264)			call->addSuccessHandler(onSuccess);
            		}
HXLINE( 266)		if (hx::IsNotNull( onFail )) {
HXLINE( 267)			call->addErrorHandler(onFail);
            		}
HXLINE( 269)		call->send();
            	}


HX_DEFINE_DYNAMIC_FUNC2(NG_obj,requestMedals,(void))

void NG_obj::onMedalsReceived( ::io::newgrounds::objects::events::Response response){
            	HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_272_onMedalsReceived)
HXLINE( 274)		bool _hx_tmp;
HXDLIN( 274)		if (!(!(response->success))) {
HXLINE( 274)			_hx_tmp = !(response->result->success);
            		}
            		else {
HXLINE( 274)			_hx_tmp = true;
            		}
HXDLIN( 274)		if (_hx_tmp) {
HXLINE( 275)			return;
            		}
HXLINE( 277)		::Array< int > idList = ::Array_obj< int >::__new();
HXLINE( 279)		if (hx::IsNull( this->medals )) {
HXLINE( 281)			this->medals =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 283)			{
HXLINE( 283)				int _g = (int)0;
HXDLIN( 283)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(response->result->data->__Field(HX_("medals",9c,3a,c2,fe),hx::paccDynamic)) );
HXDLIN( 283)				while((_g < _g1->get_length())){
HXLINE( 283)					 ::Dynamic medalData = _g1->__get(_g);
HXDLIN( 283)					_g = (_g + (int)1);
HXLINE( 285)					 ::io::newgrounds::objects::Medal medal =  ::io::newgrounds::objects::Medal_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),medalData);
HXLINE( 286)					this->medals->set(medal->id,medal);
HXLINE( 287)					idList->push(medal->id);
            				}
            			}
            		}
            		else {
HXLINE( 291)			int _g2 = (int)0;
HXDLIN( 291)			::cpp::VirtualArray _g11 = ( (::cpp::VirtualArray)(response->result->data->__Field(HX_("medals",9c,3a,c2,fe),hx::paccDynamic)) );
HXDLIN( 291)			while((_g2 < _g11->get_length())){
HXLINE( 291)				 ::Dynamic medalData1 = _g11->__get(_g2);
HXDLIN( 291)				_g2 = (_g2 + (int)1);
HXLINE( 293)				this->medals->get( ::Dynamic(medalData1->__Field(HX_("id",db,5b,00,00),hx::paccDynamic))).StaticCast<  ::io::newgrounds::objects::Medal >()->parse(medalData1);
HXLINE( 294)				idList->push( ::Dynamic(medalData1->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)));
            			}
            		}
HXLINE( 298)		{
HXLINE( 298)			::String any = ((HX_("",00,00,00,00) + ( (::cpp::VirtualArray)(response->result->data->__Field(HX_("medals",9c,3a,c2,fe),hx::paccDynamic)) )->get_length()) + HX_(" Medals received [",60,82,7d,de));
HXDLIN( 298)			 ::Dynamic any1 = ((any + idList->join(HX_(", ",74,26,00,00))) + HX_("]",5d,00,00,00));
HXDLIN( 298)			if (this->verbose) {
HXLINE( 298)				this->log(any1,hx::SourceInfo(HX_("NG.hx",25,a8,52,18),298,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("onMedalsReceived",5c,45,ad,96)));
            			}
            		}
HXLINE( 300)		this->onMedalsLoaded->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NG_obj,onMedalsReceived,(void))

void NG_obj::requestScoreBoards( ::Dynamic onSuccess, ::Dynamic onFail){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_307_requestScoreBoards)
HXLINE( 309)		if (hx::IsNotNull( this->scoreBoards )) {
HXLINE( 311)			this->log(HX_("aborting scoreboard request, all scoreboards are loaded",76,36,16,7e),hx::SourceInfo(HX_("NG.hx",25,a8,52,18),311,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("requestScoreBoards",f0,68,0d,d6)));
HXLINE( 313)			if (hx::IsNotNull( onSuccess )) {
HXLINE( 314)				onSuccess();
            			}
HXLINE( 316)			return;
            		}
HXLINE( 319)		 ::io::newgrounds::Call call = this->calls->scoreBoard->getBoards()->addDataHandler(this->onBoardsReceived_dyn());
HXLINE( 322)		if (hx::IsNotNull( onSuccess )) {
HXLINE( 323)			call->addSuccessHandler(onSuccess);
            		}
HXLINE( 325)		if (hx::IsNotNull( onFail )) {
HXLINE( 326)			call->addErrorHandler(onFail);
            		}
HXLINE( 328)		call->send();
            	}


HX_DEFINE_DYNAMIC_FUNC2(NG_obj,requestScoreBoards,(void))

void NG_obj::onBoardsReceived( ::io::newgrounds::objects::events::Response response){
            	HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_331_onBoardsReceived)
HXLINE( 333)		bool _hx_tmp;
HXDLIN( 333)		if (!(!(response->success))) {
HXLINE( 333)			_hx_tmp = !(response->result->success);
            		}
            		else {
HXLINE( 333)			_hx_tmp = true;
            		}
HXDLIN( 333)		if (_hx_tmp) {
HXLINE( 334)			return;
            		}
HXLINE( 336)		::Array< int > idList = ::Array_obj< int >::__new();
HXLINE( 338)		if (hx::IsNull( this->scoreBoards )) {
HXLINE( 340)			this->scoreBoards =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 342)			{
HXLINE( 342)				int _g = (int)0;
HXDLIN( 342)				::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(response->result->data->__Field(HX_("scoreboards",df,07,ba,f0),hx::paccDynamic)) );
HXDLIN( 342)				while((_g < _g1->get_length())){
HXLINE( 342)					 ::Dynamic boardData = _g1->__get(_g);
HXDLIN( 342)					_g = (_g + (int)1);
HXLINE( 344)					 ::io::newgrounds::objects::ScoreBoard board =  ::io::newgrounds::objects::ScoreBoard_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),boardData);
HXLINE( 345)					this->scoreBoards->set(board->id,board);
HXLINE( 346)					idList->push(board->id);
            				}
            			}
            		}
HXLINE( 350)		{
HXLINE( 350)			::String any = ((HX_("",00,00,00,00) + ( (::cpp::VirtualArray)(response->result->data->__Field(HX_("scoreboards",df,07,ba,f0),hx::paccDynamic)) )->get_length()) + HX_(" ScoreBoards received [",5d,76,da,01));
HXDLIN( 350)			 ::Dynamic any1 = ((any + idList->join(HX_(", ",74,26,00,00))) + HX_("]",5d,00,00,00));
HXDLIN( 350)			if (this->verbose) {
HXLINE( 350)				this->log(any1,hx::SourceInfo(HX_("NG.hx",25,a8,52,18),350,HX_("io.newgrounds.NG",33,4d,c0,0e),HX_("onBoardsReceived",cd,ae,f2,b9)));
            			}
            		}
HXLINE( 352)		this->onScoreBoardsLoaded->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NG_obj,onBoardsReceived,(void))

void NG_obj::timer(Float delay, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,func, ::openfl::_legacy::utils::Timer,timer, ::Dynamic,callback) HXARGC(1)
            		void _hx_run( ::openfl::events::TimerEvent e){
            			HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_363_timer)
HXLINE( 365)			timer->removeEventListener(HX_("timerComplete",9e,49,cc,97),func->__get((int)0),null());
HXLINE( 366)			callback();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_359_timer)
HXLINE( 361)		 ::openfl::_legacy::utils::Timer timer =  ::openfl::_legacy::utils::Timer_obj::__alloc( HX_CTX ,(delay * ((Float)1000.0)),(int)1);
HXLINE( 363)		::Array< ::Dynamic> func = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 363)		func[(int)0] =  ::Dynamic(new _hx_Closure_0(func,timer,callback));
HXDLIN( 363)		 ::Dynamic func1 = func->__get((int)0);
HXLINE( 369)		timer->addEventListener(HX_("timerComplete",9e,49,cc,97),func1,null(),null(),null());
HXLINE( 370)		timer->start();
            	}


HX_DEFINE_DYNAMIC_FUNC2(NG_obj,timer,(void))

 ::io::newgrounds::NG NG_obj::core;

 ::io::newgrounds::utils::Dispatcher NG_obj::onCoreReady;

void NG_obj::create(::String __o_appId,::String sessionId){
::String appId = __o_appId.Default(HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"));
            	HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_85_create)
HXLINE(  87)		::io::newgrounds::NG_obj::core =  ::io::newgrounds::NG_obj::__alloc( HX_CTX ,appId,sessionId);
HXLINE(  89)		::io::newgrounds::NG_obj::onCoreReady->dispatch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NG_obj,create,(void))

void NG_obj::createAndCheckSession( ::openfl::_legacy::display::Stage stage,::String __o_appId){
::String appId = __o_appId.Default(HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"));
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_96_createAndCheckSession)
HXLINE(  98)		::String sessionId = ::io::newgrounds::NG_obj::getSessionId(stage);
HXLINE(  99)		::io::newgrounds::NG_obj::create(appId,sessionId);
HXLINE( 101)		::io::newgrounds::NG_obj::core->host = ::io::newgrounds::NG_obj::getHost(stage);
HXLINE( 102)		if (hx::IsNotNull( sessionId )) {
HXLINE( 103)			::io::newgrounds::NG_obj::core->attemptingLogin = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NG_obj,createAndCheckSession,(void))

::String NG_obj::getLoaderVar( ::openfl::_legacy::display::Stage stage,::String name){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_373_getLoaderVar)
HXLINE( 375)		bool _hx_tmp;
HXDLIN( 375)		if (hx::IsNotNull( stage->loaderInfo )) {
HXLINE( 375)			_hx_tmp = ::Reflect_obj::hasField(stage->loaderInfo->parameters,name);
            		}
            		else {
HXLINE( 375)			_hx_tmp = false;
            		}
HXDLIN( 375)		if (_hx_tmp) {
HXLINE( 376)			return ( (::String)(::Reflect_obj::field(stage->loaderInfo->parameters,name)) );
            		}
HXLINE( 378)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NG_obj,getLoaderVar,return )

::String NG_obj::getSessionId( ::openfl::_legacy::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_394_getSessionId)
HXDLIN( 394)		::String _hx_tmp;
HXDLIN( 394)		bool _hx_tmp1;
HXDLIN( 394)		if (hx::IsNotNull( stage->loaderInfo )) {
HXDLIN( 394)			_hx_tmp1 = ::Reflect_obj::hasField(stage->loaderInfo->parameters,HX_("ngio_session_id",84,13,ca,70));
            		}
            		else {
HXDLIN( 394)			_hx_tmp1 = false;
            		}
HXDLIN( 394)		if (_hx_tmp1) {
HXDLIN( 394)			_hx_tmp = ( (::String)(::Reflect_obj::field(stage->loaderInfo->parameters,HX_("ngio_session_id",84,13,ca,70))) );
            		}
            		else {
HXDLIN( 394)			_hx_tmp = null();
            		}
HXDLIN( 394)		return _hx_tmp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NG_obj,getSessionId,return )

 ::EReg NG_obj::urlParser;

::String NG_obj::getHost( ::openfl::_legacy::display::Stage stage){
            	HX_STACKFRAME(&_hx_pos_45e56eda36fb0427_400_getHost)
HXLINE( 402)		if (hx::IsNull( stage->loaderInfo )) {
HXLINE( 403)			return HX_("<Unknown>",d0,4d,8a,b4);
            		}
HXLINE( 405)		::String url = stage->loaderInfo->url;
HXLINE( 407)		bool _hx_tmp;
HXDLIN( 407)		if (hx::IsNotNull( url )) {
HXLINE( 407)			_hx_tmp = (url == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 407)			_hx_tmp = true;
            		}
HXDLIN( 407)		if (_hx_tmp) {
HXLINE( 408)			return HX_("<AppView>",34,4a,ea,b9);
            		}
HXLINE( 410)		if ((url.indexOf(HX_("file",7c,ce,bb,43),null()) == (int)0)) {
HXLINE( 411)			return HX_("<LocalHost>",c7,75,28,8e);
            		}
HXLINE( 413)		if (::io::newgrounds::NG_obj::urlParser->match(url)) {
HXLINE( 414)			return ::io::newgrounds::NG_obj::urlParser->matched((int)1);
            		}
HXLINE( 416)		return HX_("<Unknown>",d0,4d,8a,b4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NG_obj,getHost,return )


hx::ObjectPtr< NG_obj > NG_obj::__new(::String __o_appId,::String sessionId) {
	hx::ObjectPtr< NG_obj > __this = new NG_obj();
	__this->__construct(__o_appId,sessionId);
	return __this;
}

hx::ObjectPtr< NG_obj > NG_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_appId,::String sessionId) {
	NG_obj *__this = (NG_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NG_obj), true, "io.newgrounds.NG"));
	*(void **)__this = NG_obj::_hx_vtable;
	io::newgrounds::NGLite_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(__o_appId,sessionId);
	return __this;
}

NG_obj::NG_obj()
{
}

void NG_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NG);
	HX_MARK_MEMBER_NAME(medals,"medals");
	HX_MARK_MEMBER_NAME(scoreBoards,"scoreBoards");
	HX_MARK_MEMBER_NAME(onLogin,"onLogin");
	HX_MARK_MEMBER_NAME(onLogOut,"onLogOut");
	HX_MARK_MEMBER_NAME(onMedalsLoaded,"onMedalsLoaded");
	HX_MARK_MEMBER_NAME(onScoreBoardsLoaded,"onScoreBoardsLoaded");
	HX_MARK_MEMBER_NAME(loggedIn,"loggedIn");
	HX_MARK_MEMBER_NAME(attemptingLogin,"attemptingLogin");
	HX_MARK_MEMBER_NAME(_loginCancelled,"_loginCancelled");
	HX_MARK_MEMBER_NAME(_session,"_session");
	 ::io::newgrounds::NGLite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NG_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(medals,"medals");
	HX_VISIT_MEMBER_NAME(scoreBoards,"scoreBoards");
	HX_VISIT_MEMBER_NAME(onLogin,"onLogin");
	HX_VISIT_MEMBER_NAME(onLogOut,"onLogOut");
	HX_VISIT_MEMBER_NAME(onMedalsLoaded,"onMedalsLoaded");
	HX_VISIT_MEMBER_NAME(onScoreBoardsLoaded,"onScoreBoardsLoaded");
	HX_VISIT_MEMBER_NAME(loggedIn,"loggedIn");
	HX_VISIT_MEMBER_NAME(attemptingLogin,"attemptingLogin");
	HX_VISIT_MEMBER_NAME(_loginCancelled,"_loginCancelled");
	HX_VISIT_MEMBER_NAME(_session,"_session");
	 ::io::newgrounds::NGLite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val NG_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_user() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"medals") ) { return hx::Val( medals ); }
		if (HX_FIELD_EQ(inName,"logOut") ) { return hx::Val( logOut_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onLogin") ) { return hx::Val( onLogin ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_user") ) { return hx::Val( get_user_dyn() ); }
		if (HX_FIELD_EQ(inName,"onLogOut") ) { return hx::Val( onLogOut ); }
		if (HX_FIELD_EQ(inName,"loggedIn") ) { return hx::Val( loggedIn ); }
		if (HX_FIELD_EQ(inName,"_session") ) { return hx::Val( _session ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scoreBoards") ) { return hx::Val( scoreBoards ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"requestLogin") ) { return hx::Val( requestLogin_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkSession") ) { return hx::Val( checkSession_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"requestMedals") ) { return hx::Val( requestMedals_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onMedalsLoaded") ) { return hx::Val( onMedalsLoaded ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"attemptingLogin") ) { return hx::Val( attemptingLogin ); }
		if (HX_FIELD_EQ(inName,"_loginCancelled") ) { return hx::Val( _loginCancelled ); }
		if (HX_FIELD_EQ(inName,"endLoginAndCall") ) { return hx::Val( endLoginAndCall_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onSessionReceive") ) { return hx::Val( onSessionReceive_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMedalsReceived") ) { return hx::Val( onMedalsReceived_dyn() ); }
		if (HX_FIELD_EQ(inName,"onBoardsReceived") ) { return hx::Val( onBoardsReceived_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cancelLoginRequest") ) { return hx::Val( cancelLoginRequest_dyn() ); }
		if (HX_FIELD_EQ(inName,"onLogOutSuccessful") ) { return hx::Val( onLogOutSuccessful_dyn() ); }
		if (HX_FIELD_EQ(inName,"requestScoreBoards") ) { return hx::Val( requestScoreBoards_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"onScoreBoardsLoaded") ) { return hx::Val( onScoreBoardsLoaded ); }
		if (HX_FIELD_EQ(inName,"checkInitialSession") ) { return hx::Val( checkInitialSession_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NG_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { outValue = ( core ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getHost") ) { outValue = getHost_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"urlParser") ) { outValue = ( urlParser ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onCoreReady") ) { outValue = ( onCoreReady ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getLoaderVar") ) { outValue = getLoaderVar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSessionId") ) { outValue = getSessionId_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createAndCheckSession") ) { outValue = createAndCheckSession_dyn(); return true; }
	}
	return false;
}

hx::Val NG_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"medals") ) { medals=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onLogin") ) { onLogin=inValue.Cast<  ::io::newgrounds::utils::Dispatcher >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onLogOut") ) { onLogOut=inValue.Cast<  ::io::newgrounds::utils::Dispatcher >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loggedIn") ) { loggedIn=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_session") ) { _session=inValue.Cast<  ::io::newgrounds::objects::Session >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scoreBoards") ) { scoreBoards=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onMedalsLoaded") ) { onMedalsLoaded=inValue.Cast<  ::io::newgrounds::utils::Dispatcher >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"attemptingLogin") ) { attemptingLogin=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_loginCancelled") ) { _loginCancelled=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"onScoreBoardsLoaded") ) { onScoreBoardsLoaded=inValue.Cast<  ::io::newgrounds::utils::Dispatcher >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool NG_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { core=ioValue.Cast<  ::io::newgrounds::NG >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"urlParser") ) { urlParser=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onCoreReady") ) { onCoreReady=ioValue.Cast<  ::io::newgrounds::utils::Dispatcher >(); return true; }
	}
	return false;
}

void NG_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("user","\x4b","\x92","\xad","\x4d"));
	outFields->push(HX_HCSTRING("medals","\x9c","\x3a","\xc2","\xfe"));
	outFields->push(HX_HCSTRING("scoreBoards","\xff","\x7b","\x4e","\x25"));
	outFields->push(HX_HCSTRING("onLogin","\xca","\x77","\x31","\x0f"));
	outFields->push(HX_HCSTRING("onLogOut","\xe9","\xa4","\x03","\x3c"));
	outFields->push(HX_HCSTRING("onMedalsLoaded","\x80","\x33","\x31","\x67"));
	outFields->push(HX_HCSTRING("onScoreBoardsLoaded","\x45","\xed","\xe3","\x95"));
	outFields->push(HX_HCSTRING("loggedIn","\x07","\x3b","\x2d","\xe9"));
	outFields->push(HX_HCSTRING("attemptingLogin","\x34","\x67","\x19","\x59"));
	outFields->push(HX_HCSTRING("_loginCancelled","\x87","\xe0","\x3b","\x5c"));
	outFields->push(HX_HCSTRING("_session","\xd7","\x70","\x50","\xcd"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NG_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(NG_obj,medals),HX_HCSTRING("medals","\x9c","\x3a","\xc2","\xfe")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(NG_obj,scoreBoards),HX_HCSTRING("scoreBoards","\xff","\x7b","\x4e","\x25")},
	{hx::fsObject /*::io::newgrounds::utils::Dispatcher*/ ,(int)offsetof(NG_obj,onLogin),HX_HCSTRING("onLogin","\xca","\x77","\x31","\x0f")},
	{hx::fsObject /*::io::newgrounds::utils::Dispatcher*/ ,(int)offsetof(NG_obj,onLogOut),HX_HCSTRING("onLogOut","\xe9","\xa4","\x03","\x3c")},
	{hx::fsObject /*::io::newgrounds::utils::Dispatcher*/ ,(int)offsetof(NG_obj,onMedalsLoaded),HX_HCSTRING("onMedalsLoaded","\x80","\x33","\x31","\x67")},
	{hx::fsObject /*::io::newgrounds::utils::Dispatcher*/ ,(int)offsetof(NG_obj,onScoreBoardsLoaded),HX_HCSTRING("onScoreBoardsLoaded","\x45","\xed","\xe3","\x95")},
	{hx::fsBool,(int)offsetof(NG_obj,loggedIn),HX_HCSTRING("loggedIn","\x07","\x3b","\x2d","\xe9")},
	{hx::fsBool,(int)offsetof(NG_obj,attemptingLogin),HX_HCSTRING("attemptingLogin","\x34","\x67","\x19","\x59")},
	{hx::fsBool,(int)offsetof(NG_obj,_loginCancelled),HX_HCSTRING("_loginCancelled","\x87","\xe0","\x3b","\x5c")},
	{hx::fsObject /*::io::newgrounds::objects::Session*/ ,(int)offsetof(NG_obj,_session),HX_HCSTRING("_session","\xd7","\x70","\x50","\xcd")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo NG_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::io::newgrounds::NG*/ ,(void *) &NG_obj::core,HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*::io::newgrounds::utils::Dispatcher*/ ,(void *) &NG_obj::onCoreReady,HX_HCSTRING("onCoreReady","\x65","\x5d","\x00","\xe3")},
	{hx::fsObject /*::EReg*/ ,(void *) &NG_obj::urlParser,HX_HCSTRING("urlParser","\xae","\xf9","\xf6","\x8d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NG_obj_sMemberFields[] = {
	HX_HCSTRING("get_user","\xd4","\x4d","\x68","\xcd"),
	HX_HCSTRING("medals","\x9c","\x3a","\xc2","\xfe"),
	HX_HCSTRING("scoreBoards","\xff","\x7b","\x4e","\x25"),
	HX_HCSTRING("onLogin","\xca","\x77","\x31","\x0f"),
	HX_HCSTRING("onLogOut","\xe9","\xa4","\x03","\x3c"),
	HX_HCSTRING("onMedalsLoaded","\x80","\x33","\x31","\x67"),
	HX_HCSTRING("onScoreBoardsLoaded","\x45","\xed","\xe3","\x95"),
	HX_HCSTRING("loggedIn","\x07","\x3b","\x2d","\xe9"),
	HX_HCSTRING("attemptingLogin","\x34","\x67","\x19","\x59"),
	HX_HCSTRING("_loginCancelled","\x87","\xe0","\x3b","\x5c"),
	HX_HCSTRING("_session","\xd7","\x70","\x50","\xcd"),
	HX_HCSTRING("checkInitialSession","\x1a","\x02","\x4a","\x8a"),
	HX_HCSTRING("requestLogin","\x9a","\x8b","\xc5","\x14"),
	HX_HCSTRING("onSessionReceive","\xac","\xb6","\x9a","\x52"),
	HX_HCSTRING("checkSession","\x6e","\xcf","\x1e","\x81"),
	HX_HCSTRING("cancelLoginRequest","\x80","\xa5","\x61","\x18"),
	HX_HCSTRING("endLoginAndCall","\x27","\x61","\xb7","\xd3"),
	HX_HCSTRING("logOut","\x6a","\xae","\x56","\x5c"),
	HX_HCSTRING("onLogOutSuccessful","\xa3","\xa8","\x22","\x1e"),
	HX_HCSTRING("requestMedals","\x4b","\x73","\x6c","\xba"),
	HX_HCSTRING("onMedalsReceived","\x5c","\x45","\xad","\x96"),
	HX_HCSTRING("requestScoreBoards","\xf0","\x68","\x0d","\xd6"),
	HX_HCSTRING("onBoardsReceived","\xcd","\xae","\xf2","\xb9"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	::String(null()) };

static void NG_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NG_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NG_obj::core,"core");
	HX_MARK_MEMBER_NAME(NG_obj::onCoreReady,"onCoreReady");
	HX_MARK_MEMBER_NAME(NG_obj::urlParser,"urlParser");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NG_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NG_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NG_obj::core,"core");
	HX_VISIT_MEMBER_NAME(NG_obj::onCoreReady,"onCoreReady");
	HX_VISIT_MEMBER_NAME(NG_obj::urlParser,"urlParser");
};

#endif

hx::Class NG_obj::__mClass;

static ::String NG_obj_sStaticFields[] = {
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("onCoreReady","\x65","\x5d","\x00","\xe3"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("createAndCheckSession","\x49","\x59","\x5b","\xb3"),
	HX_HCSTRING("getLoaderVar","\x1e","\xf9","\x74","\x0a"),
	HX_HCSTRING("getSessionId","\x5b","\xf5","\xa3","\xca"),
	HX_HCSTRING("urlParser","\xae","\xf9","\xf6","\x8d"),
	HX_HCSTRING("getHost","\x1e","\x7f","\x95","\x17"),
	::String(null())
};

void NG_obj::__register()
{
	hx::Object *dummy = new NG_obj;
	NG_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("io.newgrounds.NG","\x33","\x4d","\xc0","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NG_obj::__GetStatic;
	__mClass->mSetStaticField = &NG_obj::__SetStatic;
	__mClass->mMarkFunc = NG_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NG_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NG_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NG_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NG_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NG_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NG_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_33_boot)
HXDLIN(  33)		onCoreReady =  ::io::newgrounds::utils::Dispatcher_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_45e56eda36fb0427_398_boot)
HXDLIN( 398)		urlParser =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(?:http[s]?://)?([^:/\\s]+)(:[0-9]+)?((?:/\\w+)*/)([\\w\\-\\.]+[^#?\\s]+)([^#\\s]*)?(#[\\w\\-]+)?$",91,b6,f6,31),HX_("i",69,00,00,00));
            	}
}

} // end namespace io
} // end namespace newgrounds
