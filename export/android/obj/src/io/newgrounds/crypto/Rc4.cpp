// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_io_newgrounds_crypto_Rc4
#include <io/newgrounds/crypto/Rc4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cf73e025e0469b26_32_new,"io.newgrounds.crypto.Rc4","new",0xf4715d82,"io.newgrounds.crypto.Rc4.new","io/newgrounds/crypto/Rc4.hx",32,0x20dc4d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf73e025e0469b26_49_swap,"io.newgrounds.crypto.Rc4","swap",0xf21c1b31,"io.newgrounds.crypto.Rc4.swap","io/newgrounds/crypto/Rc4.hx",49,0x20dc4d4f)
HX_LOCAL_STACK_FRAME(_hx_pos_cf73e025e0469b26_55_crypt,"io.newgrounds.crypto.Rc4","crypt",0xacd68d10,"io.newgrounds.crypto.Rc4.crypt","io/newgrounds/crypto/Rc4.hx",55,0x20dc4d4f)
namespace io{
namespace newgrounds{
namespace crypto{

void Rc4_obj::__construct( ::haxe::io::Bytes key){
            	HX_STACKFRAME(&_hx_pos_cf73e025e0469b26_32_new)
HXLINE(  35)		this->index2 = (int)0;
HXLINE(  34)		this->index1 = (int)0;
HXLINE(  33)		this->perm = ::haxe::io::Bytes_obj::alloc((int)256);
HXLINE(  38)		{
HXLINE(  38)			int _g = (int)0;
HXDLIN(  38)			while((_g < (int)256)){
HXLINE(  38)				_g = (_g + (int)1);
HXDLIN(  38)				int i = (_g - (int)1);
HXLINE(  39)				this->perm->b[i] = i;
            			}
            		}
HXLINE(  42)		int j = (int)0;
HXLINE(  43)		{
HXLINE(  43)			int _g1 = (int)0;
HXDLIN(  43)			while((_g1 < (int)256)){
HXLINE(  43)				_g1 = (_g1 + (int)1);
HXDLIN(  43)				int i1 = (_g1 - (int)1);
HXLINE(  44)				int j1 = (j + this->perm->b->__get(i1));
HXDLIN(  44)				::Array< unsigned char > key1 = key->b;
HXDLIN(  44)				j = hx::Mod((j1 + key1->__get(hx::Mod(i1,key->length))),(int)256);
HXLINE(  45)				{
HXLINE(  45)					int temp = this->perm->b->__get(i1);
HXDLIN(  45)					::Array< unsigned char > _hx_tmp = this->perm->b;
HXDLIN(  45)					_hx_tmp[i1] = this->perm->b->__get(j);
HXDLIN(  45)					this->perm->b[j] = temp;
            				}
            			}
            		}
            	}

Dynamic Rc4_obj::__CreateEmpty() { return new Rc4_obj; }

void *Rc4_obj::_hx_vtable = 0;

Dynamic Rc4_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rc4_obj > _hx_result = new Rc4_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Rc4_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5715a650;
}

void Rc4_obj::swap(int i,int j){
            	HX_STACKFRAME(&_hx_pos_cf73e025e0469b26_49_swap)
HXLINE(  50)		int temp = this->perm->b->__get(i);
HXLINE(  51)		this->perm->b[i] = this->perm->b->__get(j);
HXLINE(  52)		this->perm->b[j] = temp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rc4_obj,swap,(void))

 ::haxe::io::Bytes Rc4_obj::crypt( ::haxe::io::Bytes input){
            	HX_STACKFRAME(&_hx_pos_cf73e025e0469b26_55_crypt)
HXLINE(  56)		 ::haxe::io::Bytes output = ::haxe::io::Bytes_obj::alloc(input->length);
HXLINE(  58)		{
HXLINE(  58)			int _g1 = (int)0;
HXDLIN(  58)			int _g = input->length;
HXDLIN(  58)			while((_g1 < _g)){
HXLINE(  58)				_g1 = (_g1 + (int)1);
HXDLIN(  58)				int i = (_g1 - (int)1);
HXLINE(  59)				this->index1 = hx::Mod((this->index1 + (int)1),(int)256);
HXLINE(  60)				this->index2 = hx::Mod((this->index2 + this->perm->b->__get(this->index1)),(int)256);
HXLINE(  61)				{
HXLINE(  61)					int i1 = this->index1;
HXDLIN(  61)					int j = this->index2;
HXDLIN(  61)					int temp = this->perm->b->__get(i1);
HXDLIN(  61)					this->perm->b[i1] = this->perm->b->__get(j);
HXDLIN(  61)					this->perm->b[j] = temp;
            				}
HXLINE(  62)				int j1 = hx::Mod((this->perm->b->__get(this->index1) + this->perm->b->__get(this->index2)),(int)256);
HXLINE(  63)				output->b[i] = ((int)input->b->__get(i) ^ (int)this->perm->b->__get(j1));
            			}
            		}
HXLINE(  66)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rc4_obj,crypt,return )


hx::ObjectPtr< Rc4_obj > Rc4_obj::__new( ::haxe::io::Bytes key) {
	hx::ObjectPtr< Rc4_obj > __this = new Rc4_obj();
	__this->__construct(key);
	return __this;
}

hx::ObjectPtr< Rc4_obj > Rc4_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::io::Bytes key) {
	Rc4_obj *__this = (Rc4_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Rc4_obj), true, "io.newgrounds.crypto.Rc4"));
	*(void **)__this = Rc4_obj::_hx_vtable;
	__this->__construct(key);
	return __this;
}

Rc4_obj::Rc4_obj()
{
}

void Rc4_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Rc4);
	HX_MARK_MEMBER_NAME(perm,"perm");
	HX_MARK_MEMBER_NAME(index1,"index1");
	HX_MARK_MEMBER_NAME(index2,"index2");
	HX_MARK_END_CLASS();
}

void Rc4_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(perm,"perm");
	HX_VISIT_MEMBER_NAME(index1,"index1");
	HX_VISIT_MEMBER_NAME(index2,"index2");
}

hx::Val Rc4_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"perm") ) { return hx::Val( perm ); }
		if (HX_FIELD_EQ(inName,"swap") ) { return hx::Val( swap_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"crypt") ) { return hx::Val( crypt_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"index1") ) { return hx::Val( index1 ); }
		if (HX_FIELD_EQ(inName,"index2") ) { return hx::Val( index2 ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Rc4_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"perm") ) { perm=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"index1") ) { index1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"index2") ) { index2=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rc4_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("perm","\xf0","\xec","\x54","\x4a"));
	outFields->push(HX_HCSTRING("index1","\xdf","\x14","\xf3","\x93"));
	outFields->push(HX_HCSTRING("index2","\xe0","\x14","\xf3","\x93"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Rc4_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Rc4_obj,perm),HX_HCSTRING("perm","\xf0","\xec","\x54","\x4a")},
	{hx::fsInt,(int)offsetof(Rc4_obj,index1),HX_HCSTRING("index1","\xdf","\x14","\xf3","\x93")},
	{hx::fsInt,(int)offsetof(Rc4_obj,index2),HX_HCSTRING("index2","\xe0","\x14","\xf3","\x93")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Rc4_obj_sStaticStorageInfo = 0;
#endif

static ::String Rc4_obj_sMemberFields[] = {
	HX_HCSTRING("perm","\xf0","\xec","\x54","\x4a"),
	HX_HCSTRING("index1","\xdf","\x14","\xf3","\x93"),
	HX_HCSTRING("index2","\xe0","\x14","\xf3","\x93"),
	HX_HCSTRING("swap","\x93","\x2a","\x5e","\x4c"),
	HX_HCSTRING("crypt","\x6e","\xf3","\x61","\x4c"),
	::String(null()) };

static void Rc4_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rc4_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rc4_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rc4_obj::__mClass,"__mClass");
};

#endif

hx::Class Rc4_obj::__mClass;

void Rc4_obj::__register()
{
	hx::Object *dummy = new Rc4_obj;
	Rc4_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("io.newgrounds.crypto.Rc4","\x90","\x34","\xd8","\x49");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Rc4_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rc4_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rc4_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rc4_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rc4_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rc4_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace io
} // end namespace newgrounds
} // end namespace crypto
