// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Session
#include <io/newgrounds/objects/Session.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_461fbae2a89da3ad_23_new,"io.newgrounds.objects.Session","new",0x703afa54,"io.newgrounds.objects.Session.new","io/newgrounds/objects/Session.hx",23,0xf7a96c7d)
HX_LOCAL_STACK_FRAME(_hx_pos_461fbae2a89da3ad_25_parse,"io.newgrounds.objects.Session","parse",0x54d21f27,"io.newgrounds.objects.Session.parse","io/newgrounds/objects/Session.hx",25,0xf7a96c7d)
HX_LOCAL_STACK_FRAME(_hx_pos_461fbae2a89da3ad_40_get_status,"io.newgrounds.objects.Session","get_status",0xf9d81387,"io.newgrounds.objects.Session.get_status","io/newgrounds/objects/Session.hx",40,0xf7a96c7d)
HX_LOCAL_STACK_FRAME(_hx_pos_461fbae2a89da3ad_51_expire,"io.newgrounds.objects.Session","expire",0xb9f98a6b,"io.newgrounds.objects.Session.expire","io/newgrounds/objects/Session.hx",51,0xf7a96c7d)
namespace io{
namespace newgrounds{
namespace objects{

void Session_obj::__construct( ::io::newgrounds::NGLite core, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_461fbae2a89da3ad_23_new)
HXDLIN(  23)		super::__construct(core,data);
            	}

Dynamic Session_obj::__CreateEmpty() { return new Session_obj; }

void *Session_obj::_hx_vtable = 0;

Dynamic Session_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Session_obj > _hx_result = new Session_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Session_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6479a07c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x6479a07c;
	} else {
		return inClassId==(int)0x7fb704e5;
	}
}

void Session_obj::parse( ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_461fbae2a89da3ad_25_parse)
HXLINE(  27)		this->id = ( (::String)(data->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXLINE(  28)		this->expired = ( (bool)(data->__Field(HX_("expired",a5,5f,6a,25),hx::paccDynamic)) );
HXLINE(  29)		this->passportUrl = ( (::String)(data->__Field(HX_("passport_url",42,e6,1b,68),hx::paccDynamic)) );
HXLINE(  30)		this->remember = ( (bool)(data->__Field(HX_("remember",4d,8e,24,e5),hx::paccDynamic)) );
HXLINE(  33)		if (hx::IsNull( this->user )) {
HXLINE(  34)			this->user = data->__Field(HX_("user",4b,92,ad,4d),hx::paccDynamic);
            		}
HXLINE(  37)		this->super::parse(data);
            	}


::String Session_obj::get_status(){
            	HX_STACKFRAME(&_hx_pos_461fbae2a89da3ad_40_get_status)
HXLINE(  42)		bool _hx_tmp;
HXDLIN(  42)		bool _hx_tmp1;
HXDLIN(  42)		if (!(this->expired)) {
HXLINE(  42)			_hx_tmp1 = hx::IsNull( this->id );
            		}
            		else {
HXLINE(  42)			_hx_tmp1 = true;
            		}
HXDLIN(  42)		if (!(_hx_tmp1)) {
HXLINE(  42)			_hx_tmp = (this->id == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  42)			_hx_tmp = true;
            		}
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  43)			return HX_("session-expired",6e,cc,68,ac);
            		}
HXLINE(  45)		bool _hx_tmp2;
HXDLIN(  45)		bool _hx_tmp3;
HXDLIN(  45)		if (hx::IsNotNull( this->user )) {
HXLINE(  45)			_hx_tmp3 = hx::IsNotNull( ( (::String)(this->user->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) );
            		}
            		else {
HXLINE(  45)			_hx_tmp3 = false;
            		}
HXDLIN(  45)		if (_hx_tmp3) {
HXLINE(  45)			_hx_tmp2 = (( (::String)(this->user->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  45)			_hx_tmp2 = false;
            		}
HXDLIN(  45)		if (_hx_tmp2) {
HXLINE(  46)			return HX_("user-loaded",07,45,85,a0);
            		}
HXLINE(  48)		return HX_("request-login",ab,da,18,fe);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,get_status,return )

void Session_obj::expire(){
            	HX_STACKFRAME(&_hx_pos_461fbae2a89da3ad_51_expire)
HXLINE(  53)		this->expired = true;
HXLINE(  54)		this->id = null();
HXLINE(  55)		this->user = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Session_obj,expire,(void))


hx::ObjectPtr< Session_obj > Session_obj::__new( ::io::newgrounds::NGLite core, ::Dynamic data) {
	hx::ObjectPtr< Session_obj > __this = new Session_obj();
	__this->__construct(core,data);
	return __this;
}

hx::ObjectPtr< Session_obj > Session_obj::__alloc(hx::Ctx *_hx_ctx, ::io::newgrounds::NGLite core, ::Dynamic data) {
	Session_obj *__this = (Session_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Session_obj), true, "io.newgrounds.objects.Session"));
	*(void **)__this = Session_obj::_hx_vtable;
	__this->__construct(core,data);
	return __this;
}

Session_obj::Session_obj()
{
}

void Session_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Session);
	HX_MARK_MEMBER_NAME(expired,"expired");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(passportUrl,"passportUrl");
	HX_MARK_MEMBER_NAME(remember,"remember");
	HX_MARK_MEMBER_NAME(user,"user");
	 ::io::newgrounds::objects::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Session_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(expired,"expired");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(passportUrl,"passportUrl");
	HX_VISIT_MEMBER_NAME(remember,"remember");
	HX_VISIT_MEMBER_NAME(user,"user");
	 ::io::newgrounds::objects::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Session_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { return hx::Val( user ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_status() ); }
		if (HX_FIELD_EQ(inName,"expire") ) { return hx::Val( expire_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"expired") ) { return hx::Val( expired ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"remember") ) { return hx::Val( remember ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_status") ) { return hx::Val( get_status_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"passportUrl") ) { return hx::Val( passportUrl ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Session_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { user=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"expired") ) { expired=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"remember") ) { remember=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"passportUrl") ) { passportUrl=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Session_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("expired","\xa5","\x5f","\x6a","\x25"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("passportUrl","\xbd","\x8d","\x3e","\x35"));
	outFields->push(HX_HCSTRING("remember","\x4d","\x8e","\x24","\xe5"));
	outFields->push(HX_HCSTRING("user","\x4b","\x92","\xad","\x4d"));
	outFields->push(HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Session_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Session_obj,expired),HX_HCSTRING("expired","\xa5","\x5f","\x6a","\x25")},
	{hx::fsString,(int)offsetof(Session_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsString,(int)offsetof(Session_obj,passportUrl),HX_HCSTRING("passportUrl","\xbd","\x8d","\x3e","\x35")},
	{hx::fsBool,(int)offsetof(Session_obj,remember),HX_HCSTRING("remember","\x4d","\x8e","\x24","\xe5")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Session_obj,user),HX_HCSTRING("user","\x4b","\x92","\xad","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Session_obj_sStaticStorageInfo = 0;
#endif

static ::String Session_obj_sMemberFields[] = {
	HX_HCSTRING("expired","\xa5","\x5f","\x6a","\x25"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("passportUrl","\xbd","\x8d","\x3e","\x35"),
	HX_HCSTRING("remember","\x4d","\x8e","\x24","\xe5"),
	HX_HCSTRING("user","\x4b","\x92","\xad","\x4d"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("get_status","\xfb","\x56","\x83","\xf6"),
	HX_HCSTRING("expire","\xdf","\x03","\x79","\xc4"),
	::String(null()) };

static void Session_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Session_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Session_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Session_obj::__mClass,"__mClass");
};

#endif

hx::Class Session_obj::__mClass;

void Session_obj::__register()
{
	hx::Object *dummy = new Session_obj;
	Session_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("io.newgrounds.objects.Session","\x62","\x80","\xfa","\x94");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Session_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Session_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Session_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Session_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Session_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Session_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace io
} // end namespace newgrounds
} // end namespace objects
