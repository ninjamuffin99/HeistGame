// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Error
#include <io/newgrounds/objects/Error.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_events_Response
#include <io/newgrounds/objects/events/Response.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_events_Result
#include <io/newgrounds/objects/events/Result.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b593eefc960f042c_20_new,"io.newgrounds.objects.events.Response","new",0x1c92c5b4,"io.newgrounds.objects.events.Response.new","io/newgrounds/objects/events/Response.hx",20,0xd9a6e3bc)
namespace io{
namespace newgrounds{
namespace objects{
namespace events{

void Response_obj::__construct( ::io::newgrounds::NGLite core,::String reply){
            	HX_GC_STACKFRAME(&_hx_pos_b593eefc960f042c_20_new)
HXLINE(  22)		 ::Dynamic data;
HXLINE(  24)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  25)			data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,reply)->parseRec();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  29)				data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,((HX_("{\"success\":false,\"error\":{\"message\":\"",85,05,75,f0) + ::Std_obj::string(reply)) + HX_("\",\"code\":0}}",53,c8,4e,26)))->parseRec();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  32)		this->success = ( (bool)(data->__Field(HX_("success",c3,25,4e,b8),hx::paccDynamic)) );
HXLINE(  33)		this->debug = data->__Field(HX_("debug",53,52,1f,d7),hx::paccDynamic);
HXLINE(  35)		if (!(this->success)) {
HXLINE(  36)			this->error =  ::io::newgrounds::objects::Error_obj::__alloc( HX_CTX , ::Dynamic( ::Dynamic(data->__Field(HX_("error",c8,cb,29,73),hx::paccDynamic))->__Field(HX_("message",c7,35,11,9a),hx::paccDynamic)), ::Dynamic( ::Dynamic(data->__Field(HX_("error",c8,cb,29,73),hx::paccDynamic))->__Field(HX_("code",2d,b1,c4,41),hx::paccDynamic)));
HXLINE(  37)			 ::Dynamic core1 = core->logError;
HXDLIN(  37)			::String _hx_tmp = (HX_("Call unseccessful: ",6b,6c,5c,b6) + ::Std_obj::string(this->error));
HXDLIN(  37)			core1(_hx_tmp,hx::SourceInfo(HX_("Response.hx",bd,72,2e,6a),37,HX_("io.newgrounds.objects.events.Response",c2,1b,f1,2b),HX_("new",60,d0,53,00)));
HXLINE(  38)			return;
            		}
HXLINE(  41)		this->result =  ::io::newgrounds::objects::events::Result_obj::__alloc( HX_CTX ,core, ::Dynamic(data->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)));
            	}

Dynamic Response_obj::__CreateEmpty() { return new Response_obj; }

void *Response_obj::_hx_vtable = 0;

Dynamic Response_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Response_obj > _hx_result = new Response_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Response_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7131a57c;
}


hx::ObjectPtr< Response_obj > Response_obj::__new( ::io::newgrounds::NGLite core,::String reply) {
	hx::ObjectPtr< Response_obj > __this = new Response_obj();
	__this->__construct(core,reply);
	return __this;
}

hx::ObjectPtr< Response_obj > Response_obj::__alloc(hx::Ctx *_hx_ctx, ::io::newgrounds::NGLite core,::String reply) {
	Response_obj *__this = (Response_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Response_obj), true, "io.newgrounds.objects.events.Response"));
	*(void **)__this = Response_obj::_hx_vtable;
	__this->__construct(core,reply);
	return __this;
}

Response_obj::Response_obj()
{
}

void Response_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Response);
	HX_MARK_MEMBER_NAME(success,"success");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(debug,"debug");
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_END_CLASS();
}

void Response_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(success,"success");
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(debug,"debug");
	HX_VISIT_MEMBER_NAME(result,"result");
}

hx::Val Response_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error ); }
		if (HX_FIELD_EQ(inName,"debug") ) { return hx::Val( debug ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"success") ) { return hx::Val( success ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Response_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast<  ::io::newgrounds::objects::Error >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debug") ) { debug=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::io::newgrounds::objects::events::Result >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"success") ) { success=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Response_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8"));
	outFields->push(HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"));
	outFields->push(HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"));
	outFields->push(HX_HCSTRING("result","\xdd","\x68","\x84","\x08"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Response_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Response_obj,success),HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8")},
	{hx::fsObject /*::io::newgrounds::objects::Error*/ ,(int)offsetof(Response_obj,error),HX_HCSTRING("error","\xc8","\xcb","\x29","\x73")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Response_obj,debug),HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7")},
	{hx::fsObject /*::io::newgrounds::objects::events::Result*/ ,(int)offsetof(Response_obj,result),HX_HCSTRING("result","\xdd","\x68","\x84","\x08")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Response_obj_sStaticStorageInfo = 0;
#endif

static ::String Response_obj_sMemberFields[] = {
	HX_HCSTRING("success","\xc3","\x25","\x4e","\xb8"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"),
	HX_HCSTRING("result","\xdd","\x68","\x84","\x08"),
	::String(null()) };

static void Response_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Response_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Response_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Response_obj::__mClass,"__mClass");
};

#endif

hx::Class Response_obj::__mClass;

void Response_obj::__register()
{
	hx::Object *dummy = new Response_obj;
	Response_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("io.newgrounds.objects.events.Response","\xc2","\x1b","\xf1","\x2b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Response_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Response_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Response_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Response_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Response_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Response_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace io
} // end namespace newgrounds
} // end namespace objects
} // end namespace events
