// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_io_newgrounds_Call
#include <io/newgrounds/Call.h>
#endif
#ifndef INCLUDED_io_newgrounds_ICallable
#include <io/newgrounds/ICallable.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_AppComponent
#include <io/newgrounds/components/AppComponent.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_Component
#include <io/newgrounds/components/Component.h>
#endif
#ifndef INCLUDED_io_newgrounds_components_ComponentList
#include <io/newgrounds/components/ComponentList.h>
#endif
#ifndef INCLUDED_io_newgrounds_crypto_Rc4
#include <io/newgrounds/crypto/Rc4.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Error
#include <io/newgrounds/objects/Error.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_events_Response
#include <io/newgrounds/objects/events/Response.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_events_Result
#include <io/newgrounds/objects/events/Result.h>
#endif
#ifndef INCLUDED_io_newgrounds_utils_Dispatcher
#include <io/newgrounds/utils/Dispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6580f5bc70768aad_26_new,"io.newgrounds.NGLite","new",0x224ee173,"io.newgrounds.NGLite.new","io/newgrounds/NGLite.hx",26,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_102_queueCall_io_newgrounds_Call_T,"io.newgrounds.NGLite","queueCall_io_newgrounds_Call_T",0x12d91f6a,"io.newgrounds.NGLite.queueCall_io_newgrounds_Call_T","io/newgrounds/NGLite.hx",102,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_116_markCallPending_io_newgrounds_Call_T,"io.newgrounds.NGLite","markCallPending_io_newgrounds_Call_T",0xe926968d,"io.newgrounds.NGLite.markCallPending_io_newgrounds_Call_T","io/newgrounds/NGLite.hx",116,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_117_markCallPending_io_newgrounds_Call_T,"io.newgrounds.NGLite","markCallPending_io_newgrounds_Call_T",0xe926968d,"io.newgrounds.NGLite.markCallPending_io_newgrounds_Call_T","io/newgrounds/NGLite.hx",117,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_112_markCallPending_io_newgrounds_Call_T,"io.newgrounds.NGLite","markCallPending_io_newgrounds_Call_T",0xe926968d,"io.newgrounds.NGLite.markCallPending_io_newgrounds_Call_T","io/newgrounds/NGLite.hx",112,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_43_set_sessionId,"io.newgrounds.NGLite","set_sessionId",0xa1135587,"io.newgrounds.NGLite.set_sessionId","io/newgrounds/NGLite.hx",43,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_78_checkInitialSession,"io.newgrounds.NGLite","checkInitialSession",0x7b4fa92d,"io.newgrounds.NGLite.checkInitialSession","io/newgrounds/NGLite.hx",78,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_120_onCallComplete,"io.newgrounds.NGLite","onCallComplete",0x735bb503,"io.newgrounds.NGLite.onCallComplete","io/newgrounds/NGLite.hx",120,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_128_checkQueue,"io.newgrounds.NGLite","checkQueue",0xe99216f6,"io.newgrounds.NGLite.checkQueue","io/newgrounds/NGLite.hx",128,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_139___default_log,"io.newgrounds.NGLite","__default_log",0x4dd7ee79,"io.newgrounds.NGLite.__default_log","io/newgrounds/NGLite.hx",139,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_145_logVerbose,"io.newgrounds.NGLite","logVerbose",0x54258aab,"io.newgrounds.NGLite.logVerbose","io/newgrounds/NGLite.hx",145,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_152___default_logError,"io.newgrounds.NGLite","__default_logError",0x7e2f368f,"io.newgrounds.NGLite.__default_logError","io/newgrounds/NGLite.hx",152,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_156_assert,"io.newgrounds.NGLite","assert",0xa217e393,"io.newgrounds.NGLite.assert","io/newgrounds/NGLite.hx",156,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_174_initEncryption,"io.newgrounds.NGLite","initEncryption",0x05664180,"io.newgrounds.NGLite.initEncryption","io/newgrounds/NGLite.hx",174,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_177_initEncryption,"io.newgrounds.NGLite","initEncryption",0x05664180,"io.newgrounds.NGLite.initEncryption","io/newgrounds/NGLite.hx",177,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_182_encryptRc4,"io.newgrounds.NGLite","encryptRc4",0xcadfe54b,"io.newgrounds.NGLite.encryptRc4","io/newgrounds/NGLite.hx",182,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_86_create,"io.newgrounds.NGLite","create",0xd22403c9,"io.newgrounds.NGLite.create","io/newgrounds/NGLite.hx",86,0x2dcf2bbd)
HX_LOCAL_STACK_FRAME(_hx_pos_6580f5bc70768aad_29_boot,"io.newgrounds.NGLite","boot",0xdacf63bf,"io.newgrounds.NGLite.boot","io/newgrounds/NGLite.hx",29,0x2dcf2bbd)
namespace io{
namespace newgrounds{

void NGLite_obj::__construct(::String __o_appId,::String sessionId){
::String appId = __o_appId.Default(HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"));
            	HX_GC_STACKFRAME(&_hx_pos_6580f5bc70768aad_26_new)
HXLINE(  98)		this->_pendingCalls = ::Array_obj< ::Dynamic>::__new();
HXLINE(  97)		this->_queuedCalls = ::Array_obj< ::Dynamic>::__new();
HXLINE(  63)		this->appId = appId;
HXLINE(  64)		this->set_sessionId(sessionId);
HXLINE(  66)		this->calls =  ::io::newgrounds::components::ComponentList_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE(  68)		if (hx::IsNotNull( this->sessionId )) {
HXLINE(  70)			this->calls->app->checkSession()->addDataHandler(this->checkInitialSession_dyn())->send();
            		}
            	}

Dynamic NGLite_obj::__CreateEmpty() { return new NGLite_obj; }

void *NGLite_obj::_hx_vtable = 0;

Dynamic NGLite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NGLite_obj > _hx_result = new NGLite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NGLite_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x06ffa8e1;
}

void NGLite_obj::queueCall_io_newgrounds_Call_T( ::io::newgrounds::Call call){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_102_queueCall_io_newgrounds_Call_T)
HXLINE( 104)		if (this->verbose) {
HXLINE( 104)			this->log((HX_("queued - ",a0,ef,00,da) + call->component),hx::SourceInfo(HX_("NGLite.hx",17,e3,c4,83),104,HX_("io.newgrounds.NGLite",01,ac,66,d9),HX_("queueCall",cf,6e,62,c4)));
            		}
HXLINE( 106)		this->_queuedCalls->push(call);
HXLINE( 107)		this->checkQueue();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NGLite_obj,queueCall_io_newgrounds_Call_T,(void))

void NGLite_obj::markCallPending_io_newgrounds_Call_T( ::io::newgrounds::Call call){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::io::newgrounds::NGLite,_gthis, ::io::newgrounds::Call,call) HXARGC(1)
            		void _hx_run( ::io::newgrounds::objects::events::Response _){
            			HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_116_markCallPending_io_newgrounds_Call_T)
HXLINE( 116)			_gthis->onCallComplete(call);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::io::newgrounds::NGLite,_gthis, ::io::newgrounds::Call,call) HXARGC(1)
            		void _hx_run( ::io::newgrounds::objects::Error _1){
            			HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_117_markCallPending_io_newgrounds_Call_T)
HXLINE( 117)			_gthis->onCallComplete(call);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_112_markCallPending_io_newgrounds_Call_T)
HXDLIN( 112)		 ::io::newgrounds::NGLite _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 114)		this->_pendingCalls->push(call);
HXLINE( 116)		call->addDataHandler( ::Dynamic(new _hx_Closure_0(_gthis,call)));
HXLINE( 117)		call->addErrorHandler( ::Dynamic(new _hx_Closure_1(_gthis,call)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NGLite_obj,markCallPending_io_newgrounds_Call_T,(void))

::String NGLite_obj::set_sessionId(::String value){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_43_set_sessionId)
HXDLIN(  43)		::String _hx_tmp;
HXDLIN(  43)		if ((value == HX_("",00,00,00,00))) {
HXDLIN(  43)			_hx_tmp = null();
            		}
            		else {
HXDLIN(  43)			_hx_tmp = value;
            		}
HXDLIN(  43)		return (this->sessionId = _hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NGLite_obj,set_sessionId,return )

void NGLite_obj::checkInitialSession( ::io::newgrounds::objects::events::Response response){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_78_checkInitialSession)
HXDLIN(  78)		bool _hx_tmp;
HXDLIN(  78)		bool _hx_tmp1;
HXDLIN(  78)		if (!(!(response->success))) {
HXDLIN(  78)			_hx_tmp1 = response->result->success;
            		}
            		else {
HXDLIN(  78)			_hx_tmp1 = true;
            		}
HXDLIN(  78)		if (!(_hx_tmp1)) {
HXDLIN(  78)			_hx_tmp = ( (bool)( ::Dynamic(response->result->data->__Field(HX_("session",56,17,98,93),hx::paccDynamic))->__Field(HX_("expired",a5,5f,6a,25),hx::paccDynamic)) );
            		}
            		else {
HXDLIN(  78)			_hx_tmp = true;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  79)			this->set_sessionId(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NGLite_obj,checkInitialSession,(void))

void NGLite_obj::onCallComplete(::Dynamic call){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_120_onCallComplete)
HXLINE( 122)		this->_pendingCalls->remove(call);
HXLINE( 123)		this->checkQueue();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NGLite_obj,onCallComplete,(void))

void NGLite_obj::checkQueue(){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_128_checkQueue)
HXDLIN( 128)		bool _hx_tmp;
HXDLIN( 128)		if ((this->_pendingCalls->length == (int)0)) {
HXDLIN( 128)			_hx_tmp = (this->_queuedCalls->length > (int)0);
            		}
            		else {
HXDLIN( 128)			_hx_tmp = false;
            		}
HXDLIN( 128)		if (_hx_tmp) {
HXLINE( 129)			::io::newgrounds::ICallable_obj::send(this->_queuedCalls->shift());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NGLite_obj,checkQueue,(void))

HX_BEGIN_DEFAULT_FUNC(__default_log,NGLite_obj)
void _hx_run( ::Dynamic any, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_139___default_log)
HXDLIN( 139)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 139)		_hx_tmp((HX_("[Newgrounds API] :: ",bc,20,01,84) + ::Std_obj::string(any)),pos);
            	}
HX_END_LOCAL_FUNC2((void))
HX_END_DEFAULT_FUNC

void NGLite_obj::logVerbose( ::Dynamic any, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_145_logVerbose)
HXDLIN( 145)		if (this->verbose) {
HXLINE( 146)			this->log(any,pos);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(NGLite_obj,logVerbose,(void))

HX_BEGIN_DEFAULT_FUNC(__default_logError,NGLite_obj)
void _hx_run( ::Dynamic any, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_152___default_logError)
HXDLIN( 152)		 ::Dynamic _hx_tmp = ( ( ::io::newgrounds::NGLite)(__this) )->log;
HXDLIN( 152)		_hx_tmp((HX_("Error: ",4e,a8,5b,b7) + ::Std_obj::string(any)),pos);
            	}
HX_END_LOCAL_FUNC2((void))
HX_END_DEFAULT_FUNC

bool NGLite_obj::_hx_assert(bool condition, ::Dynamic msg, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_156_assert)
HXLINE( 157)		if (!(condition)) {
HXLINE( 158)			this->logError(msg,pos);
            		}
HXLINE( 160)		return condition;
            	}


HX_DEFINE_DYNAMIC_FUNC3(NGLite_obj,_hx_assert,return )

void NGLite_obj::initEncryption(::String key,::String __o_cipher,::String __o_format){
::String cipher = __o_cipher.Default(HX_HCSTRING("rc4","\x63","\xd7","\x56","\x00"));
::String format = __o_format.Default(HX_HCSTRING("base64","\x8f","\xfd","\x27","\x55"));
            	HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_174_initEncryption)
HXDLIN( 174)		if ((cipher == HX_("none",b8,12,0a,49))) {
HXLINE( 175)			this->encryptionHandler = null();
            		}
            		else {
HXLINE( 176)			if ((cipher == HX_("rc4",63,d7,56,00))) {
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,a2, ::Dynamic,f,::String,a1) HXARGC(1)
            				::String _hx_run(::String a3){
            					HX_STACKFRAME(&_hx_pos_6580f5bc70768aad_177_initEncryption)
HXLINE( 177)					return ( (::String)(f(a1,a2,a3)) );
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 177)				 ::Dynamic f = this->encryptRc4_dyn();
HXDLIN( 177)				::String a1 = key;
HXDLIN( 177)				::String a2 = format;
HXDLIN( 177)				this->encryptionHandler =  ::Dynamic(new _hx_Closure_0(a2,f,a1));
            			}
            			else {
HXLINE( 179)				HX_STACK_DO_THROW(HX_("aes not yet implemented",2c,4d,d9,a3));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(NGLite_obj,initEncryption,(void))

::String NGLite_obj::encryptRc4(::String key,::String format,::String data){
            	HX_GC_STACKFRAME(&_hx_pos_6580f5bc70768aad_182_encryptRc4)
HXLINE( 184)		if ((format == HX_("hex",db,42,4f,00))) {
HXLINE( 185)			HX_STACK_DO_THROW(HX_("hex format not yet implemented",79,74,67,ea));
            		}
HXLINE( 187)		 ::haxe::io::Bytes keyBytes;
HXLINE( 188)		if ((format == HX_("base64",8f,fd,27,55))) {
HXLINE( 189)			keyBytes = ::haxe::crypto::Base64_obj::decode(key,null());
            		}
            		else {
HXLINE( 191)			keyBytes = null();
            		}
HXLINE( 193)		 ::io::newgrounds::crypto::Rc4 dataBytes =  ::io::newgrounds::crypto::Rc4_obj::__alloc( HX_CTX ,keyBytes);
HXDLIN( 193)		 ::haxe::io::Bytes dataBytes1 = dataBytes->crypt(::haxe::io::Bytes_obj::ofString(data));
HXLINE( 195)		if ((format == HX_("base64",8f,fd,27,55))) {
HXLINE( 196)			return ::haxe::crypto::Base64_obj::encode(dataBytes1,null());
            		}
HXLINE( 198)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(NGLite_obj,encryptRc4,return )

 ::io::newgrounds::NGLite NGLite_obj::core;

 ::io::newgrounds::utils::Dispatcher NGLite_obj::onCoreReady;

void NGLite_obj::create(::String __o_appId,::String sessionId){
::String appId = __o_appId.Default(HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"));
            	HX_GC_STACKFRAME(&_hx_pos_6580f5bc70768aad_86_create)
HXLINE(  88)		::io::newgrounds::NGLite_obj::core =  ::io::newgrounds::NGLite_obj::__alloc( HX_CTX ,appId,sessionId);
HXLINE(  90)		::io::newgrounds::NGLite_obj::onCoreReady->dispatch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NGLite_obj,create,(void))


void NGLite_obj::__alloc_dynamic_functions(hx::Ctx *_hx_ctx,NGLite_obj *_hx_obj) {
	if (!_hx_obj->logError.mPtr) _hx_obj->logError = new __default_logError(_hx_obj);
	if (!_hx_obj->log.mPtr) _hx_obj->log = new __default_log(_hx_obj);
}
hx::ObjectPtr< NGLite_obj > NGLite_obj::__new(::String __o_appId,::String sessionId) {
	hx::ObjectPtr< NGLite_obj > __this = new NGLite_obj();
	__this->__construct(__o_appId,sessionId);
	return __this;
}

hx::ObjectPtr< NGLite_obj > NGLite_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_appId,::String sessionId) {
	NGLite_obj *__this = (NGLite_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NGLite_obj), true, "io.newgrounds.NGLite"));
	*(void **)__this = NGLite_obj::_hx_vtable;
	io::newgrounds::NGLite_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(__o_appId,sessionId);
	return __this;
}

NGLite_obj::NGLite_obj()
{
	logError = new __default_logError(this);
	log = new __default_log(this);
}

void NGLite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NGLite);
	HX_MARK_MEMBER_NAME(verbose,"verbose");
	HX_MARK_MEMBER_NAME(debug,"debug");
	HX_MARK_MEMBER_NAME(appId,"appId");
	HX_MARK_MEMBER_NAME(host,"host");
	HX_MARK_MEMBER_NAME(sessionId,"sessionId");
	HX_MARK_MEMBER_NAME(calls,"calls");
	HX_MARK_MEMBER_NAME(encryptionHandler,"encryptionHandler");
	HX_MARK_MEMBER_NAME(_queuedCalls,"_queuedCalls");
	HX_MARK_MEMBER_NAME(_pendingCalls,"_pendingCalls");
	HX_MARK_MEMBER_NAME(log,"log");
	HX_MARK_MEMBER_NAME(logError,"logError");
	HX_MARK_END_CLASS();
}

void NGLite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(verbose,"verbose");
	HX_VISIT_MEMBER_NAME(debug,"debug");
	HX_VISIT_MEMBER_NAME(appId,"appId");
	HX_VISIT_MEMBER_NAME(host,"host");
	HX_VISIT_MEMBER_NAME(sessionId,"sessionId");
	HX_VISIT_MEMBER_NAME(calls,"calls");
	HX_VISIT_MEMBER_NAME(encryptionHandler,"encryptionHandler");
	HX_VISIT_MEMBER_NAME(_queuedCalls,"_queuedCalls");
	HX_VISIT_MEMBER_NAME(_pendingCalls,"_pendingCalls");
	HX_VISIT_MEMBER_NAME(log,"log");
	HX_VISIT_MEMBER_NAME(logError,"logError");
}

hx::Val NGLite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { return hx::Val( log ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"host") ) { return hx::Val( host ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"debug") ) { return hx::Val( debug ); }
		if (HX_FIELD_EQ(inName,"appId") ) { return hx::Val( appId ); }
		if (HX_FIELD_EQ(inName,"calls") ) { return hx::Val( calls ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"assert") ) { return hx::Val( _hx_assert_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { return hx::Val( verbose ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"logError") ) { return hx::Val( logError ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sessionId") ) { return hx::Val( sessionId ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"checkQueue") ) { return hx::Val( checkQueue_dyn() ); }
		if (HX_FIELD_EQ(inName,"logVerbose") ) { return hx::Val( logVerbose_dyn() ); }
		if (HX_FIELD_EQ(inName,"encryptRc4") ) { return hx::Val( encryptRc4_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_queuedCalls") ) { return hx::Val( _queuedCalls ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_sessionId") ) { return hx::Val( set_sessionId_dyn() ); }
		if (HX_FIELD_EQ(inName,"_pendingCalls") ) { return hx::Val( _pendingCalls ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onCallComplete") ) { return hx::Val( onCallComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"initEncryption") ) { return hx::Val( initEncryption_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"encryptionHandler") ) { return hx::Val( encryptionHandler ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"checkInitialSession") ) { return hx::Val( checkInitialSession_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"queueCall_io_newgrounds_Call_T") ) { return hx::Val( queueCall_io_newgrounds_Call_T_dyn() ); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"markCallPending_io_newgrounds_Call_T") ) { return hx::Val( markCallPending_io_newgrounds_Call_T_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NGLite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { outValue = ( core ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onCoreReady") ) { outValue = ( onCoreReady ); return true; }
	}
	return false;
}

hx::Val NGLite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"log") ) { log=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"host") ) { host=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"debug") ) { debug=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"appId") ) { appId=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"calls") ) { calls=inValue.Cast<  ::io::newgrounds::components::ComponentList >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { verbose=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"logError") ) { logError=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"sessionId") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sessionId(inValue.Cast< ::String >()) );sessionId=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_queuedCalls") ) { _queuedCalls=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_pendingCalls") ) { _pendingCalls=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"encryptionHandler") ) { encryptionHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool NGLite_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"core") ) { core=ioValue.Cast<  ::io::newgrounds::NGLite >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onCoreReady") ) { onCoreReady=ioValue.Cast<  ::io::newgrounds::utils::Dispatcher >(); return true; }
	}
	return false;
}

void NGLite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"));
	outFields->push(HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"));
	outFields->push(HX_HCSTRING("appId","\xdc","\x66","\x3b","\x24"));
	outFields->push(HX_HCSTRING("host","\x68","\xcf","\x12","\x45"));
	outFields->push(HX_HCSTRING("sessionId","\xd1","\x58","\x4d","\xbb"));
	outFields->push(HX_HCSTRING("calls","\x15","\x72","\x1b","\x41"));
	outFields->push(HX_HCSTRING("_queuedCalls","\x63","\x35","\x7d","\xbf"));
	outFields->push(HX_HCSTRING("_pendingCalls","\x1d","\x41","\x30","\xdb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NGLite_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(NGLite_obj,verbose),HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71")},
	{hx::fsBool,(int)offsetof(NGLite_obj,debug),HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7")},
	{hx::fsString,(int)offsetof(NGLite_obj,appId),HX_HCSTRING("appId","\xdc","\x66","\x3b","\x24")},
	{hx::fsString,(int)offsetof(NGLite_obj,host),HX_HCSTRING("host","\x68","\xcf","\x12","\x45")},
	{hx::fsString,(int)offsetof(NGLite_obj,sessionId),HX_HCSTRING("sessionId","\xd1","\x58","\x4d","\xbb")},
	{hx::fsObject /*::io::newgrounds::components::ComponentList*/ ,(int)offsetof(NGLite_obj,calls),HX_HCSTRING("calls","\x15","\x72","\x1b","\x41")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NGLite_obj,encryptionHandler),HX_HCSTRING("encryptionHandler","\x87","\xe1","\xf0","\xab")},
	{hx::fsObject /*Array< ::io::newgrounds::ICallable >*/ ,(int)offsetof(NGLite_obj,_queuedCalls),HX_HCSTRING("_queuedCalls","\x63","\x35","\x7d","\xbf")},
	{hx::fsObject /*Array< ::io::newgrounds::ICallable >*/ ,(int)offsetof(NGLite_obj,_pendingCalls),HX_HCSTRING("_pendingCalls","\x1d","\x41","\x30","\xdb")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NGLite_obj,log),HX_HCSTRING("log","\x84","\x54","\x52","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NGLite_obj,logError),HX_HCSTRING("logError","\xa4","\x08","\x30","\x5e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo NGLite_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::io::newgrounds::NGLite*/ ,(void *) &NGLite_obj::core,HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41")},
	{hx::fsObject /*::io::newgrounds::utils::Dispatcher*/ ,(void *) &NGLite_obj::onCoreReady,HX_HCSTRING("onCoreReady","\x65","\x5d","\x00","\xe3")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NGLite_obj_sMemberFields[] = {
	HX_HCSTRING("queueCall_io_newgrounds_Call_T","\x9d","\x43","\x06","\x7e"),
	HX_HCSTRING("markCallPending_io_newgrounds_Call_T","\x00","\x63","\x8d","\xc1"),
	HX_HCSTRING("verbose","\x82","\xd7","\xb9","\x71"),
	HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"),
	HX_HCSTRING("appId","\xdc","\x66","\x3b","\x24"),
	HX_HCSTRING("host","\x68","\xcf","\x12","\x45"),
	HX_HCSTRING("sessionId","\xd1","\x58","\x4d","\xbb"),
	HX_HCSTRING("set_sessionId","\xb4","\x0e","\xb7","\xc1"),
	HX_HCSTRING("calls","\x15","\x72","\x1b","\x41"),
	HX_HCSTRING("encryptionHandler","\x87","\xe1","\xf0","\xab"),
	HX_HCSTRING("checkInitialSession","\x1a","\x02","\x4a","\x8a"),
	HX_HCSTRING("_queuedCalls","\x63","\x35","\x7d","\xbf"),
	HX_HCSTRING("_pendingCalls","\x1d","\x41","\x30","\xdb"),
	HX_HCSTRING("onCallComplete","\x36","\x03","\xfa","\xe1"),
	HX_HCSTRING("checkQueue","\xa9","\x8f","\xda","\x6d"),
	HX_HCSTRING("log","\x84","\x54","\x52","\x00"),
	HX_HCSTRING("logVerbose","\x5e","\x03","\x6e","\xd8"),
	HX_HCSTRING("logError","\xa4","\x08","\x30","\x5e"),
	HX_HCSTRING("assert","\xc6","\x46","\x03","\x4c"),
	HX_HCSTRING("initEncryption","\xb3","\x8f","\x04","\x74"),
	HX_HCSTRING("encryptRc4","\xfe","\x5d","\x28","\x4f"),
	::String(null()) };

static void NGLite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NGLite_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NGLite_obj::core,"core");
	HX_MARK_MEMBER_NAME(NGLite_obj::onCoreReady,"onCoreReady");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NGLite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NGLite_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NGLite_obj::core,"core");
	HX_VISIT_MEMBER_NAME(NGLite_obj::onCoreReady,"onCoreReady");
};

#endif

hx::Class NGLite_obj::__mClass;

static ::String NGLite_obj_sStaticFields[] = {
	HX_HCSTRING("core","\x5f","\xbd","\xc4","\x41"),
	HX_HCSTRING("onCoreReady","\x65","\x5d","\x00","\xe3"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	::String(null())
};

void NGLite_obj::__register()
{
	hx::Object *dummy = new NGLite_obj;
	NGLite_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("io.newgrounds.NGLite","\x01","\xac","\x66","\xd9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NGLite_obj::__GetStatic;
	__mClass->mSetStaticField = &NGLite_obj::__SetStatic;
	__mClass->mMarkFunc = NGLite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NGLite_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NGLite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NGLite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NGLite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NGLite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NGLite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NGLite_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_6580f5bc70768aad_29_boot)
HXDLIN(  29)		onCoreReady =  ::io::newgrounds::utils::Dispatcher_obj::__alloc( HX_CTX );
            	}
}

} // end namespace io
} // end namespace newgrounds
