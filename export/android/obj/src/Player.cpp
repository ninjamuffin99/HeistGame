// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_13_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",13,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)0,(int)1,(int)2,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_51_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",51,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_58_controls,"Player","controls",0xc9328d03,"Player.controls","Player.hx",58,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_4[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_6c4d5f81_5[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_6c4d5f81_6[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_6c4d5f81_7[] = {
	(int)39,(int)68,
};
static const int _hx_array_data_6c4d5f81_8[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_6c4d5f81_9[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_6c4d5f81_10[] = {
	(int)38,(int)87,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_190_mobileChecks,"Player","mobileChecks",0x93cc7dba,"Player.mobileChecks","Player.hx",190,0xa27fc9dd)

void Player_obj::__construct( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic){
 ::Dynamic X = __o_X.Default(0);
 ::Dynamic Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_13_new)
HXLINE(  31)		this->_upR = false;
HXLINE(  27)		this->boostTimer = ((Float)0.25);
HXLINE(  25)		this->_rightP = false;
HXLINE(  24)		this->_leftP = false;
HXLINE(  23)		this->_downP = false;
HXLINE(  22)		this->_upP = false;
HXLINE(  20)		this->_right = false;
HXLINE(  19)		this->_left = false;
HXLINE(  18)		this->_down = false;
HXLINE(  17)		this->_up = false;
HXLINE(  15)		this->speed = ((Float)180);
HXLINE(  35)		super::__construct(X,Y,SimpleGraphic);
HXLINE(  36)		this->loadGraphic(HX_("assets/images/spr_player.png",11,14,ef,82),true,(int)16,(int)16,null(),null());
HXLINE(  38)		int frameRate = (int)6;
HXLINE(  39)		this->animation->add(HX_("u",75,00,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,3),frameRate,null(),null(),null());
HXLINE(  40)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN(  40)		_hx_tmp->set_x(this->drag->set_y((int)200));
HXLINE(  42)		this->set_width((int)8);
HXLINE(  43)		this->offset->set_x((int)4);
HXLINE(  44)		this->set_height((int)8);
HXLINE(  45)		this->offset->set_y((int)6);
HXLINE(  47)		 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_51_update)
HXLINE(  52)		this->super::update(elapsed);
HXLINE(  53)		this->controls();
            	}


void Player_obj::controls(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_58_controls)
HXLINE(  59)		this->_up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_4,2),(int)1);
HXLINE(  60)		this->_down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_5,2),(int)1);
HXLINE(  61)		this->_left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_6,2),(int)1);
HXLINE(  62)		this->_right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_7,2),(int)1);
HXLINE(  64)		this->_upP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_8,2),(int)2);
HXLINE(  65)		this->_downP = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_9,2),(int)2);
HXLINE(  66)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  66)		int KeyArray;
HXDLIN(  66)		::String s = HX_("LEFT",07,d0,70,32);
HXDLIN(  66)		s = s.toUpperCase();
HXDLIN(  66)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE(  66)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE(  66)			KeyArray = (int)-1;
            		}
HXDLIN(  66)		::String s1 = HX_("A",41,00,00,00);
HXDLIN(  66)		s1 = s1.toUpperCase();
HXDLIN(  66)		int KeyArray1;
HXDLIN(  66)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE(  66)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE(  66)			KeyArray1 = (int)-1;
            		}
HXDLIN(  66)		this->_leftP = _this->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray)->init(1,KeyArray1),(int)2);
HXLINE(  67)		 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN(  67)		int KeyArray2;
HXDLIN(  67)		::String s2 = HX_("RIGHT",bc,43,52,67);
HXDLIN(  67)		s2 = s2.toUpperCase();
HXDLIN(  67)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE(  67)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE(  67)			KeyArray2 = (int)-1;
            		}
HXDLIN(  67)		::String s3 = HX_("D",44,00,00,00);
HXDLIN(  67)		s3 = s3.toUpperCase();
HXDLIN(  67)		int KeyArray3;
HXDLIN(  67)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) {
HXLINE(  67)			KeyArray3 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) );
            		}
            		else {
HXLINE(  67)			KeyArray3 = (int)-1;
            		}
HXDLIN(  67)		this->_rightP = _this1->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray2)->init(1,KeyArray3),(int)2);
HXLINE(  69)		this->_upR = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_10,2),(int)-1);
HXLINE(  71)		bool _hx_tmp;
HXDLIN(  71)		if (this->_up) {
HXLINE(  71)			_hx_tmp = this->_down;
            		}
            		else {
HXLINE(  71)			_hx_tmp = false;
            		}
HXDLIN(  71)		if (_hx_tmp) {
HXLINE(  72)			this->_up = (this->_down = false);
            		}
HXLINE(  73)		bool _hx_tmp1;
HXDLIN(  73)		if (this->_left) {
HXLINE(  73)			_hx_tmp1 = this->_right;
            		}
            		else {
HXLINE(  73)			_hx_tmp1 = false;
            		}
HXDLIN(  73)		if (_hx_tmp1) {
HXLINE(  74)			this->_left = (this->_right = false);
            		}
HXLINE(  81)		bool _hx_tmp2;
HXDLIN(  81)		if (!(this->_left)) {
HXLINE(  81)			_hx_tmp2 = this->_right;
            		}
            		else {
HXLINE(  81)			_hx_tmp2 = true;
            		}
HXDLIN(  81)		if (_hx_tmp2) {
HXLINE(  86)			Float mA = (int)0;
HXLINE( 107)			if (this->_left) {
HXLINE( 109)				this->set_facing((int)1);
HXLINE( 110)				mA = (int)180;
            			}
            			else {
HXLINE( 112)				if (this->_right) {
HXLINE( 114)					this->set_facing((int)16);
HXLINE( 115)					mA = (int)0;
            				}
            			}
HXLINE( 120)			this->velocity->set(this->speed,(int)0);
HXLINE( 121)			 ::flixel::math::FlxPoint _hx_tmp3 = this->velocity;
HXDLIN( 121)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 121)			point->_inPool = false;
HXDLIN( 121)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 121)			point1->_weak = true;
HXDLIN( 121)			_hx_tmp3->rotate(point1,mA);
            		}
            		else {
HXLINE( 141)			if (hx::IsNotNull( this->animation->_curAnim )) {
HXLINE( 147)				this->velocity->set((int)0,(int)0);
            			}
            		}
HXLINE( 150)		this->animation->play(HX_("u",75,00,00,00),null(),null(),null());
HXLINE( 153)		 ::Player _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 153)		_hx_tmp4->boostTimer = (_hx_tmp4->boostTimer - ::flixel::FlxG_obj::elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,controls,(void))

void Player_obj::mobileChecks(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_190_mobileChecks)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,mobileChecks,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(_up,"_up");
	HX_MARK_MEMBER_NAME(_down,"_down");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_upP,"_upP");
	HX_MARK_MEMBER_NAME(_downP,"_downP");
	HX_MARK_MEMBER_NAME(_leftP,"_leftP");
	HX_MARK_MEMBER_NAME(_rightP,"_rightP");
	HX_MARK_MEMBER_NAME(boostTimer,"boostTimer");
	HX_MARK_MEMBER_NAME(boostLorR,"boostLorR");
	HX_MARK_MEMBER_NAME(_upR,"_upR");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(_up,"_up");
	HX_VISIT_MEMBER_NAME(_down,"_down");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_upP,"_upP");
	HX_VISIT_MEMBER_NAME(_downP,"_downP");
	HX_VISIT_MEMBER_NAME(_leftP,"_leftP");
	HX_VISIT_MEMBER_NAME(_rightP,"_rightP");
	HX_VISIT_MEMBER_NAME(boostTimer,"boostTimer");
	HX_VISIT_MEMBER_NAME(boostLorR,"boostLorR");
	HX_VISIT_MEMBER_NAME(_upR,"_upR");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { return hx::Val( _up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { return hx::Val( _upP ); }
		if (HX_FIELD_EQ(inName,"_upR") ) { return hx::Val( _upR ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"_down") ) { return hx::Val( _down ); }
		if (HX_FIELD_EQ(inName,"_left") ) { return hx::Val( _left ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"_downP") ) { return hx::Val( _downP ); }
		if (HX_FIELD_EQ(inName,"_leftP") ) { return hx::Val( _leftP ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { return hx::Val( _rightP ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controls") ) { return hx::Val( controls_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boostLorR") ) { return hx::Val( boostLorR ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"boostTimer") ) { return hx::Val( boostTimer ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mobileChecks") ) { return hx::Val( mobileChecks_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { _up=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { _upP=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_upR") ) { _upR=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_down") ) { _down=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downP") ) { _downP=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftP") ) { _leftP=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { _rightP=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boostLorR") ) { boostLorR=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"boostTimer") ) { boostTimer=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("_up","\x7a","\x7c","\x48","\x00"));
	outFields->push(HX_HCSTRING("_down","\x41","\x14","\x7f","\xf5"));
	outFields->push(HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"));
	outFields->push(HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"));
	outFields->push(HX_HCSTRING("_upP","\x96","\x6e","\x24","\x3f"));
	outFields->push(HX_HCSTRING("_downP","\xef","\xa4","\xb2","\xd9"));
	outFields->push(HX_HCSTRING("_leftP","\xaa","\x45","\x3e","\x6e"));
	outFields->push(HX_HCSTRING("_rightP","\x93","\x66","\x9d","\xbc"));
	outFields->push(HX_HCSTRING("boostTimer","\xa2","\x49","\xfb","\x92"));
	outFields->push(HX_HCSTRING("boostLorR","\xa6","\xc9","\x2e","\x8d"));
	outFields->push(HX_HCSTRING("_upR","\x98","\x6e","\x24","\x3f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Player_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsBool,(int)offsetof(Player_obj,_up),HX_HCSTRING("_up","\x7a","\x7c","\x48","\x00")},
	{hx::fsBool,(int)offsetof(Player_obj,_down),HX_HCSTRING("_down","\x41","\x14","\x7f","\xf5")},
	{hx::fsBool,(int)offsetof(Player_obj,_left),HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa")},
	{hx::fsBool,(int)offsetof(Player_obj,_right),HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5")},
	{hx::fsBool,(int)offsetof(Player_obj,_upP),HX_HCSTRING("_upP","\x96","\x6e","\x24","\x3f")},
	{hx::fsBool,(int)offsetof(Player_obj,_downP),HX_HCSTRING("_downP","\xef","\xa4","\xb2","\xd9")},
	{hx::fsBool,(int)offsetof(Player_obj,_leftP),HX_HCSTRING("_leftP","\xaa","\x45","\x3e","\x6e")},
	{hx::fsBool,(int)offsetof(Player_obj,_rightP),HX_HCSTRING("_rightP","\x93","\x66","\x9d","\xbc")},
	{hx::fsFloat,(int)offsetof(Player_obj,boostTimer),HX_HCSTRING("boostTimer","\xa2","\x49","\xfb","\x92")},
	{hx::fsString,(int)offsetof(Player_obj,boostLorR),HX_HCSTRING("boostLorR","\xa6","\xc9","\x2e","\x8d")},
	{hx::fsBool,(int)offsetof(Player_obj,_upR),HX_HCSTRING("_upR","\x98","\x6e","\x24","\x3f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("_up","\x7a","\x7c","\x48","\x00"),
	HX_HCSTRING("_down","\x41","\x14","\x7f","\xf5"),
	HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"),
	HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"),
	HX_HCSTRING("_upP","\x96","\x6e","\x24","\x3f"),
	HX_HCSTRING("_downP","\xef","\xa4","\xb2","\xd9"),
	HX_HCSTRING("_leftP","\xaa","\x45","\x3e","\x6e"),
	HX_HCSTRING("_rightP","\x93","\x66","\x9d","\xbc"),
	HX_HCSTRING("boostTimer","\xa2","\x49","\xfb","\x92"),
	HX_HCSTRING("boostLorR","\xa6","\xc9","\x2e","\x8d"),
	HX_HCSTRING("_upR","\x98","\x6e","\x24","\x3f"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("controls","\x76","\x86","\xbc","\x37"),
	HX_HCSTRING("mobileChecks","\xad","\xac","\x5b","\x78"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

