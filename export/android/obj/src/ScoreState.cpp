// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_ScoreState
#include <ScoreState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouch
#include <flixel/input/touch/FlxTouch.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouchManager
#include <flixel/input/touch/FlxTouchManager.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Medal
#include <io/newgrounds/objects/Medal.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_ScoreBoard
#include <io/newgrounds/objects/ScoreBoard.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c98a2746b30e515d_23_new,"ScoreState","new",0x926cf9f1,"ScoreState.new","ScoreState.hx",23,0xfe5c4e9f)
HX_LOCAL_STACK_FRAME(_hx_pos_c98a2746b30e515d_30_create,"ScoreState","create",0xf92dce0b,"ScoreState.create","ScoreState.hx",30,0xfe5c4e9f)
HX_LOCAL_STACK_FRAME(_hx_pos_c98a2746b30e515d_116_update,"ScoreState","update",0x0423ed18,"ScoreState.update","ScoreState.hx",116,0xfe5c4e9f)

void ScoreState_obj::__construct(hx::Null< int >  __o_BGColor){
int BGColor = __o_BGColor.Default(0);
            	HX_STACKFRAME(&_hx_pos_c98a2746b30e515d_23_new)
HXLINE(  24)		this->persistentUpdate = true;
HXLINE(  26)		super::__construct(BGColor);
            	}

Dynamic ScoreState_obj::__CreateEmpty() { return new ScoreState_obj; }

void *ScoreState_obj::_hx_vtable = 0;

Dynamic ScoreState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ScoreState_obj > _hx_result = new ScoreState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ScoreState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			if (inClassId<=(int)0x0d1512e3) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0d1512e3;
			} else {
				return inClassId==(int)0x2335d9a7;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x7f681f43;
	}
}

void ScoreState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c98a2746b30e515d_30_create)
HXLINE(  37)		this->_grpText =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  38)		this->add(this->_grpText);
HXLINE(  40)		this->hallOfShame =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)8,(int)0,HX_("HALL OF SHAME",e2,03,f5,d0),(int)32,null());
HXLINE(  41)		this->hallOfShame->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  42)		this->_grpText->add(this->hallOfShame).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  44)		{
HXLINE(  44)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN(  44)			::haxe::Log_obj::trace = _this->processTraceData_dyn();
HXDLIN(  44)			_this->redirectTraces = true;
            		}
HXLINE(  46)		if (::NGio_obj::isLoggedIn) {
HXLINE(  49)			::io::newgrounds::NG_obj::core->scoreBoards->get((int)8004).StaticCast<  ::io::newgrounds::objects::ScoreBoard >()->requestScores((int)20,null(),null(),null(),null(),null());
HXLINE(  52)			int leaderBoardPlacement = (int)1;
HXLINE(  55)			{
HXLINE(  55)				int _g = (int)0;
HXDLIN(  55)				::Array< ::Dynamic> _g1 = ::io::newgrounds::NG_obj::core->scoreBoards->get((int)8004).StaticCast<  ::io::newgrounds::objects::ScoreBoard >()->scores;
HXDLIN(  55)				while((_g < _g1->length)){
HXLINE(  55)					 ::Dynamic score = _g1->__get(_g);
HXDLIN(  55)					_g = (_g + (int)1);
HXLINE(  57)					bool dev = false;
HXLINE(  58)					bool isPlayer = false;
HXLINE(  59)					::String userName = ( (::String)( ::Dynamic(score->__Field(HX_("user",4b,92,ad,4d),hx::paccDynamic))->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE(  61)					if ((( (::String)(::io::newgrounds::NG_obj::core->get_user()->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ) == ( (::String)( ::Dynamic(score->__Field(HX_("user",4b,92,ad,4d),hx::paccDynamic))->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ))) {
HXLINE(  63)						isPlayer = true;
HXLINE(  65)						 ::io::newgrounds::objects::Medal shameMedal = ::io::newgrounds::NG_obj::core->medals->get((int)54477).StaticCast<  ::io::newgrounds::objects::Medal >();
HXLINE(  66)						if (!(shameMedal->unlocked)) {
HXLINE(  67)							shameMedal->sendUnlock();
            						}
            					}
HXLINE(  71)					bool _hx_tmp;
HXDLIN(  71)					bool _hx_tmp1;
HXDLIN(  71)					if ((userName != HX_("ninjamuffin99",f7,4c,e5,00))) {
HXLINE(  71)						_hx_tmp1 = (userName == HX_("BrandyBuizel",3d,47,e6,dc));
            					}
            					else {
HXLINE(  71)						_hx_tmp1 = true;
            					}
HXDLIN(  71)					if (!(_hx_tmp1)) {
HXLINE(  71)						_hx_tmp = (userName == HX_("DIGIMIN",eb,52,af,4d));
            					}
            					else {
HXLINE(  71)						_hx_tmp = true;
            					}
HXDLIN(  71)					if (_hx_tmp) {
HXLINE(  73)						dev = true;
HXLINE(  74)						userName = (userName + HX_(" (dev)",bc,20,d9,15));
            					}
HXLINE(  77)					::String text = ::Std_obj::string(((((leaderBoardPlacement + HX_(". ",32,28,00,00)) + userName) + HX_(" - ",73,6f,18,00)) + ( (::String)(score->__Field(HX_("formatted_value",ae,16,f4,5b),hx::paccDynamic)) )));
HXLINE(  79)					int name = ((int)32 + ((int)34 * this->_grpText->group->members->get_length()));
HXDLIN(  79)					 ::flixel::text::FlxText name1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)20,name,(::flixel::FlxG_obj::width - (int)20),text,(int)24,null());
HXLINE(  80)					this->_grpText->add(name1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  82)					if (dev) {
HXLINE(  84)						name1->set_color((int)-256);
            					}
HXLINE(  87)					if (isPlayer) {
HXLINE(  89)						name1->set_color((int)-65536);
            					}
HXLINE(  93)					leaderBoardPlacement = (leaderBoardPlacement + (int)1);
HXLINE(  95)					 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  95)					_hx_tmp2((((HX_("score loaded user:",c2,a6,2d,48) + ( (::String)( ::Dynamic(score->__Field(HX_("user",4b,92,ad,4d),hx::paccDynamic))->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) )) + HX_(", score:",1c,ea,c5,4c)) + ( (::String)(score->__Field(HX_("formatted_value",ae,16,f4,5b),hx::paccDynamic)) )),hx::SourceInfo(HX_("ScoreState.hx",9f,4e,5c,fe),95,HX_("ScoreState",7f,2d,33,b6),HX_("create",fc,66,0f,7c)));
            				}
            			}
HXLINE(  98)			this->bountyTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::height - (int)112),(int)0,HX_("\nBOUNTIES\nn/a",89,2c,c8,97),(int)16,null());
HXLINE(  99)			this->bountyTxt->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 100)			this->bountyTxt->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 102)			this->bountyTxt->set_color((int)-256);
            		}
            		else {
HXLINE( 107)			{
HXLINE( 107)				 ::flixel::text::FlxText _g2 = this->hallOfShame;
HXDLIN( 107)				_g2->set_text((_g2->text + HX_("\n\nYou are not \nlogged into the NG API\n Head to settings!\n\n",ef,bd,82,18)));
            			}
HXLINE( 108)			this->hallOfShame->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 109)			this->hallOfShame->set_alignment(HX_("center",d5,25,db,05));
            		}
HXLINE( 112)		this->super::create();
            	}


void ScoreState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c98a2746b30e515d_116_update)
HXLINE( 117)		if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE( 119)			this->close();
            		}
HXLINE( 124)		{
HXLINE( 124)			int _g = (int)0;
HXDLIN( 124)			::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::touches->list;
HXDLIN( 124)			while((_g < _g1->length)){
HXLINE( 124)				 ::flixel::input::touch::FlxTouch touch = _g1->__get(_g).StaticCast<  ::flixel::input::touch::FlxTouch >();
HXDLIN( 124)				_g = (_g + (int)1);
HXLINE( 126)				if ((touch->input->current == (int)2)) {
HXLINE( 128)					this->close();
            				}
            			}
            		}
HXLINE( 133)		this->super::update(elapsed);
            	}



hx::ObjectPtr< ScoreState_obj > ScoreState_obj::__new(hx::Null< int >  __o_BGColor) {
	hx::ObjectPtr< ScoreState_obj > __this = new ScoreState_obj();
	__this->__construct(__o_BGColor);
	return __this;
}

hx::ObjectPtr< ScoreState_obj > ScoreState_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_BGColor) {
	ScoreState_obj *__this = (ScoreState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ScoreState_obj), true, "ScoreState"));
	*(void **)__this = ScoreState_obj::_hx_vtable;
	__this->__construct(__o_BGColor);
	return __this;
}

ScoreState_obj::ScoreState_obj()
{
}

void ScoreState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScoreState);
	HX_MARK_MEMBER_NAME(hallOfShame,"hallOfShame");
	HX_MARK_MEMBER_NAME(bountyTxt,"bountyTxt");
	HX_MARK_MEMBER_NAME(_grpText,"_grpText");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ScoreState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(hallOfShame,"hallOfShame");
	HX_VISIT_MEMBER_NAME(bountyTxt,"bountyTxt");
	HX_VISIT_MEMBER_NAME(_grpText,"_grpText");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ScoreState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_grpText") ) { return hx::Val( _grpText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bountyTxt") ) { return hx::Val( bountyTxt ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hallOfShame") ) { return hx::Val( hallOfShame ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ScoreState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_grpText") ) { _grpText=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bountyTxt") ) { bountyTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"hallOfShame") ) { hallOfShame=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScoreState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("hallOfShame","\x34","\x33","\x84","\x02"));
	outFields->push(HX_HCSTRING("bountyTxt","\xc5","\xe6","\x90","\xa4"));
	outFields->push(HX_HCSTRING("_grpText","\xb3","\x34","\x3e","\x3e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ScoreState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(ScoreState_obj,hallOfShame),HX_HCSTRING("hallOfShame","\x34","\x33","\x84","\x02")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(ScoreState_obj,bountyTxt),HX_HCSTRING("bountyTxt","\xc5","\xe6","\x90","\xa4")},
	{hx::fsObject /*::flixel::group::FlxTypedSpriteGroup*/ ,(int)offsetof(ScoreState_obj,_grpText),HX_HCSTRING("_grpText","\xb3","\x34","\x3e","\x3e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ScoreState_obj_sStaticStorageInfo = 0;
#endif

static ::String ScoreState_obj_sMemberFields[] = {
	HX_HCSTRING("hallOfShame","\x34","\x33","\x84","\x02"),
	HX_HCSTRING("bountyTxt","\xc5","\xe6","\x90","\xa4"),
	HX_HCSTRING("_grpText","\xb3","\x34","\x3e","\x3e"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void ScoreState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ScoreState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ScoreState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ScoreState_obj::__mClass,"__mClass");
};

#endif

hx::Class ScoreState_obj::__mClass;

void ScoreState_obj::__register()
{
	hx::Object *dummy = new ScoreState_obj;
	ScoreState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ScoreState","\x7f","\x2d","\x33","\xb6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ScoreState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ScoreState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ScoreState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ScoreState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScoreState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScoreState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

