// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Door
#include <Door.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_HighScore
#include <HighScore.h>
#endif
#ifndef INCLUDED_MashState
#include <MashState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_Outcome
#include <Outcome.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_SettingState
#include <SettingState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmoLoader
#include <flixel/addons/editors/ogmo/FlxOgmoLoader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Medal
#include <io/newgrounds/objects/Medal.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_ScoreBoard
#include <io/newgrounds/objects/ScoreBoard.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_29_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",29,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_74_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",74,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_137_onFocusLost,"PlayState","onFocusLost",0x4ad4322c,"PlayState.onFocusLost","PlayState.hx",137,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_149_initTilemap,"PlayState","initTilemap",0x0747ac6d,"PlayState.initTilemap","PlayState.hx",149,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_182_initHUD,"PlayState","initHUD",0x15c72576,"PlayState.initHUD","PlayState.hx",182,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_195_placeEntities,"PlayState","placeEntities",0xcb21ad57,"PlayState.placeEntities","PlayState.hx",195,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_222_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",222,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_311_updateEnemyPos,"PlayState","updateEnemyPos",0x83791546,"PlayState.updateEnemyPos","PlayState.hx",311,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_351_boost,"PlayState","boost",0x76b5a752,"PlayState.boost","PlayState.hx",351,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_375_checkTilemapPos,"PlayState","checkTilemapPos",0xeed88ddd,"PlayState.checkTilemapPos","PlayState.hx",375,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_380_checkWallPos,"PlayState","checkWallPos",0x9cbb2673,"PlayState.checkWallPos","PlayState.hx",380,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_390_updatePos,"PlayState","updatePos",0xbf34feba,"PlayState.updatePos","PlayState.hx",390,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_402_generateTilemap,"PlayState","generateTilemap",0xadbc6a68,"PlayState.generateTilemap","PlayState.hx",402,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_29_new)
HXLINE( 219)		this->godReached = false;
HXLINE( 217)		this->startingTimer = ((Float)4);
HXLINE( 216)		this->speedAccel = ((Float)1);
HXLINE( 134)		this->timesClickedOffScreen = (int)0;
HXLINE(  35)		this->playerYPosInit = ((Float)0);
HXLINE(  32)		this->maxSpeed = ((Float)9);
HXLINE(  31)		this->speed = ((Float)3);
HXLINE(  29)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_74_create)
HXLINE(  76)		{
HXLINE(  76)			 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN(  76)			::haxe::Log_obj::trace = _this->processTraceData_dyn();
HXDLIN(  76)			_this->redirectTraces = true;
            		}
HXLINE(  79)		::flixel::FlxG_obj::camera->set_zoom((int)3);
HXLINE(  80)		::flixel::FlxG_obj::camera->fade((int)-1,((Float)0.24),true,null(),null());
HXLINE(  88)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,(int)-16777216,null(),null());
HXLINE(  89)		this->bg->set_alpha(((Float)0.4));
HXLINE(  91)		this->_grpTilemaps =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  92)		this->add(this->_grpTilemaps);
HXLINE(  94)		this->_grpWalls =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  95)		this->add(this->_grpWalls);
HXLINE(  97)		this->_grpDoors =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  98)		this->add(this->_grpDoors);
HXLINE( 101)		this->_grpEntities =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 102)		this->add(this->_grpEntities);
HXLINE( 104)		this->_grpEnemies =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 105)		this->_grpEntities->add(this->_grpEnemies).StaticCast<  ::flixel::FlxObject >();
HXLINE( 107)		this->_player =  ::Player_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 108)		this->_grpEntities->add(this->_player).StaticCast<  ::flixel::FlxObject >();
HXLINE( 110)		this->initTilemap();
HXLINE( 113)		this->_camTarget =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->_player->x,this->_player->y,null());
HXLINE( 114)		this->_camTarget->makeGraphic((int)16,(int)16,(int)0,null(),null());
HXLINE( 115)		this->add(this->_camTarget);
HXLINE( 116)		::flixel::FlxG_obj::camera->follow(this->_camTarget,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),null());
HXLINE( 118)		 ::flixel::FlxSprite _hx_tmp = this->_camTarget;
HXDLIN( 118)		_hx_tmp->set_y((this->_player->y - (int)64));
HXLINE( 121)		this->initHUD();
HXLINE( 123)		{
HXLINE( 123)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 123)			_this1->x = (int)0;
HXDLIN( 123)			_this1->y = (int)-300;
HXDLIN( 123)			_this1->width = ::flixel::FlxG_obj::width;
HXDLIN( 123)			_this1->height = (::flixel::FlxG_obj::height * (int)2);
            		}
HXLINE( 128)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 128)		_hx_tmp1->playMusic(HX_("assets/music/Silverline.ogg",b8,62,77,88),((((Float)0.7) * ::SettingState_obj::musicVol) * ::SettingState_obj::masterVol),null(),null());
HXLINE( 131)		this->super::create();
            	}


void PlayState_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_137_onFocusLost)
HXLINE( 138)		 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 138)		_hx_tmp->timesClickedOffScreen = (_hx_tmp->timesClickedOffScreen + (int)1);
HXLINE( 140)		if ((this->timesClickedOffScreen >= (int)15)) {
HXLINE( 142)			::haxe::Log_obj::trace(HX_("cheater!",e1,dd,1d,8c),hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),142,HX_("PlayState",5d,83,c2,46),HX_("onFocusLost",bd,e4,85,41)));
            		}
HXLINE( 145)		this->super::onFocusLost();
            	}


void PlayState_obj::initTilemap(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_149_initTilemap)
HXLINE( 151)		this->_map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,HX_("assets/data/start.oel",71,38,f0,d5));
HXLINE( 152)		this->_map->loadEntities(this->placeEntities_dyn(),HX_("Entities",61,52,47,6c));
HXLINE( 154)		this->_mFloors = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Floor",ac,41,c4,95));
HXLINE( 155)		this->_grpTilemaps->add(this->_mFloors).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 157)		this->_mWalls = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Walls",09,7c,4c,58));
HXLINE( 158)		this->_grpWalls->add(this->_mWalls).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 161)		this->_map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,HX_("assets/data/chunk1.oel",85,00,f2,3b));
HXLINE( 163)		this->_mFloors2 = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Floor",ac,41,c4,95));
HXLINE( 164)		{
HXLINE( 164)			 ::flixel::tile::FlxTilemap _g = this->_mFloors2;
HXDLIN( 164)			_g->set_y((_g->y - (int)192));
            		}
HXLINE( 165)		this->_grpTilemaps->add(this->_mFloors2).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 167)		this->_mWalls2 = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Walls",09,7c,4c,58));
HXLINE( 168)		{
HXLINE( 168)			 ::flixel::tile::FlxTilemap _g1 = this->_mWalls2;
HXDLIN( 168)			_g1->set_y((_g1->y - (int)192));
            		}
HXLINE( 169)		this->_grpWalls->add(this->_mWalls2).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 171)		this->_mFloors3 = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Floor",ac,41,c4,95));
HXLINE( 172)		{
HXLINE( 172)			 ::flixel::tile::FlxTilemap _g2 = this->_mFloors3;
HXDLIN( 172)			_g2->set_y((_g2->y - (int)384));
            		}
HXLINE( 173)		this->_grpTilemaps->add(this->_mFloors3).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 175)		this->_mWalls3 = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,HX_("Walls",09,7c,4c,58));
HXLINE( 176)		{
HXLINE( 176)			 ::flixel::tile::FlxTilemap _g3 = this->_mWalls3;
HXDLIN( 176)			_g3->set_y((_g3->y - (int)384));
            		}
HXLINE( 177)		this->_grpWalls->add(this->_mWalls3).StaticCast<  ::flixel::tile::FlxTilemap >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,initTilemap,(void))

void PlayState_obj::initHUD(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_182_initHUD)
HXLINE( 183)		this->score = (int)0;
HXLINE( 185)		this->_txtScore =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)-18,(int)25,(int)0,HX_("",00,00,00,00),(int)8,null());
HXLINE( 186)		 ::flixel::text::FlxText _hx_tmp = this->_txtScore;
HXDLIN( 186)		_hx_tmp->set_y((this->_player->y + (int)64));
HXLINE( 187)		this->add(this->_txtScore);
HXLINE( 189)		this->_txtHighScore =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)-18,(int)25,(int)0,(HX_("Current High Score: ",21,50,71,fa) + ::HighScore_obj::score),(int)8,null());
HXLINE( 190)		 ::flixel::text::FlxText _hx_tmp1 = this->_txtHighScore;
HXDLIN( 190)		_hx_tmp1->set_y((this->_player->y + ((Float)72.)));
HXLINE( 191)		this->add(this->_txtHighScore);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,initHUD,(void))

void PlayState_obj::placeEntities(::String entityName, ::Xml entityData){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_195_placeEntities)
HXLINE( 196)		int x = ::Std_obj::parseInt(entityData->get(HX_("x",78,00,00,00)));
HXLINE( 197)		int y = ::Std_obj::parseInt(entityData->get(HX_("y",79,00,00,00)));
HXLINE( 199)		if ((entityName == HX_("player",61,eb,b8,37))) {
HXLINE( 201)			this->_player->set_x(x);
HXLINE( 202)			this->_player->set_y(y);
HXLINE( 204)			this->playerYPosInit = this->_player->y;
            		}
            		else {
HXLINE( 206)			if ((entityName == HX_("enemy",48,12,7b,70))) {
HXLINE( 208)				 ::flixel::group::FlxTypedSpriteGroup _hx_tmp = this->_grpEnemies;
HXDLIN( 208)				_hx_tmp->add( ::Enemy_obj::__alloc( HX_CTX ,x,y,(int)0)).StaticCast<  ::Enemy >();
            			}
            			else {
HXLINE( 210)				if ((entityName == HX_("doorTrigger",6a,b5,7f,99))) {
HXLINE( 212)					 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->_grpDoors;
HXDLIN( 212)					_hx_tmp1->add( ::Door_obj::__alloc( HX_CTX ,x,y,::Std_obj::parseInt(entityData->get(HX_("door",6e,f1,6d,42))))).StaticCast<  ::Door >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,placeEntities,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_222_update)
HXLINE( 223)		this->super::update(elapsed);
HXLINE( 227)		 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this = ::flixel::FlxG_obj::watch;
HXLINE( 230)		if ((this->speed > this->maxSpeed)) {
HXLINE( 232)			this->speed = this->maxSpeed;
HXLINE( 233)			if (::NGio_obj::isLoggedIn) {
HXLINE( 236)				 ::io::newgrounds::objects::Medal hornyMedal = ::io::newgrounds::NG_obj::core->medals->get((int)54299).StaticCast<  ::io::newgrounds::objects::Medal >();
HXLINE( 237)				if (!(hornyMedal->unlocked)) {
HXLINE( 238)					hornyMedal->sendUnlock();
            				}
            			}
            		}
HXLINE( 242)		if ((this->score >= (int)10000)) {
HXLINE( 244)			if (::NGio_obj::isLoggedIn) {
HXLINE( 246)				 ::io::newgrounds::objects::Medal hornyGodMedal = ::io::newgrounds::NG_obj::core->medals->get((int)54300).StaticCast<  ::io::newgrounds::objects::Medal >();
HXLINE( 247)				if (!(hornyGodMedal->unlocked)) {
HXLINE( 248)					hornyGodMedal->sendUnlock();
            				}
            			}
            		}
HXLINE( 253)		if ((this->startingTimer > (int)0)) {
HXLINE( 255)			 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 255)			_hx_tmp->startingTimer = (_hx_tmp->startingTimer - ::flixel::FlxG_obj::elapsed);
            		}
            		else {
HXLINE( 259)			 ::PlayState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 259)			_hx_tmp1->speed = (_hx_tmp1->speed - ((Float)0.0083333333333333332));
            		}
HXLINE( 265)		bool _hx_tmp2;
HXDLIN( 265)		if (!((this->speed < ((Float)0.2)))) {
HXLINE( 265)			_hx_tmp2 = (this->_player->y > (int)247);
            		}
            		else {
HXLINE( 265)			_hx_tmp2 = true;
            		}
HXDLIN( 265)		if (_hx_tmp2) {
HXLINE( 267)			if (::NGio_obj::isLoggedIn) {
HXLINE( 269)				 ::io::newgrounds::objects::ScoreBoard board = ::io::newgrounds::NG_obj::core->scoreBoards->get((int)8004).StaticCast<  ::io::newgrounds::objects::ScoreBoard >();
HXLINE( 270)				board->postScore(::Std_obj::_hx_int(this->score),null());
            			}
HXLINE( 275)			if ((this->score > ::HighScore_obj::score)) {
HXLINE( 277)				::HighScore_obj::score = ::Std_obj::_hx_int(this->score);
            			}
HXLINE( 280)			::HighScore_obj::recentScore = ::Std_obj::_hx_int(this->score);
HXLINE( 282)			 ::Dynamic _hx_tmp3 = hx::ClassOf< ::HighScore >();
HXDLIN( 282)			int _hx_tmp4 = ::HighScore_obj::totalScore;
HXDLIN( 282)			::HighScore_obj::totalScore = (_hx_tmp4 + ::Std_obj::_hx_int(this->score));
HXLINE( 284)			::HighScore_obj::save();
HXLINE( 288)			{
HXLINE( 288)				 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 288)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 288)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 291)		if ((this->_player->y > this->playerYPosInit)) {
HXLINE( 293)			 ::Player _g = this->_player;
HXDLIN( 293)			Float _g1 = _g->y;
HXDLIN( 293)			_g->set_y((_g1 - ((int)75 * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 296)		 ::PlayState _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 296)		_hx_tmp5->score = (_hx_tmp5->score + this->speed);
HXLINE( 297)		 ::flixel::text::FlxText _hx_tmp6 = this->_txtScore;
HXDLIN( 297)		_hx_tmp6->set_text((HX_("Distance: ",3b,c1,9d,82) + ::Std_obj::_hx_int(this->score)));
HXLINE( 300)		this->_grpTilemaps->forEach(this->checkTilemapPos_dyn(),null());
HXLINE( 301)		this->_grpWalls->forEach(this->checkWallPos_dyn(),null());
HXLINE( 302)		this->_grpEnemies->group->forEach(this->updateEnemyPos_dyn(),false);
HXLINE( 307)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->_player) ),( ( ::flixel::FlxBasic)(this->_grpWalls) ),null(),::flixel::FlxObject_obj::separate_dyn());
            	}


void PlayState_obj::updateEnemyPos( ::Enemy e){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_311_updateEnemyPos)
HXLINE( 313)		bool _hx_tmp;
HXDLIN( 313)		if (!(::flixel::FlxG_obj::overlap(e,( ( ::flixel::FlxBasic)(this->_grpWalls) ),null(),::flixel::FlxObject_obj::separate_dyn()))) {
HXLINE( 313)			_hx_tmp = ::flixel::FlxG_obj::overlap(e,( ( ::flixel::FlxBasic)(this->_grpEnemies) ),null(),::flixel::FlxObject_obj::separate_dyn());
            		}
            		else {
HXLINE( 313)			_hx_tmp = true;
            		}
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 315)			e->kill();
            		}
HXLINE( 318)		if ((e->ID == (int)1)) {
HXLINE( 320)			this->boost(e);
            		}
HXLINE( 323)		if (::flixel::FlxG_obj::overlap(this->_player,e,null(),null())) {
HXLINE( 328)			if (hx::IsNotEq( ::MashState_obj::outcome,::Outcome_obj::NONE_dyn() )) {
HXLINE( 330)				this->boost(e);
            			}
            			else {
HXLINE( 335)				e->ID = (int)1;
HXLINE( 336)				this->openSubState( ::MashState_obj::__alloc( HX_CTX ,(int)1996488704,e->etype));
            			}
            		}
HXLINE( 341)		{
HXLINE( 341)			 ::Enemy _g = e;
HXDLIN( 341)			_g->set_y((_g->y + this->speed));
            		}
HXLINE( 344)		Float e1 = e->y;
HXDLIN( 344)		if ((e1 > ((Float)::flixel::FlxG_obj::height / (Float)::flixel::FlxG_obj::camera->zoom))) {
HXLINE( 346)			this->_grpEnemies->remove(e,true).StaticCast<  ::Enemy >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,updateEnemyPos,(void))

void PlayState_obj::boost( ::Enemy e){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_351_boost)
HXLINE( 353)		if (hx::IsEq( ::MashState_obj::outcome,::Outcome_obj::VICTORY_dyn() )) {
HXLINE( 355)			 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 355)			Float _hx_tmp1 = _hx_tmp->speed;
HXDLIN( 355)			_hx_tmp->speed = (_hx_tmp1 + ::flixel::FlxG_obj::random->_hx_float(((Float)1.0),((Float)1.2),null()));
HXLINE( 356)			::haxe::Log_obj::trace(HX_("speed up",54,45,c3,ae),hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),356,HX_("PlayState",5d,83,c2,46),HX_("boost",23,27,f8,b6)));
HXLINE( 357)			this->remove(this->bg,null());
            		}
            		else {
HXLINE( 359)			if (hx::IsNotEq( ::MashState_obj::outcome,::Outcome_obj::VICTORY_dyn() )) {
HXLINE( 361)				 ::PlayState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 361)				Float _hx_tmp3 = _hx_tmp2->speed;
HXDLIN( 361)				_hx_tmp2->speed = (_hx_tmp3 - ::flixel::FlxG_obj::random->_hx_float(((Float)0.2),((Float)0.3),null()));
HXLINE( 362)				::haxe::Log_obj::trace(HX_("slowed down",e2,cb,5c,23),hx::SourceInfo(HX_("PlayState.hx",81,77,0d,b3),362,HX_("PlayState",5d,83,c2,46),HX_("boost",23,27,f8,b6)));
HXLINE( 363)				this->remove(this->bg,null());
            			}
            		}
HXLINE( 367)		e->ID = (int)0;
HXLINE( 368)		e->kill();
HXLINE( 369)		::MashState_obj::outcome = ::Outcome_obj::NONE_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,boost,(void))

void PlayState_obj::checkTilemapPos( ::flixel::tile::FlxTilemap t){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_375_checkTilemapPos)
HXDLIN( 375)		this->updatePos(t,HX_("Floor",ac,41,c4,95));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkTilemapPos,(void))

void PlayState_obj::checkWallPos( ::flixel::tile::FlxTilemap w){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_380_checkWallPos)
HXDLIN( 380)		this->updatePos(w,HX_("Walls",09,7c,4c,58));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkWallPos,(void))

void PlayState_obj::updatePos( ::flixel::tile::FlxTilemap t,::String type){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_390_updatePos)
HXLINE( 391)		{
HXLINE( 391)			 ::flixel::tile::FlxTilemap _g = t;
HXDLIN( 391)			_g->set_y((_g->y + this->speed));
            		}
HXLINE( 395)		Float t1 = t->y;
HXDLIN( 395)		if ((t1 >= (t->get_height() + (int)64))) {
HXLINE( 397)			this->generateTilemap(t,type);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,updatePos,(void))

void PlayState_obj::generateTilemap( ::flixel::tile::FlxTilemap t,::String type){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_402_generateTilemap)
HXLINE( 406)		if ((type == HX_("Walls",09,7c,4c,58))) {
HXLINE( 408)			this->_grpWalls->remove(t,true).StaticCast<  ::flixel::tile::FlxTilemap >();
            		}
HXLINE( 410)		if ((type == HX_("Floor",ac,41,c4,95))) {
HXLINE( 412)			this->_grpTilemaps->remove(t,true).StaticCast<  ::flixel::tile::FlxTilemap >();
            		}
HXLINE( 415)		this->_map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,((HX_("assets/data/chunk",d4,8e,12,69) + ::flixel::FlxG_obj::random->_hx_int((int)1,(int)9,null())) + HX_(".oel",28,63,bc,1e)));
HXLINE( 419)		if ((this->score > (int)99750)) {
HXLINE( 420)			t = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,type);
            		}
            		else {
HXLINE( 421)			if ((this->score > (int)94750)) {
HXLINE( 422)				t = this->_map->loadTilemap(HX_("assets/data/tile_temple_4.png",d5,be,0d,c5),(int)16,(int)16,type);
            			}
            			else {
HXLINE( 423)				if ((this->score > (int)89750)) {
HXLINE( 424)					t = this->_map->loadTilemap(HX_("assets/data/tile_temple_3.png",54,2a,a7,31),(int)16,(int)16,type);
            				}
            				else {
HXLINE( 425)					if ((this->score > (int)84750)) {
HXLINE( 426)						t = this->_map->loadTilemap(HX_("assets/data/tile_temple_2.png",d3,95,40,9e),(int)16,(int)16,type);
            					}
            					else {
HXLINE( 427)						if ((this->score > (int)79750)) {
HXLINE( 428)							t = this->_map->loadTilemap(HX_("assets/data/tile_temple_1.png",52,01,da,0a),(int)16,(int)16,type);
            						}
            						else {
HXLINE( 429)							if ((this->score > (int)74750)) {
HXLINE( 430)								t = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,type);
            							}
            							else {
HXLINE( 431)								if ((this->score > (int)69750)) {
HXLINE( 432)									t = this->_map->loadTilemap(HX_("assets/data/tile_temple_4.png",d5,be,0d,c5),(int)16,(int)16,type);
            								}
            								else {
HXLINE( 433)									if ((this->score > (int)64750)) {
HXLINE( 434)										t = this->_map->loadTilemap(HX_("assets/data/tile_temple_3.png",54,2a,a7,31),(int)16,(int)16,type);
            									}
            									else {
HXLINE( 435)										if ((this->score > (int)59750)) {
HXLINE( 436)											t = this->_map->loadTilemap(HX_("assets/data/tile_temple_2.png",d3,95,40,9e),(int)16,(int)16,type);
            										}
            										else {
HXLINE( 437)											if ((this->score > (int)54750)) {
HXLINE( 438)												t = this->_map->loadTilemap(HX_("assets/data/tile_temple_1.png",52,01,da,0a),(int)16,(int)16,type);
            											}
            											else {
HXLINE( 439)												if ((this->score > (int)49750)) {
HXLINE( 440)													t = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,type);
            												}
            												else {
HXLINE( 441)													if ((this->score > (int)44750)) {
HXLINE( 442)														t = this->_map->loadTilemap(HX_("assets/data/tile_temple_4.png",d5,be,0d,c5),(int)16,(int)16,type);
            													}
            													else {
HXLINE( 443)														if ((this->score > (int)39750)) {
HXLINE( 444)															t = this->_map->loadTilemap(HX_("assets/data/tile_temple_3.png",54,2a,a7,31),(int)16,(int)16,type);
            														}
            														else {
HXLINE( 445)															if ((this->score > (int)34750)) {
HXLINE( 446)																t = this->_map->loadTilemap(HX_("assets/data/tile_temple_2.png",d3,95,40,9e),(int)16,(int)16,type);
            															}
            															else {
HXLINE( 447)																if ((this->score > (int)29750)) {
HXLINE( 448)																	t = this->_map->loadTilemap(HX_("assets/data/tile_temple_1.png",52,01,da,0a),(int)16,(int)16,type);
            																}
            																else {
HXLINE( 449)																	if ((this->score > (int)24750)) {
HXLINE( 450)																		t = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,type);
            																	}
            																	else {
HXLINE( 451)																		if ((this->score > (int)19750)) {
HXLINE( 452)																			t = this->_map->loadTilemap(HX_("assets/data/tile_temple_4.png",d5,be,0d,c5),(int)16,(int)16,type);
            																		}
            																		else {
HXLINE( 453)																			if ((this->score > (int)14750)) {
HXLINE( 454)																				t = this->_map->loadTilemap(HX_("assets/data/tile_temple_3.png",54,2a,a7,31),(int)16,(int)16,type);
            																			}
            																			else {
HXLINE( 455)																				if ((this->score > (int)9750)) {
HXLINE( 456)																					t = this->_map->loadTilemap(HX_("assets/data/tile_temple_2.png",d3,95,40,9e),(int)16,(int)16,type);
            																				}
            																				else {
HXLINE( 457)																					if ((this->score > (int)4750)) {
HXLINE( 458)																						t = this->_map->loadTilemap(HX_("assets/data/tile_temple_1.png",52,01,da,0a),(int)16,(int)16,type);
            																					}
            																					else {
HXLINE( 460)																						t = this->_map->loadTilemap(HX_("assets/data/tile_temple_0.png",d1,6c,73,77),(int)16,(int)16,type);
            																					}
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 465)		if ((type == HX_("Walls",09,7c,4c,58))) {
HXLINE( 467)			Float _hx_tmp = Dynamic( this->_grpWalls->members->__get((int)0)).StaticCast<  ::flixel::tile::FlxTilemap >()->y;
HXDLIN( 467)			t->set_y((_hx_tmp - (t->get_height() * (int)2)));
HXLINE( 468)			this->_grpWalls->add(t).StaticCast<  ::flixel::tile::FlxTilemap >();
            		}
HXLINE( 470)		if ((type == HX_("Floor",ac,41,c4,95))) {
HXLINE( 472)			Float _hx_tmp1 = Dynamic( this->_grpTilemaps->members->__get((int)0)).StaticCast<  ::flixel::tile::FlxTilemap >()->y;
HXDLIN( 472)			t->set_y((_hx_tmp1 - (t->get_height() * (int)2)));
HXLINE( 473)			this->_grpTilemaps->add(t).StaticCast<  ::flixel::tile::FlxTilemap >();
HXLINE( 477)			int enemyAmount = ::flixel::FlxG_obj::random->_hx_int((int)1,(int)3,null());
HXLINE( 478)			int enemyType = (int)0;
HXLINE( 481)			while((enemyAmount > (int)0)){
HXLINE( 483)				 ::flixel::group::FlxTypedSpriteGroup _hx_tmp2 = this->_grpEnemies;
HXDLIN( 483)				Float t1 = t->x;
HXDLIN( 483)				Float _hx_tmp3 = (t1 + ((int)16 * ::flixel::FlxG_obj::random->_hx_int((int)2,(int)6,null())));
HXDLIN( 483)				Float t2 = t->y;
HXDLIN( 483)				Float _hx_tmp4 = (t2 + ((int)16 * ::flixel::FlxG_obj::random->_hx_int((int)-12,(int)12,null())));
HXDLIN( 483)				_hx_tmp2->add( ::Enemy_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp4,::flixel::FlxG_obj::random->_hx_int((int)0,(int)6,null()))).StaticCast<  ::Enemy >();
HXLINE( 485)				enemyAmount = (enemyAmount - (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,generateTilemap,(void))


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(maxSpeed,"maxSpeed");
	HX_MARK_MEMBER_NAME(_player,"_player");
	HX_MARK_MEMBER_NAME(playerYPosInit,"playerYPosInit");
	HX_MARK_MEMBER_NAME(_enemy,"_enemy");
	HX_MARK_MEMBER_NAME(_grpEntities,"_grpEntities");
	HX_MARK_MEMBER_NAME(_grpEnemies,"_grpEnemies");
	HX_MARK_MEMBER_NAME(_grpDoors,"_grpDoors");
	HX_MARK_MEMBER_NAME(_map,"_map");
	HX_MARK_MEMBER_NAME(_mWalls,"_mWalls");
	HX_MARK_MEMBER_NAME(_mFloors,"_mFloors");
	HX_MARK_MEMBER_NAME(_mWalls2,"_mWalls2");
	HX_MARK_MEMBER_NAME(_mFloors2,"_mFloors2");
	HX_MARK_MEMBER_NAME(_mWalls3,"_mWalls3");
	HX_MARK_MEMBER_NAME(_mFloors3,"_mFloors3");
	HX_MARK_MEMBER_NAME(_grpTilemaps,"_grpTilemaps");
	HX_MARK_MEMBER_NAME(_grpWalls,"_grpWalls");
	HX_MARK_MEMBER_NAME(_txtScore,"_txtScore");
	HX_MARK_MEMBER_NAME(_txtHighScore,"_txtHighScore");
	HX_MARK_MEMBER_NAME(score,"score");
	HX_MARK_MEMBER_NAME(_camTarget,"_camTarget");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(timesClickedOffScreen,"timesClickedOffScreen");
	HX_MARK_MEMBER_NAME(speedAccel,"speedAccel");
	HX_MARK_MEMBER_NAME(startingTimer,"startingTimer");
	HX_MARK_MEMBER_NAME(godReached,"godReached");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(maxSpeed,"maxSpeed");
	HX_VISIT_MEMBER_NAME(_player,"_player");
	HX_VISIT_MEMBER_NAME(playerYPosInit,"playerYPosInit");
	HX_VISIT_MEMBER_NAME(_enemy,"_enemy");
	HX_VISIT_MEMBER_NAME(_grpEntities,"_grpEntities");
	HX_VISIT_MEMBER_NAME(_grpEnemies,"_grpEnemies");
	HX_VISIT_MEMBER_NAME(_grpDoors,"_grpDoors");
	HX_VISIT_MEMBER_NAME(_map,"_map");
	HX_VISIT_MEMBER_NAME(_mWalls,"_mWalls");
	HX_VISIT_MEMBER_NAME(_mFloors,"_mFloors");
	HX_VISIT_MEMBER_NAME(_mWalls2,"_mWalls2");
	HX_VISIT_MEMBER_NAME(_mFloors2,"_mFloors2");
	HX_VISIT_MEMBER_NAME(_mWalls3,"_mWalls3");
	HX_VISIT_MEMBER_NAME(_mFloors3,"_mFloors3");
	HX_VISIT_MEMBER_NAME(_grpTilemaps,"_grpTilemaps");
	HX_VISIT_MEMBER_NAME(_grpWalls,"_grpWalls");
	HX_VISIT_MEMBER_NAME(_txtScore,"_txtScore");
	HX_VISIT_MEMBER_NAME(_txtHighScore,"_txtHighScore");
	HX_VISIT_MEMBER_NAME(score,"score");
	HX_VISIT_MEMBER_NAME(_camTarget,"_camTarget");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(timesClickedOffScreen,"timesClickedOffScreen");
	HX_VISIT_MEMBER_NAME(speedAccel,"speedAccel");
	HX_VISIT_MEMBER_NAME(startingTimer,"startingTimer");
	HX_VISIT_MEMBER_NAME(godReached,"godReached");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { return hx::Val( _map ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"score") ) { return hx::Val( score ); }
		if (HX_FIELD_EQ(inName,"boost") ) { return hx::Val( boost_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_enemy") ) { return hx::Val( _enemy ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { return hx::Val( _player ); }
		if (HX_FIELD_EQ(inName,"_mWalls") ) { return hx::Val( _mWalls ); }
		if (HX_FIELD_EQ(inName,"initHUD") ) { return hx::Val( initHUD_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxSpeed") ) { return hx::Val( maxSpeed ); }
		if (HX_FIELD_EQ(inName,"_mFloors") ) { return hx::Val( _mFloors ); }
		if (HX_FIELD_EQ(inName,"_mWalls2") ) { return hx::Val( _mWalls2 ); }
		if (HX_FIELD_EQ(inName,"_mWalls3") ) { return hx::Val( _mWalls3 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_grpDoors") ) { return hx::Val( _grpDoors ); }
		if (HX_FIELD_EQ(inName,"_mFloors2") ) { return hx::Val( _mFloors2 ); }
		if (HX_FIELD_EQ(inName,"_mFloors3") ) { return hx::Val( _mFloors3 ); }
		if (HX_FIELD_EQ(inName,"_grpWalls") ) { return hx::Val( _grpWalls ); }
		if (HX_FIELD_EQ(inName,"_txtScore") ) { return hx::Val( _txtScore ); }
		if (HX_FIELD_EQ(inName,"updatePos") ) { return hx::Val( updatePos_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_camTarget") ) { return hx::Val( _camTarget ); }
		if (HX_FIELD_EQ(inName,"speedAccel") ) { return hx::Val( speedAccel ); }
		if (HX_FIELD_EQ(inName,"godReached") ) { return hx::Val( godReached ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpEnemies") ) { return hx::Val( _grpEnemies ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"initTilemap") ) { return hx::Val( initTilemap_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_grpEntities") ) { return hx::Val( _grpEntities ); }
		if (HX_FIELD_EQ(inName,"_grpTilemaps") ) { return hx::Val( _grpTilemaps ); }
		if (HX_FIELD_EQ(inName,"checkWallPos") ) { return hx::Val( checkWallPos_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_txtHighScore") ) { return hx::Val( _txtHighScore ); }
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return hx::Val( placeEntities_dyn() ); }
		if (HX_FIELD_EQ(inName,"startingTimer") ) { return hx::Val( startingTimer ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerYPosInit") ) { return hx::Val( playerYPosInit ); }
		if (HX_FIELD_EQ(inName,"updateEnemyPos") ) { return hx::Val( updateEnemyPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"checkTilemapPos") ) { return hx::Val( checkTilemapPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateTilemap") ) { return hx::Val( generateTilemap_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"timesClickedOffScreen") ) { return hx::Val( timesClickedOffScreen ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_map") ) { _map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmoLoader >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"score") ) { score=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_enemy") ) { _enemy=inValue.Cast<  ::Enemy >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_player") ) { _player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mWalls") ) { _mWalls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxSpeed") ) { maxSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mFloors") ) { _mFloors=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mWalls2") ) { _mWalls2=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mWalls3") ) { _mWalls3=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_grpDoors") ) { _grpDoors=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mFloors2") ) { _mFloors2=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_mFloors3") ) { _mFloors3=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_grpWalls") ) { _grpWalls=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_txtScore") ) { _txtScore=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_camTarget") ) { _camTarget=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speedAccel") ) { speedAccel=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"godReached") ) { godReached=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_grpEnemies") ) { _grpEnemies=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_grpEntities") ) { _grpEntities=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_grpTilemaps") ) { _grpTilemaps=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_txtHighScore") ) { _txtHighScore=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingTimer") ) { startingTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerYPosInit") ) { playerYPosInit=inValue.Cast< Float >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"timesClickedOffScreen") ) { timesClickedOffScreen=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("maxSpeed","\x43","\xea","\x86","\x2b"));
	outFields->push(HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"));
	outFields->push(HX_HCSTRING("playerYPosInit","\xcc","\xa7","\x19","\xe3"));
	outFields->push(HX_HCSTRING("_enemy","\x89","\x59","\x62","\x6c"));
	outFields->push(HX_HCSTRING("_grpEntities","\x47","\x79","\x95","\x96"));
	outFields->push(HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6"));
	outFields->push(HX_HCSTRING("_grpDoors","\x7f","\xec","\x5b","\x08"));
	outFields->push(HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"));
	outFields->push(HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b"));
	outFields->push(HX_HCSTRING("_mFloors","\xf5","\x1e","\x51","\x64"));
	outFields->push(HX_HCSTRING("_mWalls2","\xb7","\xf5","\xfb","\xd8"));
	outFields->push(HX_HCSTRING("_mFloors2","\x9d","\xf7","\xa9","\x62"));
	outFields->push(HX_HCSTRING("_mWalls3","\xb8","\xf5","\xfb","\xd8"));
	outFields->push(HX_HCSTRING("_mFloors3","\x9e","\xf7","\xa9","\x62"));
	outFields->push(HX_HCSTRING("_grpTilemaps","\x8b","\x1b","\x83","\x9b"));
	outFields->push(HX_HCSTRING("_grpWalls","\x63","\xa9","\xb5","\xef"));
	outFields->push(HX_HCSTRING("_txtScore","\x21","\x16","\xee","\x1d"));
	outFields->push(HX_HCSTRING("_txtHighScore","\xdf","\x5e","\x0a","\x5d"));
	outFields->push(HX_HCSTRING("score","\x52","\x73","\xd9","\x78"));
	outFields->push(HX_HCSTRING("_camTarget","\x81","\x4c","\x40","\x0b"));
	outFields->push(HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("timesClickedOffScreen","\x7a","\xe4","\xb3","\xea"));
	outFields->push(HX_HCSTRING("speedAccel","\xe1","\x0a","\x68","\x4e"));
	outFields->push(HX_HCSTRING("startingTimer","\xe5","\xd5","\x18","\x51"));
	outFields->push(HX_HCSTRING("godReached","\xb6","\x78","\xe0","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(PlayState_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,maxSpeed),HX_HCSTRING("maxSpeed","\x43","\xea","\x86","\x2b")},
	{hx::fsObject /*::Player*/ ,(int)offsetof(PlayState_obj,_player),HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,playerYPosInit),HX_HCSTRING("playerYPosInit","\xcc","\xa7","\x19","\xe3")},
	{hx::fsObject /*::Enemy*/ ,(int)offsetof(PlayState_obj,_enemy),HX_HCSTRING("_enemy","\x89","\x59","\x62","\x6c")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpEntities),HX_HCSTRING("_grpEntities","\x47","\x79","\x95","\x96")},
	{hx::fsObject /*::flixel::group::FlxTypedSpriteGroup*/ ,(int)offsetof(PlayState_obj,_grpEnemies),HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpDoors),HX_HCSTRING("_grpDoors","\x7f","\xec","\x5b","\x08")},
	{hx::fsObject /*::flixel::addons::editors::ogmo::FlxOgmoLoader*/ ,(int)offsetof(PlayState_obj,_map),HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mWalls),HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mFloors),HX_HCSTRING("_mFloors","\xf5","\x1e","\x51","\x64")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mWalls2),HX_HCSTRING("_mWalls2","\xb7","\xf5","\xfb","\xd8")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mFloors2),HX_HCSTRING("_mFloors2","\x9d","\xf7","\xa9","\x62")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mWalls3),HX_HCSTRING("_mWalls3","\xb8","\xf5","\xfb","\xd8")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,_mFloors3),HX_HCSTRING("_mFloors3","\x9e","\xf7","\xa9","\x62")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpTilemaps),HX_HCSTRING("_grpTilemaps","\x8b","\x1b","\x83","\x9b")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpWalls),HX_HCSTRING("_grpWalls","\x63","\xa9","\xb5","\xef")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_txtScore),HX_HCSTRING("_txtScore","\x21","\x16","\xee","\x1d")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,_txtHighScore),HX_HCSTRING("_txtHighScore","\xdf","\x5e","\x0a","\x5d")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,score),HX_HCSTRING("score","\x52","\x73","\xd9","\x78")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,_camTarget),HX_HCSTRING("_camTarget","\x81","\x4c","\x40","\x0b")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,bg),HX_HCSTRING("bg","\xc5","\x55","\x00","\x00")},
	{hx::fsInt,(int)offsetof(PlayState_obj,timesClickedOffScreen),HX_HCSTRING("timesClickedOffScreen","\x7a","\xe4","\xb3","\xea")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,speedAccel),HX_HCSTRING("speedAccel","\xe1","\x0a","\x68","\x4e")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,startingTimer),HX_HCSTRING("startingTimer","\xe5","\xd5","\x18","\x51")},
	{hx::fsBool,(int)offsetof(PlayState_obj,godReached),HX_HCSTRING("godReached","\xb6","\x78","\xe0","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("maxSpeed","\x43","\xea","\x86","\x2b"),
	HX_HCSTRING("_player","\x00","\xfd","\x2f","\xa6"),
	HX_HCSTRING("playerYPosInit","\xcc","\xa7","\x19","\xe3"),
	HX_HCSTRING("_enemy","\x89","\x59","\x62","\x6c"),
	HX_HCSTRING("_grpEntities","\x47","\x79","\x95","\x96"),
	HX_HCSTRING("_grpEnemies","\x60","\x48","\x72","\xc6"),
	HX_HCSTRING("_grpDoors","\x7f","\xec","\x5b","\x08"),
	HX_HCSTRING("_map","\x9d","\x4f","\x1e","\x3f"),
	HX_HCSTRING("_mWalls","\x1b","\xe2","\xa9","\x5b"),
	HX_HCSTRING("_mFloors","\xf5","\x1e","\x51","\x64"),
	HX_HCSTRING("_mWalls2","\xb7","\xf5","\xfb","\xd8"),
	HX_HCSTRING("_mFloors2","\x9d","\xf7","\xa9","\x62"),
	HX_HCSTRING("_mWalls3","\xb8","\xf5","\xfb","\xd8"),
	HX_HCSTRING("_mFloors3","\x9e","\xf7","\xa9","\x62"),
	HX_HCSTRING("_grpTilemaps","\x8b","\x1b","\x83","\x9b"),
	HX_HCSTRING("_grpWalls","\x63","\xa9","\xb5","\xef"),
	HX_HCSTRING("_txtScore","\x21","\x16","\xee","\x1d"),
	HX_HCSTRING("_txtHighScore","\xdf","\x5e","\x0a","\x5d"),
	HX_HCSTRING("score","\x52","\x73","\xd9","\x78"),
	HX_HCSTRING("_camTarget","\x81","\x4c","\x40","\x0b"),
	HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("timesClickedOffScreen","\x7a","\xe4","\xb3","\xea"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("initTilemap","\xfe","\x5e","\xf9","\xfd"),
	HX_HCSTRING("initHUD","\x87","\xfb","\x85","\xcb"),
	HX_HCSTRING("placeEntities","\x28","\xe6","\x91","\x17"),
	HX_HCSTRING("speedAccel","\xe1","\x0a","\x68","\x4e"),
	HX_HCSTRING("startingTimer","\xe5","\xd5","\x18","\x51"),
	HX_HCSTRING("godReached","\xb6","\x78","\xe0","\xfb"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("updateEnemyPos","\x55","\x93","\x3a","\x19"),
	HX_HCSTRING("boost","\x23","\x27","\xf8","\xb6"),
	HX_HCSTRING("checkTilemapPos","\xee","\x5c","\x65","\x62"),
	HX_HCSTRING("checkWallPos","\xc2","\xb2","\x85","\x81"),
	HX_HCSTRING("updatePos","\x0b","\x3b","\xe2","\x82"),
	HX_HCSTRING("generateTilemap","\x79","\x39","\x49","\x21"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

