// Generated by Haxe 3.4.7
#ifndef INCLUDED_PlayState
#define INCLUDED_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS4(flixel,addons,editors,ogmo,FlxOgmoLoader)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,tile,FlxBaseTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemap)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x46c2835d };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"PlayState"); }
		static hx::ObjectPtr< PlayState_obj > __new( ::Dynamic MaxSize);
		static hx::ObjectPtr< PlayState_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46"); }

		Float speed;
		Float maxSpeed;
		 ::Player _player;
		Float playerYPosInit;
		 ::Enemy _enemy;
		 ::flixel::group::FlxTypedGroup _grpEntities;
		 ::flixel::group::FlxTypedSpriteGroup _grpEnemies;
		 ::flixel::group::FlxTypedGroup _grpDoors;
		 ::flixel::addons::editors::ogmo::FlxOgmoLoader _map;
		 ::flixel::tile::FlxTilemap _mWalls;
		 ::flixel::tile::FlxTilemap _mFloors;
		 ::flixel::tile::FlxTilemap _mWalls2;
		 ::flixel::tile::FlxTilemap _mFloors2;
		 ::flixel::tile::FlxTilemap _mWalls3;
		 ::flixel::tile::FlxTilemap _mFloors3;
		 ::flixel::group::FlxTypedGroup _grpTilemaps;
		 ::flixel::group::FlxTypedGroup _grpWalls;
		 ::flixel::text::FlxText _txtScore;
		 ::flixel::text::FlxText _txtHighScore;
		Float score;
		 ::flixel::FlxSprite _camTarget;
		 ::flixel::FlxSprite bg;
		void create();

		int timesClickedOffScreen;
		void onFocusLost();

		void initTilemap();
		::Dynamic initTilemap_dyn();

		void initHUD();
		::Dynamic initHUD_dyn();

		void placeEntities(::String entityName, ::Xml entityData);
		::Dynamic placeEntities_dyn();

		Float speedAccel;
		Float startingTimer;
		bool godReached;
		void update(Float elapsed);

		void updateEnemyPos( ::Enemy e);
		::Dynamic updateEnemyPos_dyn();

		void boost( ::Enemy e);
		::Dynamic boost_dyn();

		void checkTilemapPos( ::flixel::tile::FlxTilemap t);
		::Dynamic checkTilemapPos_dyn();

		void checkWallPos( ::flixel::tile::FlxTilemap w);
		::Dynamic checkWallPos_dyn();

		void updatePos( ::flixel::tile::FlxTilemap t,::String type);
		::Dynamic updatePos_dyn();

		void generateTilemap( ::flixel::tile::FlxTilemap t,::String type);
		::Dynamic generateTilemap_dyn();

};


#endif /* INCLUDED_PlayState */ 
