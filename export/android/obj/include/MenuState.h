// Generated by Haxe 3.4.7
#ifndef INCLUDED_MenuState
#define INCLUDED_MenuState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(MenuState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS4(flixel,addons,editors,ogmo,FlxOgmoLoader)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,tile,FlxBaseTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemap)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES MenuState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef MenuState_obj OBJ_;
		MenuState_obj();

	public:
		enum { _hx_ClassId = 0x17fb3926 };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="MenuState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"MenuState"); }
		static hx::ObjectPtr< MenuState_obj > __new( ::Dynamic MaxSize);
		static hx::ObjectPtr< MenuState_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MenuState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MenuState","\xd2","\xbf","\xb6","\xc0"); }

		 ::flixel::text::FlxText mScore;
		 ::flixel::text::FlxText debugInfo;
		::String currentVersion;
		 ::flixel::FlxSprite sprMonster;
		 ::flixel::FlxSprite sprMashing;
		 ::flixel::FlxSprite bg;
		 ::flixel::addons::editors::ogmo::FlxOgmoLoader _map;
		 ::flixel::tile::FlxTilemap _mWalls;
		 ::flixel::tile::FlxTilemap _mFloors;
		 ::flixel::tile::FlxTilemap _mWalls2;
		 ::flixel::tile::FlxTilemap _mFloors2;
		 ::flixel::tile::FlxTilemap _mWalls3;
		 ::flixel::tile::FlxTilemap _mFloors3;
		 ::flixel::group::FlxTypedGroup _grpTilemaps;
		 ::flixel::group::FlxTypedGroup _grpWalls;
		Float speed;
		 ::flixel::group::FlxTypedGroup _grpMenu;
		 ::flixel::group::FlxTypedGroup _grpMenuBar;
		::Array< ::String > menuItems;
		::Array< ::String > leadItems;
		int selected;
		 ::flixel::FlxSprite selector;
		int selMax;
		Float mapZoom;
		Float mapOffsetX;
		::String discordLink;
		void create();

		void initTilemap();
		::Dynamic initTilemap_dyn();

		void initImages();
		::Dynamic initImages_dyn();

		void initText();
		::Dynamic initText_dyn();

		void scaleUp( ::flixel::tile::FlxTilemap t);
		::Dynamic scaleUp_dyn();

		void update(Float elapsed);

		void menuHandling();
		::Dynamic menuHandling_dyn();

		void resetBarFill();
		::Dynamic resetBarFill_dyn();

		void checkTilemapPos( ::flixel::tile::FlxTilemap t);
		::Dynamic checkTilemapPos_dyn();

		void checkWallPos( ::flixel::tile::FlxTilemap w);
		::Dynamic checkWallPos_dyn();

		void updatePos( ::flixel::tile::FlxTilemap t,::String type);
		::Dynamic updatePos_dyn();

		void generateTilemap( ::flixel::tile::FlxTilemap t,::String type);
		::Dynamic generateTilemap_dyn();

};


#endif /* INCLUDED_MenuState */ 
