// Generated by Haxe 3.4.7
#ifndef INCLUDED_MashState
#define INCLUDED_MashState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
HX_DECLARE_CLASS0(MashState)
HX_DECLARE_CLASS0(Outcome)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,tweens,FlxTween)
HX_DECLARE_CLASS2(flixel,ui,FlxBar)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES MashState_obj : public  ::flixel::FlxSubState_obj
{
	public:
		typedef  ::flixel::FlxSubState_obj super;
		typedef MashState_obj OBJ_;
		MashState_obj();

	public:
		enum { _hx_ClassId = 0x79349848 };

		void __construct(hx::Null< int >  __o_BGColor,int EType);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="MashState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"MashState"); }
		static hx::ObjectPtr< MashState_obj > __new(hx::Null< int >  __o_BGColor,int EType);
		static hx::ObjectPtr< MashState_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_BGColor,int EType);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~MashState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("MashState","\x48","\x98","\x34","\x79"); }

		static void __boot();
		static  ::Outcome outcome;
		int enemyType;
		 ::flixel::FlxSprite _mashSprite;
		 ::flixel::FlxSprite _enemySprite;
		Float _enemyHealth;
		 ::flixel::FlxCamera thisCam;
		bool mashX;
		Float maxShake;
		Float mashTimer;
		 ::flixel::text::FlxText txtTimer;
		 ::flixel::ui::FlxBar _barHealth;
		bool finishing;
		void create();

		void update(Float elapsed);

		void mash();
		::Dynamic mash_dyn();

		void endTweens();
		::Dynamic endTweens_dyn();

		void finishTween( ::flixel::tweens::FlxTween tween);
		::Dynamic finishTween_dyn();

};


#endif /* INCLUDED_MashState */ 
