// Generated by Haxe 3.4.7
#ifndef INCLUDED_io_newgrounds_objects_Session
#define INCLUDED_io_newgrounds_objects_Session

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
HX_DECLARE_CLASS2(io,newgrounds,NGLite)
HX_DECLARE_CLASS3(io,newgrounds,objects,Object)
HX_DECLARE_CLASS3(io,newgrounds,objects,Session)

namespace io{
namespace newgrounds{
namespace objects{


class HXCPP_CLASS_ATTRIBUTES Session_obj : public  ::io::newgrounds::objects::Object_obj
{
	public:
		typedef  ::io::newgrounds::objects::Object_obj super;
		typedef Session_obj OBJ_;
		Session_obj();

	public:
		enum { _hx_ClassId = 0x6479a07c };

		void __construct( ::io::newgrounds::NGLite core, ::Dynamic data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="io.newgrounds.objects.Session")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"io.newgrounds.objects.Session"); }
		static hx::ObjectPtr< Session_obj > __new( ::io::newgrounds::NGLite core, ::Dynamic data);
		static hx::ObjectPtr< Session_obj > __alloc(hx::Ctx *_hx_ctx, ::io::newgrounds::NGLite core, ::Dynamic data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Session_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Session","\x36","\x3f","\xe9","\x60"); }

		bool expired;
		::String id;
		::String passportUrl;
		bool remember;
		 ::Dynamic user;
		void parse( ::Dynamic data);

		::String get_status();
		::Dynamic get_status_dyn();

		void expire();
		::Dynamic expire_dyn();

};

} // end namespace io
} // end namespace newgrounds
} // end namespace objects

#endif /* INCLUDED_io_newgrounds_objects_Session */ 
