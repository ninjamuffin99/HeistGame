// Generated by Haxe 3.4.7
#ifndef INCLUDED_flixel_addons_text_FlxTextField
#define INCLUDED_flixel_addons_text_FlxTextField

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,text,FlxTextField)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS3(openfl,_legacy,display,BitmapData)
HX_DECLARE_CLASS3(openfl,_legacy,display,IBitmapDrawable)

namespace flixel{
namespace addons{
namespace text{


class HXCPP_CLASS_ATTRIBUTES FlxTextField_obj : public  ::flixel::text::FlxText_obj
{
	public:
		typedef  ::flixel::text::FlxText_obj super;
		typedef FlxTextField_obj OBJ_;
		FlxTextField_obj();

	public:
		enum { _hx_ClassId = 0x0c660bfb };

		void __construct(Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.text.FlxTextField")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.text.FlxTextField"); }
		static hx::ObjectPtr< FlxTextField_obj > __new(Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont);
		static hx::ObjectPtr< FlxTextField_obj > __alloc(hx::Ctx *_hx_ctx,Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxTextField_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxTextField","\x1b","\x6e","\x69","\xb6"); }

		void destroy();

		void stamp( ::flixel::FlxSprite Brush,hx::Null< int >  X,hx::Null< int >  Y);

		bool pixelsOverlapPoint( ::flixel::math::FlxPoint point,hx::Null< int >  Mask, ::flixel::FlxCamera Camera);

		bool isSimpleRender( ::flixel::FlxCamera camera);

		 ::openfl::_legacy::display::BitmapData get_pixels();

		 ::openfl::_legacy::display::BitmapData set_pixels( ::openfl::_legacy::display::BitmapData Pixels);

		Float set_alpha(Float Alpha);

		Float set_height(Float Height);

		bool set_visible(bool Value);

		void kill();

		void revive();

		void draw();

		 ::flixel::FlxCamera get_camera();

		 ::flixel::FlxCamera set_camera( ::flixel::FlxCamera Value);

};

} // end namespace flixel
} // end namespace addons
} // end namespace text

#endif /* INCLUDED_flixel_addons_text_FlxTextField */ 
